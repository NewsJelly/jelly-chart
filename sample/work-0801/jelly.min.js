(function(t, e) {
    typeof exports === "object" && typeof module !== "undefined" ? module.exports = e(require("https://d3js.org/d3.v4.min")) : typeof define === "function" && define.amd ? define(["https://d3js.org/d3.v4.min"], e) : t.jelly = e(t.d3)
})(this, function(t) {
    "use strict";
    if (typeof Object.assign != "function") {
        (function() {
            Object.assign = function(t) {
                if (t === undefined || t === null) {
                    throw new TypeError("Cannot convert undefined or null to object")
                }
                var e = Object(t);
                for (var i = 1; i < arguments.length; i++) {
                    var r = arguments[i];
                    if (r !== undefined && r !== null) {
                        for (var n in r) {
                            if (r.hasOwnProperty(n)) {
                                e[n] = r[n]
                            }
                        }
                    }
                }
                return e
            }
        })()
    }
    if (!Array.prototype.find) {
        Array.prototype.find = function(t) {
            if (this == null) {
                throw new TypeError("Array.prototype.find called on null or undefined")
            }
            if (typeof t !== "function") {
                throw new TypeError("predicate must be a function")
            }
            var e = Object(this);
            var i = e.length >>> 0;
            var r = arguments[1];
            var n;
            for (var a = 0; a < i; a++) {
                n = e[a];
                if (t.call(r, n, a, e)) {
                    return n
                }
            }
            return undefined
        }
    }
    Number.isInteger = Number.isInteger || function(t) {
        return typeof t === "number" && isFinite(t) && Math.floor(t) === t
    };
    var e = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(t) {
        return typeof t
    } : function(t) {
        return t && typeof Symbol === "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t
    };
    var i = function(t, e) {
        if (!(t instanceof e)) {
            throw new TypeError("Cannot call a class as a function")
        }
    };
    var r = function() {
        function t(t, e) {
            for (var i = 0; i < e.length; i++) {
                var r = e[i];
                r.enumerable = r.enumerable || false;
                r.configurable = true;
                if ("value" in r) r.writable = true;
                Object.defineProperty(t, r.key, r)
            }
        }
        return function(e, i, r) {
            if (i) t(e.prototype, i);
            if (r) t(e, r);
            return e
        }
    }();
    var n = function t(e, i, r) {
        if (e === null) e = Function.prototype;
        var n = Object.getOwnPropertyDescriptor(e, i);
        if (n === undefined) {
            var a = Object.getPrototypeOf(e);
            if (a === null) {
                return undefined
            } else {
                return t(a, i, r)
            }
        } else if ("value" in n) {
            return n.value
        } else {
            var s = n.get;
            if (s === undefined) {
                return undefined
            }
            return s.call(r)
        }
    };
    var a = function(t, e) {
        if (typeof e !== "function" && e !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof e)
        }
        t.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: t,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (e) Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e
    };
    var s = function(t, e) {
        if (!t) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
        }
        return e && (typeof e === "object" || typeof e === "function") ? e : t
    };
    var o = "jellychart";
    var l = ["#50C3F7 ", "#7986CB ", "#BA68C8 ", "#F06292 ", "#FF8A65 ", "#FFD54F ", "#AED581 ", "#4CB6AC ", "#2C82A9 ", "#48528A ", "#803E8C ", "#A6365B ", "#CF6644 ", "#C1A039 ", "#749350 ", "#32827A "];
    var c = function() {
        var e = t.format(",");
        var i = t.format("+,");
        var r = t.format(",.1f");
        var n = t.format("+,.2f");
        return function(t) {
            var a = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            if (isNaN(t)) return t;
            else if (typeof t === "string") t = +t;
            return (Number.isInteger(t) ? a ? i : e : a ? n : r)(t)
        }
    }();

    function u(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : o;
        var r = t.split(" ").map(function(t) {
            return i + "-" + t
        });
        if (e) return "." + r.join(".");
        else return r.join(" ")
    }

    function f(t, e) {
        if (t.on && typeof t.on === "function") {
            var i = t.on;
            t.on = function() {
                var r = void 0;
                try {
                    r = i.apply(t, arguments)
                } catch (t) {
                    r = e.on.apply(e, arguments)
                }
                return r
            }
        } else {
            t.on = function() {
                var i = e.on.apply(e, arguments);
                return i === e ? t : i
            }
        }
        return t
    }

    function h() {
        try {
            return /constructor/i.test(window.HTMLElement) || function(t) {
                return t.toString() === "[object SafariRemoteNotification]"
            }(!window["safari"] || h.pushNotification)
        } catch (t) {
            return false
        }
    }

    function d(t) {
        return function(e) {
            if (!arguments.length) return this.__attrs__[t];
            this.__attrs__[t] = e;
            return this
        }
    }

    function v(t, e) {
        if (!t.__attrs__) t.__attrs__ = {};
        e = JSON.parse(JSON.stringify(e));
        for (var i in e) {
            if (e.hasOwnProperty(i)) {
                t.__attrs__[i] = e[i]
            }
        }
    }

    function _(t, e) {
        for (var i in e) {
            if (e.hasOwnProperty(i) && !t.prototype[i]) {
                t.prototype[i] = d(i)
            }
        }
    }

    function p(t) {
        var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return function(r) {
            if (!arguments.length) return this.__attrs__[t];
            else if (typeof r === "boolean") {
                if (r) r = i
            } else if ((typeof r === "undefined" ? "undefined" : e(r)) === "object") {
                for (var n in i) {
                    if (i.hasOwnProperty(n)) {
                        if (!(n in r)) r[n] = i[n]
                    }
                }
            }
            this.__attrs__[t] = r;
            return this
        }
    }

    function m(e) {
        return t.select("body").selectAll("#" + e).empty()
    }

    function g(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var i = t + e;
        while (!m(i)) {
            e++;
            i = t + e
        }
        return i
    }

    function y(t) {
        return t[0] * t[t.length - 1] < 0
    }

    function x(t) {
        return new k(t)
    }
    var k = function() {
        function t(e) {
            i(this, t);
            this.parent = e
        }
        r(t, [{
            key: "with",
            value: function t() {
                for (var e = arguments.length, i = Array(e), r = 0; r < e; r++) {
                    i[r] = arguments[r]
                }
                return i.reduce(function(t, e) {
                    return e(t)
                }, this.parent)
            }
        }]);
        return t
    }();

    function w(t) {
        var e = function e() {
            return new t
        };
        e.__class__ = t;
        return e
    }
    var b = {
        millisecond: t.timeMillisecond,
        second: t.timeSecond,
        minute: t.timeMinute,
        hour: t.timeHour,
        day: t.timeDay,
        week: t.timeWeek,
        sunday: t.timeSunday,
        monday: t.timeMonday,
        tuesday: t.timeTuesday,
        wednesday: t.timeWednesday,
        thursday: t.timeThursday,
        friday: t.timeFriday,
        saturday: t.timeSaturday,
        month: t.timeMonth,
        year: t.timeYear,
        utcMillisecond: t.utcMillisecond,
        utcSecond: t.utcSecond,
        utcMinute: t.utcMinute,
        utcHour: t.utcHour,
        utcDay: t.utcDay,
        utcWeek: t.utcWeek,
        utcSunday: t.utcSunday,
        utcMonday: t.utcMonday,
        utcTuesday: t.utcTuesday,
        utcWednesday: t.utcWednesday,
        utcThursday: t.utcThursday,
        utcFriday: t.utcFriday,
        utcSaturday: t.utcSaturday,
        utcMonth: t.utcMonth,
        utcYear: t.utcYear
    };

    function z(t) {
        this.message = t + "is not availabele to select";
        this.name = "NotAvailableSelectorError"
    }

    function A() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "Unacceptable condtion";
        this.message = t;
        this.name = "ConditionException"
    }

    function N() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "Zero in the Denominator of a Fraction";
        this.message = t;
        this.name = "ZeroDenominator"
    }
    var F = {
        sum: t.sum,
        mean: t.mean,
        variance: t.variance,
        min: t.min,
        max: t.max,
        median: t.median,
        extent: t.extent
    };
    F.values = function(t) {
        return t
    };
    F.count = function(t) {
        return t.length
    };

    function S() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "ascending";
        var e = arguments[1];
        return function(i, r) {
            if (e) {
                i = i[e];
                r = r[e]
            }
            if (t === "natural") return 0;
            else if (t === "ascending") return i.getTime() - r.getTime();
            else return r.getTime() - i.getTime()
        }
    }

    function O() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "ascending";
        var e = arguments[1];
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function(t) {
            return t
        };
        var n = /(\d+((-|\.)*\d*))/;

        function a(e, i) {
            if (t === "natural") return 0;
            else if (t === "ascending") return e - i;
            else return i - e
        }

        function s(e, r) {
            var o = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            if (t === "natural") return 0;
            if (i && !o) {
                var l = e.match(n),
                    c = r.match(n);
                if (l && c) {
                    return a(+l[0], +c[0]) || s(e, r, true)
                }
            }
            if (t === "ascending") return e.localeCompare(r);
            return r.localeCompare(e)
        }

        function o(i, r) {
            var n = function t(e) {
                return function(t) {
                    if (e instanceof Date && t instanceof Date) return e - t === 0;
                    else return t === e
                }
            };
            var a = e.indexOf(e.filter(n(i))[0]);
            var s = e.indexOf(e.filter(n(r))[0]);
            if (t === "descending") return s - a;
            else return a - s
        }
        return function(t, i) {
            var n = void 0;
            if (!e || e.length === 0) {
                n = typeof t === "string" && typeof i === "string" ? s : a
            } else {
                n = o
            }
            return n(r(t), r(i))
        }
    }

    function T(e) {
        var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "x";
        var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "y";
        var n = e.length;
        var a = 1 / n;
        var s = t.sum(e, function(t) {
            return t[i]
        }) * a;
        var o = t.sum(e, function(t) {
            return t[r]
        }) * a;
        var l = t.sum(e.map(function(t) {
            return Math.pow(t[i] - s, 2)
        }));
        var c = t.sum(e.map(function(t) {
            return Math.pow(t[r] - o, 2)
        }));
        var u = t.sum(e.map(function(t) {
            return (t[i] - s) * (t[r] - o)
        }));
        var f = u / l;
        var h = o - s * f;
        var d = Math.pow(u, 2) / (l * c);
        return {
            slope: f,
            intercept: h,
            rSquare: d
        }
    }

    function D(t, e) {
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        if (!Array.isArray(e)) e = [e];
        t.forEach(function(t, i, r) {
            e.forEach(function(e) {
                var n = e.valueName();
                if (i === 0) t.data.value[n + "-start"] = 0;
                else t.data.value[n + "-start"] = r[i - 1].data.value[n + "-end"];
                t.data.value[n + "-end"] = t.data.value[n + "-start"] + t.data.value[n]
            })
        });
        if (i) {
            var r = {};
            var n = t[t.length - 1].data.value;
            e.forEach(function(t) {
                var e = t.valueName();
                r[e] = n[e + "-end"]
            });
            t.forEach(function(t) {
                e.forEach(function(e) {
                    var i = e.valueName();
                    var n = r[i];
                    if (n !== 0) {
                        t.data.value[i + "-start"] = t.data.value[i + "-start"] / n;
                        t.data.value[i + "-end"] = t.data.value[i + "-end"] / n
                    } else {
                        throw new N
                    }
                })
            })
        }
    }

    function P(e) {
        var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "linear";
        var r = arguments[2];
        var n = i === "time" || false;
        if (!n) {
            n = true;
            for (var a = 0; a < e.length; a++) {
                var s = e[a];
                if (!(s instanceof Date)) {
                    n = false;
                    break
                }
            }
        }
        var o = void 0;
        if (n) {
            o = t.scaleTime();
            i = "time"
        } else {
            if (i === "pow") o = t.scalePow();
            else if (i === "log") o = t.scaleLog();
            else {
                o = t.scaleLinear();
                i = "linear"
            }
        }
        o._scaleType = i;
        o._field = r;
        return o
    }

    function M(t, e) {
        if (t.interval) {
            var i = b[t.interval];
            e.key(function(e) {
                return i(e[t.field])
            })
        } else if (t.format) {
            var r = t.format;
            e.key(function(e) {
                return r(e[t.field])
            })
        } else {
            e.key(function(e) {
                return e[t.field]
            })
        }
        if (t.order === "ascending" || t.order === "descending") {
            e.sortKeys(O(t.order, t.orderList))
        }
        return e
    }

    function L(e, i, r) {
        var n = this.dimensions();
        var a = e;
        var s = function s(o) {
            var l = i ? n[n.length - 1 - o] : n[o];
            if (l.interval) {
                a.forEach(function(t) {
                    t.key = new Date(t.key)
                });
                a.sort(S(l.order, "key"));
                if (r && l.format) {
                    a.forEach(function(t) {
                        t.key = l.format(t.key)
                    })
                }
            }
            if (o < n.length - 1) a = t.merge(e.map(function(t) {
                return t.values
            }))
        };
        for (var o = 0; o < n.length; o++) {
            s(o)
        }
        return e
    }

    function C() {
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var n = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
        var a = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
        var s = arguments[5];
        var o = arguments[6];
        var l = this.data();
        s = s || this.dimensions();
        o = o || this.measures();
        var c = t.nest();
        for (var u = 0; u < s.length; u++) {
            var f = e ? s[s.length - 1 - u] : s[u];
            M(f, c)
        }
        if (!i) {
            var h = L.call(this, c.entries(l), e, r);
            return n ? t.hierarchy({
                values: h
            }, function(t) {
                return t.values
            }).children : h
        }
        c.rollup(function(t) {
            var e = {};
            o.forEach(function(i) {
                e[i.field + "-" + i.op] = F[i.op](t, function(t) {
                    return t[i.field]
                })
            });
            return e
        });
        var d = c.entries(l);
        L.call(this, d, e, r);
        if (n) {
            var v = t.hierarchy({
                values: d
            }, function(t) {
                return t.values
            });
            if (a && o.length === 1) {
                var _ = o[0];
                v.sum(function(t) {
                    return t.value ? t.value[_.field + "-" + _.op] : 0
                })
            }
            return v.children
        } else {
            return d
        }
    }
    var R = {
        customDomain: null,
        level: 0,
        munged: null,
        target: null,
        format: null,
        formatSub: null,
        field: null
    };
    var E = function() {
        function t(e) {
            i(this, t);
            v(this, R);
            this.__execs__ = {};
            this.setInit(e, ["field", "format", "formatSub", "customDomain"])
        }
        r(t, [{
            key: "setInit",
            value: function t(e) {
                var i = this;
                var r = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
                if (e) {
                    r.forEach(function(t) {
                        if (e[t]) i[t](e[t])
                    })
                }
                return this
            }
        }, {
            key: "axis",
            value: function t(i) {
                if (!arguments) return this.__execs__.axis;
                if (i && (typeof i === "undefined" ? "undefined" : e(i)) === "object") {
                    if (i !== this.__execs__.axis) this.__execs__.axis = i;
                    i.field = this.mixed ? this.concatFields() : this.field();
                    i.tickFormat = this.format();
                    i.tickFormatSub = this.formatSub()
                }
                return this
            }
        }, {
            key: "toObject",
            value: function t() {
                return {
                    field: this.field(),
                    format: this.format(),
                    formatSub: this.formatSub(),
                    customDomain: this.customDomain()
                }
            }
        }]);
        return t
    }();
    _(E, R);
    var B = " ";
    var j = {
        field: "__--jelly_count_measure--__",
        op: "count"
    };
    var I = {
        field: "__--jelly_mixed_measure--__",
        op: "mean"
    };
    var V = {
        aggregated: false,
        op: "mean",
        mixed: false,
        measures: []
    };
    var H = function(e) {
        a(o, e);

        function o(t) {
            i(this, o);
            var e = s(this, (o.__proto__ || Object.getPrototypeOf(o)).call(this, t));
            v(e, V);
            e.setInit(t, ["op"]);
            return e
        }
        r(o, [{
            key: "domain",
            value: function e() {
                var i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                var r = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
                var a = this.level();
                var s = this.munged();
                var o = 0;
                var e = [];
                var l = this.valueName();

                function c(t, i) {
                    t.forEach(function(t) {
                        if (i < a) {
                            c(t.children, i + 1)
                        } else {
                            if (r) {
                                e.push(t.data.value[l + "-start"]);
                                e.push(t.data.value[l + "-end"])
                            } else {
                                e.push(t.data.value[l])
                            }
                        }
                    })
                }
                c(s, o);
                e = t.extent(e);
                if (e[0] === e[1] && !n) {
                    var u = e[0] * .2;
                    e[0] -= u;
                    e[1] += u
                }
                if (i <= 0) return e;
                var f = Math.abs(e[0] - e[1]);
                f *= i * .5;
                return [e[0] - f, e[1] + f]
            }
        }, {
            key: "concatFields",
            value: function t() {
                if (this.mixed()) {
                    if (this.measures().length > 0) return this.measures().map(function(t) {
                        return t.field
                    }).join("-");
                    else return ""
                } else if (this.field() === I.field) return "";
                else return this.field()
            }
        }, {
            key: "valueName",
            value: function t() {
                var e = this.field();
                return e + (this.mixed() || e === I.field && this.aggregated() ? "" : "-" + this.op())
            }
        }, {
            key: "toObject",
            value: function t() {
                var e = n(o.prototype.__proto__ || Object.getPrototypeOf(o.prototype), "toObject", this).call(this);
                e.op = this.op();
                return e
            }
        }]);
        return o
    }(E);

    function G(t) {
        return new H(t)
    }
    _(H, V);

    function X() {
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        var n = this.data();
        var a = this.dimensions();
        var s = this.measures();
        var o = void 0;
        if (a.length === 0) {
            o = s.map(function(t) {
                var e = F[t.op](n, function(e) {
                    return e[t.field]
                });
                var i = {};
                i.key = t.field;
                i.value = {};
                i.value[I.field] = e;
                return i
            })
        } else {
            o = this.aggregate(n, true, false, false);
            if (e) {
                o = s.map(function(t) {
                    var e = {};
                    e.key = t.field;
                    e.values = o.map(function(e) {
                        var i = {};
                        i.key = e.key;
                        i.value = {};
                        i.value[I.field] = e.value[t.field + "-" + t.op];
                        return i
                    });
                    return e
                })
            } else {
                o.forEach(function(t) {
                    t.values = s.map(function(e) {
                        var i = {};
                        i.key = e.field;
                        i.value = {};
                        i.value[I.field] = t.value[e.field + "-" + e.op];
                        return i
                    });
                    delete t.value
                })
            }
        }
        if (i) {
            var l = t.hierarchy({
                values: o
            }, function(t) {
                return t.values
            });
            if (r) {
                l.sum(function(t) {
                    return t.value ? t.value[I.field] : 0
                })
            }
            return l.children
        } else {
            return o
        }
    }
    var W = 20;

    function Y(t) {
        if (!arguments.length) return this.__attrs__.autoResize;
        if (t) {
            if (!this.__execs__.autoResize) {
                var e = this;
                var i = true;
                var r = void 0;
                this.__execs__.autoResize = function() {
                    if (i && e.__execs__.canvas) {
                        var t = e.__execs__.container.node().getBoundingClientRect();
                        if (!r || r !== t.width) {
                            var n = e.transition();
                            e.width(t.width).transition({
                                duration: 0,
                                delay: 0
                            }).render(true, e.autoResizeSkip()).transition(n);
                            r = t.width
                        }
                        i = false;
                        setTimeout(function() {
                            i = true
                        }, W)
                    }
                }
            }
            window.addEventListener("resize", this.__execs__.autoResize)
        } else {
            if (this.__execs__autoResize) {
                window.removeEventListener("resize", this.__execs__.autoResize);
                this.__execs__.autoResize = null
            }
        }
        this.__attrs__.autoResize = t;
        return this
    }

    function Z(t) {
        if (!arguments.length) return this.__attrs__.color;
        if (Array.isArray(t)) {
            this.__attrs__.color = t
        } else if (typeof t === "string") {
            this.__attrs__.color = [t]
        }
        return this
    }

    function K(t) {
        if (!arguments.length) return this.__attrs__.colorDomain;
        t = t.map(function(t) {
            if (typeof t === "string" || typeof t === "number") return {
                key: t
            };
            return t
        });
        this.__attrs__.colorDomain = t;
        return this
    }

    function J(t) {
        if (!arguments.length) return this.__execs__.condition;
        this.__execs__.condition = t.call(this, this.__attrs__.dimensions, this.__attrs__.measures);
        return this
    }
    var q = 140;

    function U(t, e) {
        e = e || this.muteIntensity();
        t.transition().duration(q).attr("opacity", e);
        return this
    }

    function Q(t) {
        t.transition().duration(q).attr("opacity", 1);
        return this
    }

    function $(t) {
        if (this.__execs__.legend) this.__execs__.legend.demute(t);
        return this
    }

    function tt(t) {
        var i = void 0;
        if (typeof t === "function") {
            i = t
        } else if (typeof t === "string") {
            i = function e(i) {
                return i.data.key !== t
            }
        } else if ((typeof t === "undefined" ? "undefined" : e(t)) === "object" && t.data) {
            i = function e(i) {
                return i.data.key !== t.data.key
            }
        } else if ((typeof t === "undefined" ? "undefined" : e(t)) === "object") {
            i = function e(i) {
                return i.data.key instanceof Date ? i.data.key - t !== 0 : false
            };
            if (t instanceof Date) return i = function e(i) {
                return i.data.key instanceof Date ? i.data.key - t !== 0 : false
            };
            else i = function e(i) {
                return i.data.key !== t
            }
        }
        return i
    }

    function et(t) {
        var e = void 0;
        if (!arguments.length) {
            e = this.filterNodes().classed("mute", false).call(this.demute)
        } else {
            e = this.filterNodes(tt(t));
            if (e.size() > 0) {
                e.classed("mute", false).call(this.demute)
            }
        }
        return this
    }

    function it(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        t.selectAll(e ? this.seriesName() : this.nodeName()).classed("mute", false).call(this.demute)
    }

    function rt(t) {
        var e = void 0;
        if (!arguments.length) {
            e = this.filterRegions();
            it.call(this, e);
            if (this.seriesName) it.call(this, e, true)
        } else {
            e = this.filterRegions(tt(t), true);
            it.call(this, e);
            if (this.seriesName) it.call(this, e, true)
        }
        return this
    }
    var nt = 100;

    function at(e) {
        if (e && typeof e === "string") {
            try {
                return t.timeFormat(e)
            } catch (i) {
                try {
                    return t.format(e)
                } catch (t) {
                    throw t
                }
            }
        } else if (typeof e === "function") {
            return e
        } else {
            return null
        }
    }

    function st(t) {
        if (typeof t === "string") {
            return {
                field: t,
                order: "natural",
                max: nt
            }
        } else if ((typeof t === "undefined" ? "undefined" : e(t)) === "object") {
            t = Object.assign({}, t);
            if (!t.max) t.max = nt;
            if (!t.order) t.order = "natural";
            t.format = at(t.format);
            t.formatSub = at(t.formatSub);
            return t
        }
    }

    function ot(t) {
        this.__attrs__.dimensions.push(st(t));
        return this
    }

    function lt(t) {
        if (!arguments.length) return this.__attrs__.dimensions;
        if (!Array.isArray(t)) {
            t = [t]
        }
        this.__attrs__.dimensions = t.map(function(t) {
            return st(t)
        });
        return this
    }

    function ct(t) {
        var e = this.__execs__.scale;
        if (t in e && e.hasOwnProperty(t)) {
            return e[t].domain()
        } else {
            return null
        }
    }

    function ut(t) {
        var e = this.nodes();
        if (!t || typeof t !== "function") return e;
        return e.filter(t)
    }

    function ft(e) {
        var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var r = this.regions();
        if (!e || typeof e !== "function") return r;
        if (i) {
            r = r.filter(function() {
                return !t.select(this).classed("facet")
            })
        }
        return r.filter(e)
    }

    function ht() {
        if (this.multiTooltip && this.multiTooltip()) return this;
        this.__execs__.tooltip.hide();
        return this
    }

    function dt() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var e = this.offset();
        var i = this.width() - e.left - e.right;
        var r = this.height() - e.top - e.bottom;
        if (t) return [i, r];
        else return {
            width: i,
            height: r
        }
    }
    var vt = 54;
    var _t = 162;

    function pt(t) {
        if (!arguments.length) return this.__attrs__.legend;
        if (t === true) this.__attrs__.legend = {
            orient: "bottom",
            align: "start",
            thickness: vt
        };
        else if (t === false) this.__attrs__.legend = null;
        else if ((typeof t === "undefined" ? "undefined" : e(t)) === "object") {
            if (!t.orient) t.orient = "bottom";
            if (!t.thickness) t.thickness = t.orient === "bottom" || t.orient === "top" ? vt : _t;
            if (!t.align) t.align = "start";
            this.__attrs__.legend = t
        }
        return this
    }

    function mt(t) {
        var e = function t(e, i, r, n) {
            e = e.slice(0, i);
            if (r < n) e.forEach(function(e) {
                return e.children = t(e.children, i, r + 1, n)
            });
            return e
        };
        if (!arguments.length) {
            var i = this.__attrs__.limitKeys;
            if (i) {
                var r = this.__execs__.munged;
                var n = this.dimensions().length;
                var a = e(this.aggregated() ? r.children : r, i, 1, n);
                if (this.aggregated()) {
                    r.children = a;
                    a = r
                }
                this.__execs__.munged = a
            }
        } else {
            this.__attrs__.limitRows = t
        }
        return this
    }

    function gt(t) {
        if (!arguments.length) {
            var e = this.__attrs__.limitRows;
            if (e) {
                var i = this.data();
                if (this.aggregated()) {
                    i.children = i.children.slice(0, e)
                } else {
                    i = i.slice(0, e)
                }
                this.data(i)
            }
        } else {
            this.__attrs__.limitRows = t
        }
    }

    function yt(t, e, i) {
        if (t[i] && typeof t[i] === "number") e[i] = t[i]
    }

    function xt() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var i = this.__attrs__.margin;
        if (!arguments.length) return this.__attrs__.margin;
        if ((typeof t === "undefined" ? "undefined" : e(t)) === "object") {
            ["top", "right", "left", "bottom"].forEach(function(e) {
                return yt(t, i, e)
            })
        }
        return this
    }

    function kt(i) {
        if (typeof i === "string") {
            this.__attrs__.measures.push({
                field: i,
                op: "sum"
            })
        } else if ((typeof i === "undefined" ? "undefined" : e(i)) === "object") {
            if ("format" in i && typeof i.format === "string") i.format = t.timeFormat(i.format);
            this.__attrs__.measures.push(i)
        }
        return this
    }

    function wt(t, e) {
        t = t || this.measures()[0];
        var i = t.field;
        if (!this.aggregated() || t.field !== I.field) i += "-" + t.op;
        return i + (e !== undefined ? "-" + e : "")
    }

    function bt(i) {
        if (!arguments.length) return this.__attrs__.measures;
        var r = function i(r) {
            if (typeof r === "string") {
                return {
                    field: r,
                    op: "sum"
                }
            } else if ((typeof r === "undefined" ? "undefined" : e(r)) === "object") {
                if ("format" in r && typeof r.format === "string") r.format = t.timeFormat(r.format);
                return r
            }
        };
        if (Array.isArray(i)) {
            this.__attrs__.measures = i.map(function(t) {
                return r(t)
            })
        } else {
            this.__attrs__.measures = [r(i)]
        }
        return this
    }

    function zt() {
        var t = {
            order: "natural"
        };
        t.field = this.measures().map(function(t) {
            return t.field
        }).join("-");
        return t
    }

    function At(t) {
        if (this.__execs__.legend) this.__execs__.legend.mute(t);
        return this
    }

    function Nt(t) {
        var e = void 0;
        if (!arguments.length) {
            e = this.filterNodes().classed("mute", true).call(this.mute, this.muteIntensity())
        } else if (t === null) {
            e = this.filterNodes().classed("mute", false).call(this.demute)
        } else {
            e = this.filterNodes(tt(t));
            if (e.size() > 0) {
                e.classed("mute", true).call(this.mute, this.muteIntensity())
            }
        }
        return this
    }

    function Ft(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        t.selectAll(i ? this.seriesName() : this.nodeName()).classed("mute", e).call(e ? this.mute : this.demute, this.muteIntensity())
    }

    function St(t) {
        var e = void 0;
        if (!arguments.length) {
            e = this.filterRegions();
            Ft.call(this, e, true);
            if (this.seriesName) Ft.call(this, e, true, true)
        } else if (t === null) {
            e = this.filterRegions();
            Ft.call(this, e, false);
            if (this.seriesName) Ft.call(this, e, false, true)
        } else {
            e = this.filterRegions(tt(t), true);
            if (e.size() > 0) {
                Ft.call(this, e, true);
                if (this.seriesName) Ft.call(this, e, true, true)
            }
        }
        return this
    }

    function Ot(t) {
        var e = void 0;
        if (!arguments.length || t === false) return this.__attrs__.nodeName;
        else if (typeof t === "boolean" && t) {
            return e ? e : e = this.__attrs__.nodeName.split(".").join(" ").trim()
        } else if (typeof t === "string") {
            this.__attrs__.nodeName = t;
            e = this.__attrs__.nodeName.split(".").join(" ").trim()
        }
        return this
    }

    function Tt() {
        return this.regions().selectAll(this.nodeName())
    }
    var Dt = {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
    };

    function Pt() {
        if (this.zeroOffset()) return Dt;
        var t = Object.assign({}, this.zeroMargin() ? Dt : this.margin());
        var e = this.legend();
        if (e) t[e.orient] += e.thickness;
        return t
    }

    function Mt(t) {
        if (!arguments.length) return this.__attrs__.parent;
        this.__attrs__.parent = t;
        return this
    }

    function Lt(t, e, i) {
        return {
            type: t,
            call: e,
            allow: i.allow,
            isPre: i.isPre
        }
    }

    function Ct(t, e) {
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        if (!this.__process__) this.__process__ = [];
        if (!arguments.length) return this.__process__;
        var r = this.__process__;
        if (e && typeof e === "function") {
            var n = r.indexOf(r.filter(function(e) {
                return e.type === t
            })[0]);
            if (n >= 0) {
                r[n] = Lt(t, e, i)
            } else {
                r.splice(r.length, 0, Lt(t, e, i))
            }
            return this
        } else {
            return r.find(function(e) {
                return e.type === t
            })
        }
    }

    function Rt(t) {
        return f(this, t)
    }

    function Et() {
        return this.__execs__.canvas.selectAll(this.regionName())
    }

    function Bt() {
        this.reset();
        if (this.__execs__.canvas) {
            this.__execs__.canvas.node().parentNode.parentNode.remove();
            this.__execs__.canvas = null
        }
        return this
    }

    function jt(t, e) {
        t.on("click.default", function() {
            e.apply("selectClick", this, arguments)
        }).on("mouseenter.default", function() {
            e.apply("selectEnter", this, arguments)
        }).on("mouseleave.default", function() {
            e.apply("selectLeave", this, arguments)
        });
        return t
    }

    function It(t) {
        var e = this;
        t.forEach(function(t) {
            if (t.allow) {
                if (t.allow.call(e)) t.call.call(e)
            } else {
                t.call.call(e)
            }
        })
    }

    function Vt() {
        var t = this;
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        var r = {
            pre: [],
            post: []
        };
        this.process().forEach(function(t) {
            if (i.indexOf(t.type) < 0) {
                if (t.isPre) r.pre.push(t);
                else r.post.push(t)
            }
        });
        this.reset(e);
        this.keep(e);
        if (this.needCanvas()) this.renderFrame();
        It.call(this, r.pre);
        if (this.needCanvas()) this.renderCanvas();
        It.call(this, r.post);
        if (!this.__execs__.canvas) return;
        var n = this.__execs__.selectDispatch;
        var a = this.nodes();
        var s = this.__execs__.legend;
        if (a && a.size() > 0) {
            if (this.parent()) {
                return
            }
            a.call(jt, n).on("mouseenter.default.legend", function(e) {
                if (s && s.mute && t.muteToLegend) t.muteToLegend(e)
            }).on("mouseleave.default.legend", function(e) {
                if (s && s.demute && t.demuteToLegend) t.demuteToLegend(e)
            })
        }
        if (this.isFacet && this.isFacet()) {
            a.call(jt, n)
        }
        if (this.stream && this.stream() && e) {
            this.stream(null)
        }
        return this
    }
    var Ht = "none";

    function Gt(e, i) {
        var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var n = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        var a = function t(e) {
            e.attr("x", -r).attr("y", -r).attr("width", i.width + r * 2).attr("height", i.height + r * 2)
        };
        var s = e.selectAll(function() {
            return this.childNodes
        }).filter(function() {
            return t.select(this).classed(u("canvas-g-defs"))
        });
        if (s.empty()) {
            s = e.append("defs").attr("class", u("canvas-g-defs")).datum(i);
            s.append("clipPath").attr("id", function() {
                return g("canvas-g-")
            }).attr("class", u("canvas-g-clip-path")).append("rect").attr("class", u("canvas-g-clip-path-rect")).call(a)
        }
        var o = s.select(u("canvas-g-clip-path-rect", true));
        if (n) o = o.transition().duration(n.duration).delay(n.delay);
        o.call(a)
    }

    function Xt(e, i, r) {
        var n = r.__execs__.mark;
        e = t.select(e);
        if (e.empty()) throw new z;
        if (e.node().tagName === "g" || e.node().tagName === "G") {
            if (e.select(u("canvas-g", true)).empty()) {
                r.__execs__.canvas = e.append("g").attr("class", u("canvas-g"));
                r.__execs__.canvas.append("g").attr("class", u("regions"))
            } else if (!this.__execs__.canvas) {
                r.__execs__.canvas = e.select(u("canvas-g", true))
            }
            n.set(r.__execs__.canvas.node(), {
                x: i.left,
                y: i.right
            });
            r.__execs__.canvas.attr("transform", "translate(" + [i.left, i.right] + ")")
        }
    }

    function Wt() {
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var i = this.container();
        if (i === null) return null;
        var r = this.offset();
        var n = this.innerSize();
        if (typeof i !== "string") {
            Xt(i, r, this);
            if (this.__execs__.canvas) {
                this.__execs__.canvas.datum(this.__execs__.munged);
                this.__execs__.canvas.call(Gt, n, e, this.transition());
                return
            }
        }
        var a = void 0;
        if (this.__execs__.canvas) {
            a = t.select(this.__execs__.canvas.node().parentNode)
        } else {
            var s = t.select(i);
            if (s.empty()) {
                throw new z
            }
            a = s.select(u("frame", true)).select("svg");
            this.__execs__.canvas = a.append("g").attr("class", u("canvas-g")).attr("transform", "translate(" + [r.left, r.top] + ")");
            this.__execs__.canvas.append("rect").attr("class", u("background")).style("fill", Ht);
            this.__execs__.canvas.append("g").attr("class", u("regions"))
        }
        var o = this.transition();
        var l = this.__execs__.canvas;
        l.style("pointer-events", "none");
        if (o) {
            l.transition().duration(o.duration).delay(o.delay).attr("transform", "translate(" + [r.left, r.top] + ")").on("end", function() {
                t.select(this).style("pointer-events", "all")
            })
        } else {
            l.attr("transform", "translate(" + [r.left, r.top] + ")").style("pointer-events", "all")
        }
        l.select(u("background", true)).attr("width", n.width).attr("height", n.height);
        l.datum(this.__execs__.munged).call(Gt, n, e, this.transition());
        return this
    }

    function Yt(t, e) {
        t.attr("width", e.width()).attr("height", e.height()).attr("viewBox", "0 0 " + e.width() + " " + e.height());
        return t
    }

    function Zt(t, e) {
        e.__execs__.hidden = t.append("g").attr("class", u("hidden-g")).style("visibility", "hidden");
        return t
    }

    function Kt() {
        var e = this.container();
        var i = t.select(e);
        if (i.empty()) throw new z;
        this.__execs__.container = i;
        if (typeof e !== "string") {
            if (i.node().tagName === "g" || i.node().tagName === "G") {
                if (i.selectAll(u("hidden-g", true)).empty()) {
                    i.call(Zt, this)
                } else if (!this.__execs__.hidden) {
                    this.__execs__.hidden = i.select(u("hidden-g", true))
                }
                return
            }
        }
        var r = void 0;
        if (!this.__execs__.canvas) {
            r = i.append("div").attr("class", u("frame"));
            if (this.name()) r.attr("id", "jelly-chart-id-" + this.name());
            r = r.append("svg");
            r.call(Zt, this);
            r.call(Yt, this)
        } else {
            r = t.select(this.__execs__.canvas.node().parentNode)
        }
        if (this.autoResize()) {
            this.width(this.__execs__.container.node().getBoundingClientRect().width)
        }
        i.select(u("frame", true)).style("width", this.width() + "px").style("height", this.height() + "px");
        r.call(Yt, this);
        return this
    }
    var Jt = {
        "font-family": "sans-serif",
        "font-size": 11,
        "font-weight": "normal",
        "font-style": "normal"
    };
    var qt = u("legend-area-clip-path");
    var Ut = u("legend-label-clip-path");
    var Qt = ["start", "middle", "bottom"];
    var $t = ["top", "bottom"];
    var te = 180;
    var ee = {
        align: Qt[0],
        color: "#485465",
        muteIntensity: .3,
        font: Jt,
        format: null,
        height: 0,
        orient: $t[1],
        scale: null,
        showTooltip: true,
        title: null,
        transition: null,
        width: 0,
        x: 0,
        y: 0
    };
    var ie = function e() {
        i(this, e);
        this.__attrs__ = JSON.parse(JSON.stringify(ee));
        this.__execs__ = {
            legend: null
        };
        this.__execs__.dispatch = t.dispatch("selectClick", "selectEnter", "selectLeave");
        f(this, this.__execs__.dispatch)
    };

    function re() {
        return new ie
    }

    function ne() {
        return this.orient() === "bottom" || this.orient() === "top"
    }

    function ae(t) {
        var e = this.font();
        for (var i in e) {
            t.style(i, i === "font-size" ? e[i] + "px" : e[i])
        }
    }

    function se(t) {
        var e = t.select(u("label-area", true));
        var i = this.width();
        var r = this.align();
        var n = e.node().getBBox().width;
        var a = 0;
        if (r === Qt[1]) {
            a = Math.round((i - n) / 2)
        } else if (r === Qt[2]) {
            a = i - n
        }
        e.attr("transform", "translate(" + a + ",0)");
        return t
    }

    function oe(e, i, r) {
        var n = i.isHorizontal();
        var a = i.width();
        var s = i.height();
        var o = i.labelHeight();
        var l = i.labelPadding();
        var c = o + l;
        var f = t.schemeCategory10[0],
            h = "#A3A3A3";
        var d = e.select(u("label-area", true));
        var v = 0;
        var _ = e.selectAll(u("arrow", true)).data(["up", "down"]);
        var p = _.enter().append("g").attr("class", function(t) {
            return u("arrow " + t)
        }).style("cursor", "pointer");
        p.append("rect").attr("width", c).attr("height", c).attr("fill", "#fff").attr("stroke", h).attr("stroke-width", "1px").attr("shape-rendering", "crispEdges");
        p.append("path").attr("d", t.symbol().type(t.symbolTriangle).size(o * 2.5)).attr("transform", function(t, e) {
            var i = "translate(" + [(c - 1) * .5, (c - 1) * .5] + ")";
            return i + (e === 1 ? "rotate(180)" : "")
        }).style("display", "block").attr("fill", function(t) {
            return t === "up" ? h : f
        });
        _ = p.merge(_).attr("transform", function(t, e) {
            if (n) return "translate(" + [a + l, e * (o + l)] + ")";
            else return "translate(" + [0, s + l * 1.25 + e * (o + l)] + ")"
        });
        _.on("click", function(t) {
            if (t === "up" && v > 0) {
                v -= 1
            } else if (t === "down" && v < r) {
                v += 1
            } else {
                return
            }
            _.select("path").style("fill", f).style("cursor", "pointer");
            if (v === 0) {
                _.select("path").filter(function(t) {
                    return t === "up"
                }).style("fill", h).style("cursor", "default")
            } else if (v === r) {
                _.select("path").filter(function(t) {
                    return t === "down"
                }).style("fill", h).style("cursor", "default")
            }
            d.attr("transform", "translate(" + [0, -v * (o + l)] + ")")
        })
    }

    function le(t, e) {
        var i = e.width();
        var r = e.isHorizontal() ? i / 2 : i;
        var n = t.selectAll("defs").data([
            [{
                name: qt,
                width: i
            }, {
                name: Ut,
                width: r
            }]
        ]);
        n = n.enter().append("defs").merge(n);
        var a = n.selectAll("clipPath").data(function(t) {
            return t
        }, function(t) {
            return t.name
        });
        a.exit().remove();
        a = a.enter().append("clipPath").attr("class", function(t) {
            return t.name
        }).attr("id", function(t) {
            return g(t.name + "-")
        }).merge(a);
        var s = a.selectAll("rect").data(function(t) {
            return [t]
        });
        s.exit().remove();
        s = s.enter().append("rect").merge(s).attr("width", function(t) {
            return t.width
        }).attr("height", e.height());
        t.select(u("label-area-parent", true)).attr("clip-path", "url(#" + a.filter(function(t, e) {
            return e === 0
        }).attr("id") + ")");
        t.selectAll(u("label", true)).attr("clip-path", "url(#" + a.filter(function(t, e) {
            return e === 1
        }).attr("id") + ")");
        return t
    }

    function ce(e) {
        var i = this.isHorizontal();
        var r = this.width();
        var n = i ? r / 2 : r;
        var a = this.labelHeight();
        var s = this.labelPadding();
        var o = 0,
            l = 0,
            c = 0;
        e.call(le, this);
        e.selectAll(u("label", true)).each(function(e, u) {
            var f = t.select(this);
            var h = void 0,
                d = void 0;
            var v = Math.min(this.getBBox().width, n);
            if (u === 0 || i && l + v + s * 2 <= r) {
                h = l;
                d = c
            } else {
                o += 1;
                h = l = 0;
                d = c = c + a + s
            }
            l += v + s * 2;
            f.attr("transform", "translate(" + [h, d] + ")")
        });
        if ((o + 1) * (a + s) > this.height()) {
            e.call(oe, this, o)
        } else {
            e.selectAll(u("arrow", true)).remove()
        }
    }

    function ue(t) {
        var e = this;
        this.__execs__.legend = t;
        var i = t.select(u("label-area", true));
        if (this.transition() && !i.empty()) {
            var r = this.transition();
            t.transition().duration(r.duration).delay(r.delay).attr("transform", "translate(" + [this.x(), this.y()] + ")")
        } else {
            t.attr("transform", "translate(" + [this.x(), this.y()] + ")")
        }
        if (i.empty()) {
            i = t.append("g").attr("class", u("label-area-parent")).append("g").attr("class", u("label-area"))
        }
        var n = this.labelHeight();
        var a = n / 2;
        var s = this.scale();
        var o = i.selectAll(u("label", true)).data(s.domain().filter(function(t) {
            return t !== undefined && t !== null
        }).map(function(t) {
            return {
                key: t,
                color: s(t)
            }
        }));
        o.exit().remove();
        var l = o.enter().append("g").attr("class", u("label")).style("cursor", "pointer");
        l.append("title");
        l.append("rect").style("fill", "none");
        l.append("circle");
        l.append("text").style("letter-spacing", "-0.1px");
        o = l.merge(o).style("fill", function(t) {
            return t.color
        });
        o.select("title").text(function(t) {
            return e.format() ? e.format()(t.key) : t.key
        });
        o.select("circle").attr("cx", a).attr("cy", a).attr("r", 5);
        o.select("text").attr("x", n).attr("dx", ".35em").attr("dy", ".9em").style("fill", this.color()).text(function(t) {
            return e.format() ? e.format()(t.key) : t.key
        });
        o.select("rect").attr("width", function() {
            return this.parentNode.getBBox().width
        }).attr("height", function() {
            return this.parentNode.getBBox().height
        });
        var c = this.__execs__.dispatch;
        o.on("click", function(t) {
            c.call("selectClick", this, t)
        }).on("mouseenter", function(t) {
            c.call("selectEnter", this, t)
        }).on("mouseleave", function(t) {
            c.call("selectLeave", this, t)
        })
    }

    function fe(t, e) {
        if (typeof e === "function") {
            return t.filter(e)
        } else if (typeof e === "string") {
            return t.filter(function(t) {
                return t.key !== e
            })
        } else if (e instanceof Date) {
            var i = e.getTime();
            return t.filter(function(t) {
                return t.key.getTime() !== i
            })
        } else if (e.tagName && e.tagName === "g") {
            return t.filter(function() {
                return this !== e
            })
        }
        return t.filter(function() {
            return true
        })
    }

    function he(t) {
        fe(this.__execs__.legend.selectAll(u("label", true)), t).transition().duration(te).attr("opacity", 1)
    }

    function de(t) {
        var e = fe(this.__execs__.legend.selectAll(u("label", true)), t);
        if (e) {
            e.transition().duration(te).attr("opacity", this.muteIntensity())
        }
        return this
    }

    function ve() {
        return this.font()["font-size"]
    }

    function _e() {
        return this.isHorizontal() ? this.labelHeight() / 2 : this.labelHeight()
    }

    function pe() {}

    function me(t) {
        ae.call(this, t);
        ue.call(this, t);
        ce.call(this, t);
        se.call(this, t)
    }
    ie.prototype.demute = he;
    ie.prototype.mute = de;
    ie.prototype.labelHeight = ve;
    ie.prototype.labelPadding = _e;
    ie.prototype.render = me;
    ie.prototype.update = pe;
    ie.prototype.isHorizontal = ne;
    _(ie, ee);

    function ge() {
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "region";
        var i = this;
        var r = this.legend();
        var n = this.__execs__.canvas;
        if (!r) {
            n.selectAll(u("legend", true)).remove();
            return
        }
        var a = this.__execs__.field;
        if (!r.format && a[e].isInterval()) r.format = a[e].format();
        var s = void 0,
            o = void 0,
            l = void 0,
            c = void 0;
        var f = this.offset();
        var h = this.innerSize();
        var d = this.margin();
        var v = r.font ? r.font["font-size"] : 20;
        if (r.orient === "bottom" || r.orient === "top") {
            s = 0;
            if (r.orient === "bottom") o = h.height + f.bottom - d.bottom - r.thickness + v;
            else o = -f.top + d.top - v;
            if (this.axisX && !this.axisX()) {
                o += v * (r.orient === "bottom" ? 1 : -1)
            }
            l = h.width;
            c = r.thickness - v
        } else {
            if (r.orient === "right") s = h.width + f.right - r.thickness;
            else s = -f.left + d.left - v;
            o = v / 2;
            l = r.thickness - v;
            c = h.height - v / 2
        }
        var _ = this.scale().color;
        var p = re().scale(_).x(s).y(o).align(r.align).width(l).height(c).orient(r.orient).format(r.format).transition(this.transition());
        this.__execs__.legend = p;
        p.on("selectEnter", function(t) {
            if (i.muteFromLegend) {
                i.muteFromLegend(t)
            }
            p.mute(this);
            i.__execs__.selectDispatch.call("legendEnter", this, t)
        }).on("selectLeave", function(t) {
            if (i.demuteFromLegend) {
                i.demuteFromLegend(t)
            }
            p.demute(this);
            i.__execs__.selectDispatch.call("legendLeave", this, t)
        });
        var m = n.selectAll(u("legend", true)).data([p]);
        m.exit().remove();
        m.enter().append("g").attr("class", u("legend")).merge(m).each(function(e) {
            e.render(t.select(this))
        });
        return this
    }

    function ye(e) {
        var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function(t) {
            return t
        };
        var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var n = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";
        var a = this.__execs__.canvas.select(u("regions", true)).selectAll(this.regionName() + (r ? ".facet" : "") + n).data(i, function(t, e) {
            return t.data && t.data.key ? t.data.key : e
        });
        var s = this.regionName().split(".").join(" ").trim();
        var o = this.aggregated();
        var l = s + (r ? " facet" : "");
        var c = this.__execs__.canvas;
        var f = t.transition().duration(this.transition().duration).delay(this.transition().delay);
        var h = c.selectAll(u("canvas-g-clip-path", true)).attr("id");
        var d = function e(i) {
            i.each(function(e) {
                if (!o) t.select(this).attr("transform", "translate(" + [e.x, e.y] + ")");
                else t.select(this).attr("transform", "translate(0,0)");
                if (h && !r) t.select(this).attr("clip-path", "url(#" + h + ")")
            })
        };
        var v = function e(i) {
            i.each(function(e) {
                if (!o) t.select(this).transition(f).attr("transform", "translate(" + [e.x, e.y] + ")");
                else t.select(this).attr("transform", "translate(0,0)")
            })
        };
        a.exit().remove();
        var _ = a.enter().append("g").attr("class", l).each(e).call(d);
        a.each(e);
        a = _.merge(a);
        a.call(v);
        return a
    }
    var xe = {
        "font-family": "sans-serif",
        "font-size": 11,
        "font-weight": "normal",
        "font-style": "normal"
    };
    var ke = "legend-gradient-";
    var we = ["top", "bottom"];
    var be = {
        color: "#6e6e6e",
        field: null,
        height: 0,
        orient: we[0],
        gradientWidth: 150,
        gradientHeight: xe["font-size"],
        scale: null,
        showTooltip: true,
        title: null,
        width: 0,
        x: 0,
        y: 0,
        font: xe
    };
    var ze = function t() {
        i(this, t);
        this.__attrs__ = JSON.parse(JSON.stringify(be));
        this.__execs__ = {
            spectrum: null,
            scale: null
        }
    };

    function Ae() {
        return new ze
    }

    function Ne(t) {
        var e = this.font();
        for (var i in e) {
            t.style(i, i === "font-size" ? e[i] + "px" : e[i])
        }
    }

    function Fe(e, i, r, n) {
        var a = i;
        var s = i / a;
        var o = t.scaleLinear().domain([0, i]).range(n);
        var l = t.range(0, a).map(function(t) {
            return t * s + s
        });
        e.selectAll(u("gradient-chip", true)).data(l).enter().append("rect").attr("class", u("gradient-chip")).attr("width", s).attr("height", r).attr("x", function(t) {
            return t - s
        }).style("fill", function(t) {
            return o(t)
        })
    }

    function Se(e) {
        this.__execs__.spectrum = e.attr("transform", "translate(" + [this.x(), this.y()] + ")");
        var i = this.scale();
        var r = i.range();
        var n = this.gradientWidth();
        var a = this.gradientHeight();
        this.__execs__.scale = t.scaleLinear().domain(i.domain()).rangeRound([0, n]);
        var s = e.select(u("gradient-area", true));
        if (s.empty()) {
            var o = g(ke);
            var l = t.symbol().type(t.symbolTriangle).size(40);
            s = e.append("g").attr("class", u("gradient-area"));
            s.append("path").attr("class", u("arrow")).attr("fill", "#777").attr("d", l).style("visibility", "hidden");
            e.append("defs").append("linearGradient").attr("id", o)
        }
        s.attr("transform", "translate(" + [(this.width() - n) / 2, 18] + ")");
        var f = e.select("linearGradient");
        var d = f.selectAll("stop").data(r);
        d.enter().append("stop").merge(d).attr("offset", function(t, e) {
            return e * 100 + "%"
        }).attr("stop-color", function(t) {
            return t
        });
        if (h()) {
            s.call(Fe, n, a, r)
        } else {
            var v = s.selectAll(u("gradient-rect", true)).data([i]);
            v.enter().append("rect").attr("class", u("gradient-rect")).merge(v).attr("width", this.gradientWidth()).attr("height", this.gradientHeight()).attr("fill", "url(#" + f.attr("id") + ")")
        }
        var _ = s.selectAll(u("label", true)).data(i.domain());
        _.enter().append("text").attr("class", u("label")).merge(_).attr("x", function(t, e) {
            return e * n
        }).attr("y", a).attr("dy", "1.25em").attr("text-anchor", "middle").style("fill", "#999").text(function(t) {
            return c(t)
        });
        var p = this.title() || this.field();
        p = p.localeCompare(j.field) === 0 ? B : p;
        var m = s.selectAll(u("title", true)).data([p]);
        m.exit().remove();
        m.enter().append("text").merge(m).attr("class", u("title")).attr("x", n + this.font()["font-size"]).attr("y", a * .5).attr("dy", ".35em").attr("text-anchor", "start").text(function(t) {
            return t
        })
    }

    function Oe() {
        this.__execs__.spectrum.select(u("arrow", true)).style("visibility", "hidden");
        return this
    }

    function Te() {
        return this.font()["font-size"]
    }

    function De() {
        return this.labelHeight() / 2
    }

    function Pe(t) {
        var e = this.__execs__.scale(t);
        this.__execs__.spectrum.select(u("arrow", true)).style("visibility", "visible").attr("transform", "translate(" + e + ",-5)rotate(180)");
        return this
    }

    function Me() {}

    function Le(t) {
        Ne.call(this, t);
        Se.call(this, t)
    }
    ze.prototype.hide = Oe;
    ze.prototype.labelHeight = Te;
    ze.prototype.labelPadding = De;
    ze.prototype.render = Le;
    ze.prototype.show = Pe;
    ze.prototype.update = Me;
    _(ze, be);

    function Ce() {
        var e = this.legend();
        if (!e) return;
        var i = this.__execs__.field;
        var r = void 0,
            n = void 0,
            a = void 0,
            s = void 0;
        var o = this.offset();
        if (e.orient === "bottom") {
            r = 0;
            n = this.innerSize().height + o.bottom - this.margin().bottom - e.thickness;
            a = this.innerSize().width;
            s = e.thickness
        }
        var l = this.scale().color;
        var c = Ae().scale(l).field(i.color.field()).x(r).y(n).width(a).height(s);
        this.__execs__.canvas.selectAll(this.nodeName() + ".point").on("mouseenter.spectrum", function(t) {
            c.show(t.value)
        }).on("mouseleave.spectrum", function() {
            return c.hide()
        });
        this.__execs__.legend = c;
        var f = this.__execs__.canvas;
        var h = f.selectAll(u("spectrum", true)).data([c]);
        h.exit().remove();
        h.enter().append("g").attr("class", u("spectrum")).merge(h).each(function(e) {
            e.render(t.select(this))
        });
        return this
    }
    var Re = 4;
    var Ee = "#001a32";
    var Be = "#fff";
    var je = "#7b92ae";
    var Ie = (typeof navigator === "undefined" ? "undefined" : e(navigator)) === "object" ? /MSIE 9/i.test(navigator.userAgent) : false;
    var Ve = {
        "font-family": "sans-serif",
        "font-size": 11,
        "font-weight": "normal",
        "font-style": "normal"
    };
    var He = {
        absolute: false,
        anchor: {
            x: "left",
            y: "top"
        },
        color: null,
        dx: 0,
        dy: 0,
        font: Ve,
        offsetFunc: null,
        keys: null,
        keyFunc: null,
        nodeName: u("mark node", true),
        target: null,
        valueFormat: null,
        valueFunc: null,
        values: [],
        x: 0,
        y: 0,
        fromMulti: false,
        showDiff: false
    };
    var Ge = function t() {
        i(this, t);
        this.__attrs__ = JSON.parse(JSON.stringify(He));
        this.__execs__ = {
            tooltip: null,
            mark: null,
            init: true
        };
        this.valueFormat(c)
    };

    function Xe() {
        return new Ge
    }

    function We(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        if (Ie) return t.style("filter", "alpha(opacity=" + e * 100 + ")");
        else return t.style("opacity", e)
    }

    function Ye() {
        var t = this;
        var e = this.target();
        var i = e.__execs__.canvas.selectAll(this.nodeName());
        i.on("mouseleave.tooltip", function() {
            if (t.fromMulti()) return;
            t.hide()
        }).on("mouseenter.tooltip", function(e) {
            Ue.call(t, this, e)
        })
    }

    function Ze() {
        var e = this.target();
        var i = e.__execs__.canvas.selectAll(this.nodeName());
        var r = (e.parent() ? e.parent() : e).__execs__.canvas.node();
        var n = t.local();
        var a = this.offsetFunc();
        var s = this.absolute();
        var o = 0;
        var l = 0;
        var c = e.offset();
        o += c.left;
        l += c.top;
        if (e.parent()) {
            c = e.parent().offset();
            o += c.left;
            l += c.top
        }
        var u = r.parentNode.getBoundingClientRect();
        var f = r.parentNode.parentNode.getBoundingClientRect();
        o += u.left - f.left;
        l += u.top - f.top;
        o += Re;
        var h = function t(e, i) {
            if (e.x) i.x += e.x;
            if (e.y) i.y += e.y
        };
        var d = function t(e) {
            var i = {
                x: o,
                y: l
            };
            if (a && typeof a === "function") {
                var r = a.apply(this, arguments);
                i.x += r.x;
                i.y += r.y
            }
            var n = e;
            if (s) {
                h(n, i)
            } else {
                while (n) {
                    h(n, i);
                    n = n.parent
                }
            }
            return i
        };
        i.each(function() {
            var t = d.apply(this, arguments);
            n.set(this, t)
        });
        this.__execs__.mark = n
    }

    function Ke(t) {
        var e = this.__execs__.tooltip;
        if (t.style("position") === "static") t.style("position", "relative");
        if (!e || e.empty()) {
            e = t.append("div").attr("class", u("tooltip")).style("color", Be).style("pointer-events", "none").style("background-color", Ee).style("padding", "9px").style("border-radius", "8px").style("position", "absolute").style("z-index", "999").call(We, 0);
            e.append("div").attr("class", u("keys")).style("padding-bottom", "1em").style("letter-spacing", "0.1px").call(We, .9);
            e.append("table").attr("class", u("values")).style("border-collapse", "collapse").call(We, .72);
            e.append("div").attr("class", u("arrow")).style("position", "absolute").style("top", "calc(" + Re + "px + 50%)").style("left", "0%").style("margin", -(Re * 2) + "px").style("border-width", Re + "px").style("border-style", "solid").style("border-color", "transparent " + Ee + " transparent transparent").text(" ")
        }
        for (var i in this.font()) {
            e.style(i, this.font()[i] + (i === "font-size" ? "px" : ""))
        }
        this.__execs__.tooltip = e;
        Ze.call(this);
        Ye.call(this)
    }

    function Je() {
        var t = this.__execs__.tooltip;
        t.transition().duration(180).call(We, 0)
    }

    function qe(e) {
        e = t.select(e);
        Ke.call(this, e)
    }

    function Ue(t, e) {
        if (this.fromMulti()) return;
        var i = this.color();
        var r = this.keyFunc();
        var n = this.valueFunc();
        var a = this.__execs__.mark.get(t);
        this.x(a.x).y(a.y).color(i ? i : e.color).key(r ? r.call(this, e, e.key) : null).value(n.call(this, e, e.text)).show();
        return this
    }

    function Qe() {
        var t = this.valueFormat();
        var e = this.__execs__.tooltip;
        if (this.keys()) {
            var i = e.select(u("keys", true)).selectAll(u("key", true)).data(this.keys());
            i.exit().remove();
            i = i.enter().append("div").attr("class", u("key")).merge(i);
            i.text(function(t) {
                return t.value
            })
        }
        var r = e.select(u("values", true)).selectAll(u("value", true)).data(this.values());
        r.exit().remove();
        r = r.enter().append("tr").attr("class", u("value")).merge(r);
        if (this.showDiff() && r.size() > 1) {
            r.style("color", function(t, e) {
                return e === 0 ? je : Be
            })
        } else {
            r.style("color", Be)
        }
        var n = r.selectAll("td").data(function(t) {
            return [t.name, t.value]
        });
        n.exit().remove();
        n = n.enter().append("td").style("padding", 0).style("margin", 0).style("padding-bottom", ".35em").style("padding-right", function(t, e) {
            return e === 0 ? "2em" : 0
        }).style("text-align", function(t, e) {
            return e === 0 ? "left" : "right"
        }).merge(n).text(function(e, i) {
            if (i === 0) {
                return e.localeCompare(j.field) === 0 ? B : e
            } else {
                return t(e)
            }
        });
        var a = e.node().getBoundingClientRect().height / 2;
        e.style("left", this.x() + this.dx() + "px").style("top", this.y() + this.dy() - a + "px").transition().duration(180).call(We, 1)
    }

    function $e(t) {
        if (!arguments.length || t === null) return this;
        if ("name" in t && "value" in t) this.__attrs__.keys = [t];
        return this
    }

    function ti(t) {
        if (!arguments.length) return this;
        if (Array.isArray(t)) {
            this.__attrs__.values = t
        } else if ("name" in t && "value" in t) {
            this.__attrs__.values = [t]
        }
        return this
    }
    Ge.prototype.hide = Je;
    Ge.prototype.render = qe;
    Ge.prototype.show = Qe;
    Ge.prototype.showFromPoint = Ue;
    Ge.prototype.key = $e;
    Ge.prototype.value = ti;
    _(Ge, He);

    function ei() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var r = Xe().dx(t && t.dx ? t.dx : 0).dy(t && t.dy ? t.dy : 0).target(this).absolute(i).fromMulti(e);
        var n = (this.parent() ? this.parent() : this).__execs__.canvas;
        if (t.color) r.color(t.color);
        if (!e) {
            r.keyFunc(t.key).valueFunc(t.value).offsetFunc(t.offset).showDiff(t.showDiff);
            this.__execs__.tooltip = r
        }
        r.render(n.node().parentNode.parentNode);
        return r
    }

    function ii() {
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        this.__execs__.axis = {};
        this.__execs__.legend = null;
        if (!this.parent()) this.__execs__.mark = t.local();
        this.__execs__.regions = null;
        this.__execs__.nodes = null;
        if (!e) {
            this.__execs__.scale = {};
            this.__execs__.field = {}
        }
        if (!this.parent() && this.__execs__.canvas) t.select(this.container()).selectAll(u("tooltip", true)).remove();
        return this
    }

    function ri() {
        var e = this.parent();
        t.select((e ? e : this).__execs__.canvas.node().parentNode.parentNode).selectAll(u("tooltip", true)).remove();
        return this
    }

    function ni(t) {
        if (!arguments.length) return this.__attrs__.size;
        if (Array.isArray(t)) {
            this.__attrs__.size = {
                range: t,
                reverse: false
            }
        } else if (typeof t === "number") {
            this.__attrs__.size = {
                range: [t, t],
                reverse: false
            }
        } else if ((typeof t === "undefined" ? "undefined" : e(t)) === "object") {
            this.__attrs__.size = t
        }
        return this
    }

    function ai(t) {
        if (!arguments.length) return this.__execs__.scale;
        return this.__execs__.scale[t]
    }

    function si(t) {
        v(this, t);
        return this
    }

    function oi(t, e, i) {
        var r = [];
        if (i[0] > e[0]) r[0] = e[0];
        else r[0] = i[0];
        if (i[1] < e[1]) r[1] = e[1];
        else r[1] = i[1];
        t.domain(r);
        if (e[0] === r[0] && e[1] === r[1]) t.nice()
    }

    function li(t, e) {
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var r = i ? t : this.__execs__.scale[t];
        var n = i ? null : this.__execs__.field[t];
        r._defaultDomain = e;
        if (i) {
            r.domain(e).nice()
        } else if (this.customDomain()) {
            oi(r, e, this.customDomain())
        } else if ((this.isMixed ? !this.isMixed() : true) && n.customDomain()) {
            oi(r, e, n.customDomain())
        } else {
            r.domain(e).nice()
        }
        return this
    }

    function ci() {
        for (var t = arguments.length, e = Array(t), i = 0; i < t; i++) {
            e[i] = arguments[i]
        }
        if (this.multiTooltip && this.multiTooltip()) return;
        var r = function t(i) {
            var r = true;
            var n = i;
            e.forEach(function(t) {
                r = r && n.data.key === t;
                if (n.parent) n = n.parent;
                else return r
            });
            return r
        };
        var n = this.filterNodes(r);
        var a = this.__execs__.tooltip;
        if (n.size() > 0) {
            n.each(function(t) {
                a.showFromPoint(this, t)
            })
        }
        return this
    }

    function ui(e, i) {
        i = i || this.font();
        for (var r in i) {
            if (!e.selectAll) e = t.select(e);
            e.style(r, i[r] + (r === "font-size" ? "px" : ""))
        }
    }

    function fi(t) {
        if (!arguments.length) return this.__attrs__.tooltip;
        if (typeof t === "boolean") {
            if (t) {
                t = {
                    sortByValue: "natural"
                }
            }
        }
        if ((typeof t === "undefined" ? "undefined" : e(t)) === "object") {
            if (!t.sortByValue) t.sortByValue = "natural"
        }
        this.__attrs__.tooltip = t;
        return this
    }

    function hi(t, i) {
        var r = 0;
        t = t.map(function(n) {
            if (n === undefined) {
                var a = function e() {
                    var n = i[r];
                    r += 1;
                    if (t.indexOf(t.filter(function(t) {
                            return t == n
                        }) < 0)[0]) {
                        return {
                            v: n
                        }
                    }
                };
                while (r < i.length) {
                    var s = a();
                    if ((typeof s === "undefined" ? "undefined" : e(s)) === "object") return s.v
                }
            }
            return n
        });
        return t.filter(function(t) {
            return t !== undefined
        })
    }

    function di(e) {
        var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var r = this.scale().color;
        if (this.colorDomain() && this.colorDomain().length > 0) {
            var n = this.colorDomain();
            var a = this.color();
            var s = e.map(function(t) {
                var e = n.indexOf(n.filter(function(e) {
                    return t == e.key
                })[0]);
                if (e >= 0) {
                    return n[e].color ? n[e].color : a[e]
                } else {
                    return undefined
                }
            });
            s = hi(s, a);
            var o = t.scaleOrdinal().domain(e).range(s);
            o._defaultRange = this.color();
            return o
        } else if (i && r && this.color() === r._defaultRange) {
            var l = this.color();
            var c = this.scale().color.domain();
            var u = this.scale().color.range();
            var f = false;
            var h = e.map(function(t) {
                var e = c.indexOf(c.filter(function(e) {
                    return e === t
                })[0]);
                if (!f && e >= 0) f = true;
                return e
            });
            if (f) {
                var d = h.map(function(t) {
                    if (t >= 0 && t < u.length) {
                        return u[t]
                    } else {
                        return undefined
                    }
                });
                d = hi(d, l);
                return r.domain(e).range(d)
            }
        }
        var v = t.scaleOrdinal().domain(e).range(this.color());
        v._defaultRange = this.color();
        return v
    }
    var vi = {
        "font-family": "sans-serif",
        "font-size": 12,
        "font-weight": "lighter",
        "font-style": "normal"
    };
    var _i = ["#ece7f2", "#50C3F7"];
    var pi = l;
    var mi = {
        autoResize: false,
        autoResizeSkip: ["munge", "domain"],
        aggregated: false,
        color: pi,
        colorDomain: null,
        container: null,
        customDomain: null,
        data: [],
        dimensions: [],
        font: vi,
        height: 480,
        keep: false,
        label: null,
        legend: null,
        limitKeys: 200,
        limitRows: 1e3,
        name: null,
        nodeName: u("mark node", true),
        needCanvas: true,
        margin: {
            top: 40,
            right: 40,
            bottom: 40,
            left: 40
        },
        measures: [],
        muteIntensity: .3,
        parent: null,
        regionName: u("mark region", true),
        size: null,
        tooltip: true,
        transition: {
            duration: 600,
            delay: 20
        },
        width: 640,
        zeroOffset: false,
        zeroMargin: false
    };
    var gi = function e() {
        i(this, e);
        this.setAttrs(mi);
        this.__execs__ = {
            autoResize: false,
            axis: {},
            condition: null,
            canvas: null,
            hidden: null,
            field: {},
            legend: null,
            mark: t.local(),
            scale: {},
            tooltip: null,
            regions: null,
            nodes: null
        };
        this.on = undefined;
        this.__execs__.selectDispatch = t.dispatch("selectClick", "selectEnter", "selectLeave", "legendEnter", "legendLeave");
        this.rebindOnMethod(this.__execs__.selectDispatch)
    };
    gi.prototype.font = p("font", vi);
    gi.prototype.transition = p("transition", mi.transition);
    gi.prototype.aggregated = d("aggregated");
    gi.prototype.autoResizeSkip = d("autoResizeSkip");
    gi.prototype.container = d("container");
    gi.prototype.customDomain = d("customDomain");
    gi.prototype.data = d("data");
    gi.prototype.height = d("height");
    gi.prototype.keep = d("keep");
    gi.prototype.label = d("label");
    gi.prototype.name = d("name");
    gi.prototype.needCanvas = d("needCanvas");
    gi.prototype.muteIntensity = d("muteIntensity");
    gi.prototype.regionName = d("regionName");
    gi.prototype.width = d("width");
    gi.prototype.zeroOffset = d("zeroOffset");
    gi.prototype.zeroMargin = d("zeroMargin");
    gi.prototype.aggregate = C;
    gi.prototype.aggregateMixed = X;
    gi.prototype.autoResize = Y;
    gi.prototype.color = Z;
    gi.prototype.colorDomain = K;
    gi.prototype.condition = J;
    gi.prototype.demute = Q;
    gi.prototype.demuteLegend = $;
    gi.prototype.demuteNodes = et;
    gi.prototype.demuteRegions = rt;
    gi.prototype.dimension = ot;
    gi.prototype.dimensions = lt;
    gi.prototype.domain = ct;
    gi.prototype.filterNodes = ut;
    gi.prototype.filterRegions = ft;
    gi.prototype.hideTooltip = ht;
    gi.prototype.innerSize = dt;
    gi.prototype.legend = pt;
    gi.prototype.limitKeys = mt;
    gi.prototype.limitRows = gt;
    gi.prototype.margin = xt;
    gi.prototype.mixedDimension = zt;
    gi.prototype.measure = kt;
    gi.prototype.measureName = wt;
    gi.prototype.measures = bt;
    gi.prototype.mute = U;
    gi.prototype.muteLegend = At;
    gi.prototype.muteNodes = Nt;
    gi.prototype.muteRegions = St;
    gi.prototype.nodeName = Ot;
    gi.prototype.nodes = Tt;
    gi.prototype.offset = Pt;
    gi.prototype.parent = Mt;
    gi.prototype.process = Ct;
    gi.prototype.tooltip = fi;
    gi.prototype.scale = ai;
    gi.prototype.styleFont = ui;
    gi.prototype.rebindOnMethod = Rt;
    gi.prototype.regions = Et;
    gi.prototype.remove = Bt;
    gi.prototype.render = Vt;
    gi.prototype.renderCanvas = Wt;
    gi.prototype.renderFrame = Kt;
    gi.prototype.renderLegend = ge;
    gi.prototype.renderRegion = ye;
    gi.prototype.renderSpectrum = Ce;
    gi.prototype.renderTooltip = ei;
    gi.prototype.reset = ii;
    gi.prototype.resetTooltip = ri;
    gi.prototype.size = ni;
    gi.prototype.setAttrs = si;
    gi.prototype.setCustomDomain = li;
    gi.prototype.showTooltip = ci;
    gi.prototype.updateColorScale = di;
    var yi = 14;
    var xi = 18;
    var ki = 18;
    var wi = c;
    var bi = ["x", "y"];
    var zi = ["top", "right", "bottom", "left"];
    var Ai = t.format(".2s");
    var Ni = t.format(",");
    var Fi = {
        "font-family": "sans-serif",
        "font-size": 10,
        "font-weight": "normal",
        "font-style": "normal",
        "letter-spacing": "0.1px"
    };
    var Si = 13;
    var Oi = "#c0ccda";
    var Ti = "#485465";
    var Di = "#3d4145";
    var Pi = "#aaa";
    var Mi = 45;
    var Li = 300;
    var Ci = {
        autoTickFormat: true,
        autoRotate: true,
        color: "#C6CBCE",
        field: null,
        facet: null,
        font: Fi,
        format: null,
        grid: false,
        gridSize: 0,
        interval: null,
        orient: zi[2],
        scale: null,
        showTitle: true,
        showDomain: true,
        showTicks: true,
        thickness: 40,
        target: bi[0],
        tickFormat: null,
        tickFormatSub: null,
        title: "",
        titleOrient: null,
        ticks: null,
        tickRotate: 0,
        tickSize: 0,
        tickPadding: 20,
        transition: null,
        x: 0,
        y: 0,
        domainColor: Oi,
        showAxisLine: true
    };
    var Ri = function t() {
        i(this, t);
        this.__attrs__ = JSON.parse(JSON.stringify(Ci));
        this.__execs__ = {
            axis: null,
            canvas: null,
            rotated: false
        }
    };

    function Ei() {
        return new Ri
    }

    function Bi() {
        return this.orient() === "bottom" || this.orient() === "top"
    }

    function ji() {
        var e = this.orient();
        var i = this.scale();
        var r = void 0;
        if (e === zi[0]) r = t.axisTop();
        else if (e === zi[1]) r = t.axisRight();
        else if (e === zi[3]) r = t.axisLeft();
        else r = t.axisBottom();
        this.__execs__.axis = r;
        if (i) r.scale(i);
        if (this.transition()) {
            var n = this.transition();
            this.__execs__.transition = t.transition().duration(n.duration).delay(n.delay)
        }
    }

    function Ii(t, e) {
        if (this.grid() && this.gridSize() > 0) {
            var i = this.__execs__.axis;
            var r = this.gridSize();
            var n = this.isHorizontal();
            var a = this.orient();
            var s = n ? "y2" : "x2";
            var o = a === "left" || a === "top" ? 1 : -1;
            var l = this.scale();
            var c = t.selectAll(".grid").data(l.ticks(i._tickNumber).map(function(t) {
                return l(t)
            }));
            c.exit().remove();
            var u = c.enter().append("g").attr("class", "grid");
            u.append("line").style("stroke", Di).style("stroke-width", 3);
            c = u.merge(c);
            if (this.transition() && !e) {
                c = c.transition(this.__execs__.transition)
            }
            c.attr("transform", function(t) {
                return "translate(" + (n ? [t + .5, 0] : [0, t - .5]) + ")"
            }).select("line").attr(s, o * r)
        } else {
            t.selectAll(".grid").remove()
        }
    }

    function Vi(e) {
        var i = this;
        var r = this.scale();
        var n = this.orient();
        var a = function() {
            if (r.bandwidth) {
                var t = r.bandwidth();
                if (t === 0) return r.step();
                return r.bandwidth()
            } else {
                var e = r.ticks();
                if (e.length > 1) {
                    return Math.abs(r(e[1]) - r(e[0]))
                } else {
                    return Math.abs(r.range[r.range().length - 1] - r.range()[0])
                }
            }
        }();
        var s = function i() {
            e.selectAll(".tick").each(function() {
                var e = t.select(this);
                var i = e.select("title");
                if (i.empty()) i = e.insert("title", ":first-child");
                var r = e.select("text").text();
                i.text(r)
            })
        };
        var o = function t() {
            var n = i.showTicks();
            var s = a < i.font()["font-size"] * (i.isHorizontal() ? 1 : .72);
            e.selectAll(".tick").style("visibility", s && r.bandwidth ? "hidden" : n ? "inherit" : "hidden")
        };
        var l = function n() {
            var a = i.tickPadding();
            var s = i.tickRotate();
            var o = i.isHorizontal();
            var l = i.orient() === "right" || i.orient() === "top";
            var c = function t(e) {
                var r = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : s;
                var n = void 0;
                if (o) n = [0, a / 2];
                else n = [e.attr("x") * .71, 0];
                if (i.transition()) e = e.transition().duration(180);
                e.attr("transform", "translate(" + n + ") rotate(" + r * -1 + ")").attr("text-anchor", o ? "start" : "end").attr("text-anchor", l ? "start" : "end")
            };
            if (s !== 0) {
                e.selectAll(".tick > text").call(c);
                i.__execs__.rotate = true;
                return
            } else if (i.autoRotate()) {
                var f = e.selectAll(".tick");
                var h = 0;
                f.each(function() {
                    var e = this.getBBox().width;
                    if (t.select(this).selectAll("text").classed(u("rotated"))) e *= 1.25;
                    h += e
                });
                var d = h >= Math.abs(r.range()[1] - r.range()[0]);
                if (o) {
                    if (d) {
                        f.selectAll("text").classed(u("rotated"), true).call(c, Mi)
                    } else {
                        var v = f.selectAll("text" + u("rotated", true)).classed(u("rotated"), false);
                        if (i.transition()) v = v.transition().duration(180);
                        v.attr("transform", null).attr("text-anchor", "middle")
                    }
                }
            }
        };
        s();
        l();
        o()
    }

    function Hi(t) {
        if (typeof t[0] === "number" && t[1] >= 1e5 && Math.abs(t[1] - t[0]) >= 1e3) return Ai;
        else return Ni
    }

    function Gi() {
        var e = this.__execs__.axis;
        var i = this.tickFormat();
        var r = this.scale();
        if (i) {
            if (typeof i === "function") e.tickFormat(function(t) {
                if (typeof t === "string" && isNaN(t)) return t;
                return i(t)
            });
            else if (r.domain()[0] instanceof Date || r._scaleType === "time") e.tickFormat(t.timeFormat(i));
            else e.tickFormat(t.format(i))
        } else if (this.autoTickFormat()) {
            if (r.invert && r.domain()[0] instanceof Date) {
                return
            }
            var n = r.domain();
            if (r.invert && !r.padding) {
                e.tickFormat(Hi(n))
            } else {
                e.tickFormat(function(t) {
                    return c(t)
                })
            }
        }
    }

    function Xi(t, e) {
        var i = t.range();
        e = e || Math.abs(i[1] - i[0]);
        var r = t.ticks().length;
        if (e <= Li / 2) {
            r = 2
        } else if (e <= Li) {
            r = 5
        } else {
            r = Math.round(r / 2)
        }
        return r
    }

    function Wi(e) {
        var i = this.__execs__.axis;
        var r = this.font();
        var n = this.scale();
        i.tickSize(this.tickSize()).tickPadding(this.tickPadding() + (this.isHorizontal() ? 4 : 2));
        if (this.ticks()) {
            i.ticks(this.ticks());
            i._tickNumber = this.ticks()
        } else if (n.invert) {
            if (n._scaleType === "time" || n.domain()[0] instanceof Date) {
                var a = b[this.interval()];
                if (a && !this.autoTickFormat() && this.tickFormat()) {
                    i.ticks(a);
                    i._tickNumber = n.ticks(a).length
                } else {
                    var s = this.tickFormat();
                    if (s) {
                        i._tickNumber = t.set(n.ticks().map(s)).values().length;
                        i.ticks(i._tickNumber)
                    } else {
                        i._tickNumber = n.ticks().length
                    }
                }
            } else {
                var o = Xi(n);
                i.ticks(o);
                i._tickNumber = o
            }
        } else {
            i._tickNumber = n.domain().length
        }
        for (var l in r) {
            e.style(l, l === "font-size" ? r[l] + "px" : r[l])
        }
    }

    function Yi(t, e) {
        var i = this;
        var r = this.__execs__.axis;
        if (t.selectAll(".domain").size() === 0) {
            t.attr("transform", "translate(" + [this.x(), this.y()] + ")")
        }
        if (this.transition() && !e) {
            t.transition(this.__execs__.transition).attr("transform", "translate(" + [this.x(), this.y()] + ")").call(function(t) {
                r(t)
            }).on("end", function() {
                Vi.call(i, t)
            })
        } else {
            t.attr("transform", "translate(" + [this.x(), this.y()] + ")").call(r);
            Vi.call(this, t)
        }
    }

    function Zi(e) {
        var i = this;
        var r = this.scale();
        if (this.showTicks() && this.tickFormatSub() && r.invert) {
            var n = this.tickFormatSub();
            var a = this.__execs__.transition;
            var s = function t(e) {
                return e.attr("x", function(t) {
                    return r(t[0])
                }).attr("y", i.thickness()).attr("dy", "-3em")
            };
            var o = [];
            var l = r.ticks(r._tickNumber);
            var c = l.map(r.tickFormat(r._tickNumber, n)).map(function(t) {
                if (o.indexOf(t) < 0) {
                    o.push(t);
                    return t
                } else {
                    return ""
                }
            });
            var u = t.zip(l, c).filter(function(t) {
                return t[1] !== ""
            });
            var f = e.selectAll(".tick-sub-text").data(u, function(t) {
                return t[1]
            });
            f.exit().transition(a).attr("opacity", 0).remove();
            f = f.enter().append("text").attr("class", "tick-sub-text").text(function(t) {
                return t[1]
            }).attr("opacity", 0).call(s).merge(f);
            f.transition(a).call(s).attr("opacity", 1)
        } else {
            e.selectAll(".tick-sub-text").remove()
        }
    }

    function Ki(t) {
        var e = t.selectAll(".tick");
        e.select("line").style("stroke", this.color());
        e.select("text").style("fill", this.font()["fill"] ? this.font()["fill"] : this.color());
        t.select(".domain").style("stroke", this.domainColor()).style("shape-rendering", "crispEdges").style("stroke-width", "1px").style("stroke-opacity", this.showAxisLine() ? 1 : 0).style("visibility", this.showDomain() ? "visible" : "hidden");
        t.selectAll(".tick-sub-text").style("fill", this.color())
    }

    function Ji(e) {
        var i = this;
        var r = function t(e) {
            if (i.isHorizontal()) {
                e.attr("dy", s === "bottom" ? "-1em" : ".71em")
            } else {
                if (o === "bottom" || o === "top") {
                    e.attr("dy", o === "bottom" ? "2em" : "-1em")
                }
            }
        };
        var n = function e(r) {
            if (i.isHorizontal()) {
                var n = 0;
                r.attr("transform", "translate(" + [c, s === "bottom" ? i.thickness() - n : -i.thickness() + n] + ")")
            } else {
                if (o === "bottom" || o === "top") {
                    r.attr("transform", "translate(" + [0, o === "bottom" ? t.max(l.range()) : t.min(l.range())] + ")")
                } else {
                    r.attr("transform", "translate(" + [i.thickness() * (s === "left" ? -1 : 1), c] + ") " + (s === "left" ? "rotate(90)" : "rotate(-90)"))
                }
            }
        };
        var a = this.title() || this.field();
        if (!a) return;
        a = a.localeCompare(j.field) === 0 ? B : a;
        if (!this.showTitle()) {
            e.selectAll(".title").remove();
            return
        }
        var s = this.orient();
        var o = this.titleOrient() || s;
        var l = this.scale();
        var c = (l.range()[0] + l.range()[1]) / 2;
        var u = e.selectAll(".title").data([a]);
        u.exit().remove();
        var f = u.enter().append("g").attr("class", "title").call(n);
        f.append("text").attr("text-anchor", "middle").style("font-size", Si + "px").style("fill", Ti).call(r);
        u = f.merge(u);
        u.select("text").text(a);
        if (this.transition()) {
            u.transition(this.__execs__.transition).call(n)
        }
    }

    function qi(t, e) {
        var i = this.scale();
        if (i.invert && y(i.domain())) {
            var r = this.gridSize();
            var n = this.isHorizontal();
            var a = this.orient();
            var s = n ? "y2" : "x2";
            var o = a === "left" || a === "top" ? 1 : -1;
            var l = this.scale();
            var c = [];
            t.selectAll(".tick").filter(function(t) {
                return t === 0
            }).each(function(t) {
                c.push(l(t))
            });
            var u = t.selectAll(".zero.grid").data(c);
            u.exit().remove();
            var f = u.enter().append("g").attr("class", "grid zero");
            f.append("line").style("stroke", Pi);
            u = f.merge(u);
            if (this.transition() && !e) {
                u = u.transition(this.__execs__.transition)
            }
            u.attr("transform", function(t) {
                return "translate(" + (n ? [t + .5, 0] : [0, t - .5]) + ")"
            }).select("line").attr(s, o * r)
        }
    }

    function Ui(t) {
        if (!arguments.length) return this.__attrs__.facet;
        if (zi.includes(t)) this.__attrs__.facet = {
            orient: t
        };
        else this.__attrs__.facet = {
            orient: zi[0]
        };
        return this
    }

    function Qi() {}

    function $i(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        if (t) {
            this.__execs__.canvas = t
        } else if (this.__execs__.canvas) {
            t = this.__execs__.canvas
        } else {
            return
        }
        ji.call(this);
        Gi.call(this);
        Wi.call(this, t);
        Yi.call(this, t, e);
        Zi.call(this, t);
        Ki.call(this, t);
        Ii.call(this, t, e);
        qi.call(this, t, e);
        Ji.call(this, t)
    }
    Ri.prototype.facet = Ui;
    Ri.prototype.render = $i;
    Ri.prototype.update = Qi;
    Ri.prototype.isHorizontal = Bi;
    _(Ri, Ci);

    function tr(t) {
        var e = Object.assign({}, t);
        if (e.orient && e.orient === "x") {
            e.target = e.orient;
            e.orient = "bottom"
        } else if (e.orient && e.orient === "y") {
            e.target = e.orient;
            e.orient = "left"
        }
        var i = e.target === "x";
        if (!("showDomain" in e)) e.showDomain = true;
        if (!("showTicks" in e)) e.showTicks = true;
        if (!("showTitle" in e)) e.showTitle = true;
        if (!("orient" in e)) e.orient = i ? "bottom" : "left";
        if (!("thickness" in e)) {
            e.thickness = i ? ki : xi;
            e.thickness += e.tickPadding ? e.tickPadding : 0;
            e.thickness += e.showTitle ? yi * 2 : 0;
            e.thickness += e.showTicks ? yi : 0;
            e.defaultThickness = e.thickness
        }
        if (!("autoTickFormat" in e) && !("format" in e)) e.autoTickFormat = false;
        return e
    }

    function er(t) {
        var i = this;
        var r = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var n = void 0;
        if (!arguments.length) return this.__attrs__.axis;
        if (Array.isArray(t)) {
            this.__attrs__.axis = t.map(tr);
            t.forEach(function(t) {
                return i.__execs__.axis[t.target] = {}
            });
            return this
        } else if (typeof t === "string") {
            n = {
                target: t
            };
            n = tr(n)
        } else if ((typeof t === "undefined" ? "undefined" : e(t)) === "object") {
            n = Object.assign({}, t);
            n = tr(n)
        }
        var a = this.__attrs__.axis.indexOf(this.__attrs__.axis.filter(function(t) {
            return t.target === n.target && t.orient === n.orient
        })[0]);
        if (r) {
            if (a >= 0) {
                this.__attrs__.axis.splice(a, 1, n)
            } else {
                this.__attrs__.axis.push(n)
            }
            if (!this.__execs__.axis[n.target]) this.__execs__.axis[n.target] = {}
        } else {
            if (a >= 0) {
                this.__attrs__.axis.splice(a, 1)
            }
        }
        return this
    }

    function ir(t, e, i) {
        if (!arguments.length) return this.__execs__.axis;
        this.__execs__.axis[t] = this.__execs__.axis[t] || {};
        this.__execs__.axis[t][e] = i;
        return this
    }

    function rr(t, e, i) {
        if (t[i] !== undefined) e[i](t[i])
    }

    function nr(t, e) {
        var i = this.axisTitles().filter(function(t) {
            return t.target === e.target && (!t.field || t.field === e.field) && (!t.shape || t.shape === e.shape)
        });
        if (i.length > 0) i = i[0];
        else i = null;
        var r = Ei();
        r.scale(t).target(e.target).field(e.field).orient(e.orient).tickFormatSub(e.tickFormatSub).tickFormat(e.tickFormat).title(i ? i.title : e.title).titleOrient(e.titleOrient).autoTickFormat(e.autoTickFormat).transition(this.transition());
        if (t._field) {
            var n = t._field;
            if (n.interval && n.interval()) r.interval(n.interval());
            if (n.format && n.format() && !e.autoTickFormat) r.tickFormat(n.format());
            else if (e.autoTickFormat) r.tickFormat(null)
        } else r.interval(null);
        ["tickPadding", "thickness", "showTitle", "showDomain", "showTicks", "tickSize", "domainColor", "font", "showAxisLine"].forEach(function(t) {
            return rr(e, r, t)
        });
        ir.call(this, e.target, e.field, r);
        return r
    }

    function ar() {
        return this.axis().find(function(t) {
            return t.target === "x"
        })
    }

    function sr() {
        return this.axis().find(function(t) {
            return t.target === "y"
        })
    }

    function or(t, i) {
        var r = void 0;
        if (typeof t === "string") {
            var n = t.split(".");
            r = {
                target: n[0],
                field: n.length >= 2 ? n.slice(1).join(".") : null
            }
        } else if ((typeof t === "undefined" ? "undefined" : e(t)) === "object") {
            r = t
        } else {
            throw new Error(".axisTitle: " + t + " is not unavailable")
        }
        var a = this.axisTitles();
        var s = -1;
        for (var o = 0; o < a.length; o++) {
            var l = a[o];
            if (l.field === r.field && l.target === r.target) {
                s = o;
                break
            }
        }
        if (i) {
            var c = Object.assign({}, r);
            c.title = i;
            if (s >= 0) a.splice(s, 1, c);
            else a.push(c)
        } else {
            a.splice(s, 1)
        }
        return this
    }

    function lr() {
        var e = this;
        var i = this.__execs__.canvas;
        var r = this.__execs__.axis;
        var n = function t(e, i, r) {
            var n = "axis target-" + i.target() + " orient-" + i.orient() + " targetNum-" + r;
            var a = e.selectAll(u(n, true)).data([r]);
            a.exit().remove();
            a = a.enter().insert("g", ":first-child").attr("class", u(n)).merge(a).classed(u("active"), true);
            i.render(a)
        };
        var a = i.selectAll(u("axis", true));
        a.classed(u("active"), false);
        for (var s in r) {
            if (r.hasOwnProperty(s)) {
                (function() {
                    var t = 0;
                    for (var a in r[s]) {
                        if (r[s].hasOwnProperty(a)) {
                            var o = r[s][a];
                            if (o.facet()) {
                                i.selectAll(e.regionName()).call(n, o, t)
                            } else {
                                i.call(n, o, t)
                            }
                        }
                        t += 1
                    }
                    i.selectAll(u("axis target-" + s, true)).filter(function(e) {
                        return e >= t
                    }).remove()
                })()
            }
        }
        a.filter(function() {
            return !t.select(this).classed(u("active"))
        }).remove();
        return this
    }

    function cr(t, e) {
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
        var n = this.__execs__.hidden;
        if (!(t && t.showTicks) || t && t.autoTickFormat) return;
        var a = t.font || Fi;
        var s = t.tickFormat || (r ? wi : t.autoTickFormat && Hi(e.domain()));
        var o = r ? e.domain() : e.ticks();
        if (e._field) {
            var l = e._field;
            if (l.format() && !t.autoTickFormat) s = l.format();
            if (l.interval && l.interval()) o = e.ticks(b[e._field.interval()])
        }
        var c = -1;
        var f = false;
        var h = this.innerSize();
        var d = i ? h.width / o.length : 0;
        var v = n.selectAll(u("tick", true)).data(s ? o.map(s) : o);
        v = v.enter().append("text").attr("class", u("tick")).merge(v).text(function(t) {
            return t
        });
        this.styleFont(v, a);
        v.each(function() {
            var t = this.getBBox().width;
            if (t > c) c = t;
            if (t > d) f = true
        });
        c = c + yi;
        if (t.tickPadding) c += t.tickPadding;
        if (t.showTitle) c += yi;
        if (t.thickness) c += yi;
        if (t.defaultThickness) {
            if (f && c > t.defaultThickness) {
                t.thickness = c
            } else if (t.defaultThickness < t.thickness) {
                t.thickness = t.defaultThickness
            }
        }
        if (t.target === "x") {
            t.thickness = Math.min(t.thickness, this.height() * .5)
        } else {
            t.thickness = Math.min(t.thickness, this.width() * .8)
        }
        v.remove();
        t.thickness = Math.round(t.thickness);
        return t.thickness
    }
    var ur = {
        axis: [],
        axisTitles: [],
        grid: false,
        noAxisOffset: false
    };
    var fr = function(t) {
        a(e, t);

        function e() {
            i(this, e);
            var t = s(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this));
            t.setAttrs(ur);
            return t
        }
        r(e, [{
            key: "offset",
            value: function t() {
                var t = n(e.prototype.__proto__ || Object.getPrototypeOf(e.prototype), "offset", this).call(this);
                t = Object.assign({}, t);
                var i = this.axis();
                if (!this.noAxisOffset()) {
                    i.forEach(function(e) {
                        t[e.orient] += e.thickness
                    })
                }
                return t
            }
        }]);
        return e
    }(gi);
    fr.prototype.axisTitles = d("axisTitles");
    fr.prototype.axisToggle = d("axisToggle");
    fr.prototype.grid = d("grid");
    fr.prototype.noAxisOffset = d("noAxisOffset");
    fr.prototype.axis = er;
    fr.prototype.axisX = ar;
    fr.prototype.axisY = sr;
    fr.prototype.axisDefault = nr;
    fr.prototype.axisTitle = or;
    fr.prototype.renderAxis = lr;
    fr.prototype.thickness = cr;
    fr.prototype.downArrowPath = d("down-arrow");
    fr.prototype.upArrowPath = d("up-arrow");

    function hr() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        var e = this.facet();
        var i = this.__execs__.field;
        var r = this.axisX();
        var n = this.axisY();
        var a = this.__execs__.scale;
        var s = this.innerSize();
        if (e.orient === "horizontal" && r) {
            i[t ? "region" : "x"].axis(r);
            r.orient = "top";
            r.showDomain = false;
            this.axisDefault(a.region, r)
        } else if (e.orient === "vertical" && n) {
            i[t ? "region" : "x"].axis(n);
            n.orient = "right";
            n.showDomain = false;
            this.axisDefault(a.region, n).x(s.width)
        }
        return this
    }
    var dr = ["vertical", "horizontal"];

    function vr() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        if (!arguments.length) return this.__attrs__.facet;
        if (!t) this.__attrs__.facet = false;
        else if (dr.includes(t)) this.__attrs__.facet = {
            orient: t
        };
        else this.__attrs__.facet = {
            orient: dr[0]
        };
        return this
    }
    var _r = {
        facet: false
    };
    var pr = function(t) {
        a(e, t);

        function e() {
            i(this, e);
            var t = s(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this));
            t.setAttrs(_r);
            return t
        }
        return e
    }(fr);
    pr.prototype.axisFacet = hr;
    pr.prototype.facet = vr;
    var mr = {
        padding: 0,
        regionPadding: 0
    };
    var gr = function t(e) {
        var r = function(t) {
            a(e, t);

            function e() {
                i(this, e);
                var t = s(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this));
                t.setAttrs(mr);
                return t
            }
            return e
        }(e);
        r.prototype.padding = d("padding");
        r.prototype.regionPadding = d("regionPadding");
        _(r, mr);
        return r
    };

    function yr(t) {
        if (!arguments.length) return this.__attrs__.sortByValue;
        if (t && (typeof t !== "string" || !xr.find(function(e) {
                return e === t
            }))) {
            t = "natural"
        }
        this.__attrs__.sortByValue = t;
        return this
    }
    var xr = ["natural", "ascending", "descending"];
    var kr = {
        sortByValue: xr[0]
    };
    var wr = function t(e) {
        var r = function(t) {
            a(e, t);

            function e() {
                i(this, e);
                var t = s(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this));
                t.setAttrs(kr);
                return t
            }
            return e
        }(e);
        r.prototype.sortByValue = yr;
        return r
    };
    var br = {
        stacked: false,
        normalized: false
    };
    var zr = function t(e) {
        var r = function(t) {
            a(e, t);

            function e() {
                i(this, e);
                var t = s(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this));
                t.setAttrs(br);
                return t
            }
            return e
        }(e);
        r.prototype.stacked = d("stacked");
        r.prototype.normalized = d("normalized");
        return r
    };

    function Ar(t) {
        return t(t.domain()[0]) - t(t._lastDomain[0])
    }

    function Nr(t, i) {
        var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var n = this.viewInterval();
        var a = n ? n.unit : i.length;
        var s = n ? n.multiple : 1;
        var o = typeof a === "undefined" ? "undefined" : e(a);
        t._defaultDomain = i;
        if (r) t._lastDomain = t.domain();
        if (t.invert) {
            if (o === "string" && i[0] instanceof Date) {
                if (r) {
                    i = [b[a].offset(i[i.length - 1], -1 * s), i[i.length - 1]]
                } else {
                    i = [i[0], b[a].offset(i[0], 1 * s)]
                }
            } else if (o === "number") {
                if (r) {
                    i = [i[i.length - 1] - a * s, i[i.length - 1]]
                } else {
                    i = [i[0], i[0] + a * s]
                }
            }
        } else {
            if (o === "number") {
                if (r) {
                    var l = i.length - a * s;
                    i = i.slice(l, l + a * s)
                } else {
                    i = i.slice(0, a * s)
                }
            }
        }
        return i
    }

    function Fr(t) {
        if (!arguments.length) return this.__execs__.stream;
        if (t) {
            if (!Array.isArray(t)) t = [t];
            this.data(this.data().concat(t))
        }
        this.__execs__.stream = t;
        return this
    }

    function Sr(t) {
        var e = +t.invert(t.range()[0] + 1);
        var i = +t.invert(t.range()[0]);
        return e - i
    }

    function Or(e, i) {
        var r = this;
        var n = this.__execs__.streamPanning;
        if (!n) {
            n = t.drag();
            var a = this.__execs__.field;
            var s = this.__execs__.axis;
            var o = s && s.x ? s.x[a.x.field()] : null;
            var l = this.__execs__.canvas;
            var c = this.process().find(function(t) {
                return t.type === "mark"
            }).call;
            var u = this.process().find(function(t) {
                return t.type === "tooltip"
            }).call;
            var f = "invert" in e;
            var h = function t(n) {
                var a = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                e._lastDomain = n;
                e.domain(n);
                var s = r.transition();
                r.transition({
                    duration: a,
                    delay: 0
                });
                if (i) i();
                c.call(r);
                r.resetTooltip();
                u.call(r);
                o.render(null, true);
                r.transition(s)
            };
            this.__execs__.streamPanning = n;
            if (f) {
                var d = e.domain()[0] instanceof Date;
                n.on("drag.streamPanning", function() {
                    var i = e.domain();
                    var r = Sr(e);
                    var n = e._defaultDomain;
                    var a = t.event.dx * -1;
                    var s = r * a;
                    var o = a > 0 && +i[i.length - 1] + s <= +n[n.length - 1] || a < 0 && +i[0] + s >= +n[0];
                    if (o) {
                        h(i.map(function(t) {
                            return d ? new Date(+t + s) : t + s
                        }))
                    }
                })
            } else {
                var v = 0;
                n.on("start.streamPanning end.streamPanning", function() {
                    v = 0
                }).on("drag.streamPanning", function() {
                    var i = e.step();
                    v += t.event.dx;
                    var r = Math.abs(v);
                    if (r >= e.step()) {
                        var n = e.domain();
                        var a = e._defaultDomain;
                        var s = a.indexOf(a.filter(function(t) {
                            return t === n[0]
                        })[0]);
                        var o = Math.floor(r / i);
                        o *= v > 0 ? -1 : 1;
                        var l = o > 0 && s + n.length + o < a.length || o < 0 && s + o >= 0;
                        if (l) {
                            h(a.slice(s + o, s + n.length + o), 400)
                        }
                        v = 0
                    }
                })
            }
            l.call(n)
        }
        return this
    }

    function Tr(t, e) {
        var i = e._defaultDomain.indexOf(e._defaultDomain.filter(function(t) {
            return t === e.domain()[0]
        })[0]);
        var r = e._defaultDomain.indexOf(e._defaultDomain.filter(function(e) {
            return e === t
        })[0]);
        var n = r - i;
        if (n >= 0) {
            n = n - e.domain().length;
            return e.range()[1] + n * e.step()
        } else {
            return e.range()[0] + n * e.step()
        }
    }

    function Dr(t) {
        var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        if (!arguments.length) return this.__execs__.viewInterval;
        var r = typeof t === "undefined" ? "undefined" : e(t);
        if (r === "number") {
            if (Dr <= 0) t = null
        } else if (r === "string") {
            if (!Object.keys(b).includes(t)) {
                t = null
            }
        }
        if (t) this.__execs__.viewInterval = {
            unit: t,
            multiple: i
        };
        else this.__execs__.viewInterval = null;
        return this
    }
    var Pr = {
        viewInterval: null,
        stream: null
    };
    var Mr = function e(r) {
        var n = function(e) {
            a(r, e);

            function r() {
                i(this, r);
                var e = s(this, (r.__proto__ || Object.getPrototypeOf(r)).call(this));
                e.setAttrs(Pr);
                e.__execs__.viewInterval = null;
                e.__execs__.stream = null;
                e.__execs__.streamPanning = null;
                e.__execs__.streamPanningDispatch = t.dispatch("streamPanning");
                e.rebindOnMethod(e.__execs__.streamPanningDispatch);
                return e
            }
            return r
        }(r);
        n.prototype.distDomain = Ar;
        n.prototype.limitViewInterval = Nr;
        n.prototype.stream = Fr;
        n.prototype.streamPanning = Or;
        n.prototype.tempPosForOrdinalScale = Tr;
        n.prototype.viewInterval = Dr;
        return n
    };

    function Lr(t, e) {
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
        t.attr("transform", function(t) {
            if (i) {
                if (r) return "translate(" + [e.width, e.height] + ")";
                return "translate(" + [e.width, t.y - .5] + ")"
            } else {
                if (r) return "translate(" + [0, 0] + ")";
                return "translate(" + [t.w + .5, 0] + ")"
            }
        })
    }

    function Cr(t, e) {
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        if (i) {
            t.attr("x1", -e.width)
        } else {
            t.attr("y2", e.height)
        }
    }

    function Rr() {
        if (!this.annotation() || this.isFacet() || this.stacked()) return;
        var e = this.annotation();
        var i = this;
        var r = this.__execs__.canvas;
        var n = t.transition().duration(this.transition().duration).delay(this.transition().delay);
        var a = this.innerSize();
        var s = this.isVertical();
        var o = this.showDiff() && !this.isNested();
        if (r.select(".annotation-g").empty()) r.append("g").attr("class", "annotation-g");
        var l = r.select(".annotation-g");
        var c = l.selectAll(".annotation").data(this.nodes().data());
        c.exit().remove();
        var u = c.enter().append("g").attr("class", "annotation").call(Lr, a, s, true).style("pointer-events", "none");
        u.append("text").style("fill", e.color);
        u.append("line").style("stroke", e.color).style("shape-rendering", "crispEdges").call(Cr, a, s);
        c = u.merge(c).transition(n).call(Lr, a, s);
        if (o) {
            c.style("visibility", function(e, i, r) {
                if (e.diff) {
                    if (e.diff.value < 0) return "visible";
                    else if (i < c.size() - 1 && t.select(r[i + 1]).datum().diff.value > 0) return "visible";
                    if (e.neighbor.diff.value > 0) return "visible"
                }
                return "hidden"
            })
        }
        c.select("text").text(function(t) {
            return t.key
        }).style("visibility", e.showLabel ? "visible" : "hidden").style("fill", e.color).each(function() {
            i.styleFont(this)
        });
        c.select("line").transition(n).style("stroke", e.color).call(Cr, a, s)
    }

    function Er() {
        var t = this;
        var e = this.__execs__.scale;
        var i = this.isNested();
        var r = this.grid();
        var n = this.innerSize();
        var a = this.__execs__.field;
        var s = this.isVertical();
        var o = this.__attrs__.font;
        var l = function r(n) {
            var l = i ? a.region : s ? a.x : a.y;
            var c = i ? e.region : s ? e.x : e.y;
            l.axis(n);
            var u = t.axisDefault(c, n);
            u.font(o);
            if (n.orient === "bottom") {
                u.y(s ? e.y.range()[0] : e.x.range()[1])
            }
            return u
        };
        var c = function o(l) {
            var c = s ? a.y : a.x;
            var u = s ? e.y : e.x;
            c.axis(l);
            var f = t.axisDefault(u, l);
            f.grid(r).gridSize(l.orient === "bottom" || l.orient === "top" ? n.height : n.width);
            if (l.orient === "right") f.x((i ? e.region : e.x).range()[1]);
            return f
        };
        var u = this.axisX();
        var f = this.axisY();
        if (this.isFacet()) {
            this.axisFacet(false)
        } else {
            if (u) l(u);
            if (f) c(f)
        }
        this.renderAxis()
    }

    function Br() {
        var e = this.keep();
        var i = this.scale();
        var r = this.__execs__.munged;
        var n = this.isNested();
        var a = this.stacked();
        var s = this.aggregated();
        var o = this.__execs__.field;
        var l = this.isNestedAndSortByValue();
        var c = this.viewInterval();
        var u = this.label();
        var f = this.diffArrow();
        var h = this.arrowOnMark();
        var d = this.colorDomain();
        var v = this.data();
        var _ = void 0,
            p = void 0;
        var m = void 0;
        if (!(e && i.x && i.y)) {
            i.x = t.scaleBand().padding(this.padding());
            i.y = t.scaleLinear()
        }
        if (n) {
            m = o.region.level(0).munged(r).domain();
            i.region = t.scaleBand().domain(m).padding(this.regionPadding())
        }
        if (this.isFacet()) {
            i.color = this.updateColorScale(m, e);
            return this
        }
        var g = 1;
        p = o.x.level(g).munged(r).domain(!l && this.sortByValue());
        if (n || !n && (this.mono() === false || a)) {
            i.color = this.updateColorScale(p, e)
        }
        _ = sn(o.y, r, g, n, s, a, this.showDiff(), u, h);
        if (l) {
            p = o.x.domain(this.sortByValue(), null, l);
            r.forEach(function(t) {
                return t.domain = p.find(function(e) {
                    return e.key === t.data.key
                }).values
            })
        } else if (a) {
            if (!n) {
                i.x.domain([o.x.field()])
            }
        } else {
            if (!e && c) {
                p = this.limitViewInterval(i.x, p)
            } else if (e && this.stream()) {
                p = this.limitViewInterval(i.x, p, true)
            }
            i.x.domain(p)
        }
        this.setCustomDomain("y", _);
        return this
    }

    function jr() {
        var t = this;
        var e = this;
        var i = this.__execs__.scale;
        var r = this.facet();
        var n = this.__execs__.canvas;
        var a = this.mono();
        var s = this.innerSize();
        var o = [this.dimensions()[0]];
        var l = this.isMixed() ? [I] : this.measures();
        var c = void 0,
            u = void 0;
        var f = ["axisTitles", "normalized", "padding", "orient", "font", "label", "grid", "tooltip"].map(function(e) {
            return {
                key: e,
                value: t[e]()
            }
        });
        var h = this.axisX();
        var d = this.axisY();
        var v = function t(n) {
            var s = on().container(this).data(n).dimensions(o).measures(l).width(c).height(u).legend(false).zeroMargin(true).aggregated(true).parent(e);
            f.forEach(function(t) {
                s[t.key](t.value)
            });
            if (!a) s.color(i.color(n.data.key));
            if (r.orient === "vertical") {
                if (h) s.axis({
                    target: "x",
                    orient: "bottom"
                });
                if (d) s.axis({
                    target: "y",
                    orient: "left"
                })
            } else {
                if (h) s.axis({
                    target: "x",
                    orient: "bottom"
                });
                if (d) s.axis({
                    target: "y",
                    orient: "left"
                })
            }
            s.render()
        };
        if (r.orient === "horizontal") {
            c = i.region.bandwidth();
            u = s.height
        } else {
            c = s.width;
            u = i.region.bandwidth()
        }
        n.selectAll(this.regionName() + ".facet").each(v)
    }

    function Ir() {
        var t = this.__execs__.field;
        if (this.mono() && (!t.region || this.isFacet())) {
            return
        }
        this.renderLegend("x")
    }

    function Vr() {
        var e = this;
        var i = this.__execs__.canvas;
        var r = this.isNested.call(this);
        var n = this.__execs__.scale;
        var a = this.stacked();
        var s = this.isVertical();
        var o = this.color();
        var l = this.diffArrow();
        var f = t.transition().duration(this.transition().duration).delay(this.transition().delay);
        var h = this.measureName();
        var d = y(n.y.domain());
        var v = this.label();
        var _ = this.__execs__.field;
        var p = this.showDiff();
        var m = !r && p;
        var g = this.isNestedAndSortByValue();
        var x = this.data();
        var k = this.arrowOnMark();
        var w = this.downArrowPath();
        var b = this.upArrowPath();
        var z = function i(l) {
            var u = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var f = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var v = function t(e) {
                if (u) return o[0];
                else return n.color(e.data.key)
            };
            var p = function e(i) {
                var r = _.x.interval() && _.x.format() ? t.timeFormat(_.x.format()) : null;
                return r ? r(i) : i
            };
            l.each(function(t) {
                var i = void 0,
                    o = void 0,
                    l = void 0,
                    u = void 0;
                var _ = t.value;
                var m = _ >= 0;
                if (a) {
                    i = 0;
                    o = (s ? m : !m) ? n.y(t.data.value[h + "-end"]) : n.y(t.data.value[h + "-start"]);
                    l = r ? n.region.bandwidth() : n.x.width;
                    u = Math.abs(n.y(t.data.value[h + "-start"]) - n.y(t.data.value[h + "-end"]))
                } else {
                    if (g) {
                        n.x.domain(t.parent.domain)
                    }
                    i = n.x(t.data.key);
                    if (isNaN(i) && n.x._defaultDomain) {
                        i = e.tempPosForOrdinalScale(t.data.key, n.x)
                    }
                    if (f) {
                        t.x0 = e.tempPosForOrdinalScale(t.data.key, n.x)
                    }
                    o = (s ? m : !m) ? n.y(_) : d ? n.y(0) : n.y.range()[0];
                    l = n.x.bandwidth();
                    u = Math.abs((d ? n.y(0) : n.y.range()[0]) - n.y(_))
                }
                var y = s ? {
                    x: i,
                    y: o + (m ? 0 : .5),
                    w: l,
                    h: u,
                    upward: m
                } : {
                    x: o + (m ? .5 : 0),
                    y: i,
                    w: u,
                    h: l,
                    upward: m
                };
                y.key = p(t.data.key);
                y.color = v(t);
                y.text = c(_);
                for (var x in y) {
                    if (y.hasOwnProperty(x)) t[x] = y[x]
                }
            })
        };
        var A = function e(i) {
            var r = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            i.each(function(e) {
                var i = t.select(this);
                i.style("cursor", "pointer").style("fill", function(e) {
                    if (t.select(this).classed(u("diff"))) return "none";
                    else return e.color
                });
                if (r) {
                    i.attr("x", e.x0 || e.x).attr("y", e.upward ? e.y + e.h : e.y).attr("width", e.w).attr("height", 0)
                } else {
                    i.attr("x", e.upward ? e.x : e.x + e.w).attr("y", e.x0 || e.y).attr("width", 0).attr("height", e.h)
                }
            })
        };
        var N = function i(r) {
            var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            r.each(function(i) {
                var r = t.select(this);
                r.style("pointer-events", "none").text(i.text);
                if (n) {
                    r.attr("x", (i.x0 || i.x) + i.w / 2).style("text-anchor", "middle");
                    if (a) r.attr("y", i.y + i.h).attr("dy", "1em");
                    else if (i.upward) r.attr("y", i.y + i.h).attr("dy", "-.25em");
                    else r.attr("y", i.y).attr("dy", "1em")
                } else {
                    r.attr("y", (i.x0 || i.y) + i.h / 2).attr("dy", ".35em");
                    if (a) r.attr("x", i.x + i.w / 2).attr("text-anchor", "middle");
                    else if (i.upward) r.attr("x", i.x).attr("dx", ".5em");
                    else r.attr("x", i.x + i.w).attr("text-anchor", "end").attr("dx", "-.1em")
                }
                if (i.key === "diff-arrow") {
                    r.style("visibility", "hidden")
                }
                e.styleFont(r)
            })
        };
        var F = function e(i) {
            i.transition(f).attr("x", function(t) {
                return t.x
            }).attr("y", function(t) {
                return t.y
            }).attr("width", function(t) {
                return t.w
            }).attr("height", function(t) {
                return t.h
            }).style("fill", function(e) {
                if (t.select(this).classed(u("diff"))) return "none";
                if (t.select(this).classed(u("diff-arrow"))) return "none";
                else return e.color
            })
        };
        var S = function e(i) {
            var r = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            i.each(function(e) {
                var i = t.select(this);
                if (r) {
                    i.transition(f).attr("y", e.upward ? e.y - 10 : e.y + e.h)
                } else {
                    if (a) i.transition(f).attr("x", e.x + e.w / 2).attr("text-anchor", "middle");
                    else i.transition(f).attr("x", e.upward ? e.x + e.w : e.x)
                }
                i.text(e.text).style("fill", "#fff").style("visibility", v && (!p || p && i.classed(u("diff"))) ? "visible" : "hidden");
                if (e.key === "diff-arrow") {
                    i.style("visibility", i.classed(u("diff-arrow")) ? "visible" : "hidden")
                }
            })
        };
        var O = function t(e) {
            e.transition(f).attr("x", function(t) {
                return t.x
            }).attr("y", function(t) {
                return t.y
            }).attr("width", function(t) {
                return t.w
            }).attr("height", function(t) {
                return t.h
            })
        };
        var T = void 0;
        var D = i.selectAll(this.regionName());
        T = D.selectAll(this.nodeName()).data(function(t) {
            var e = t.children;
            return a ? e.slice().reverse() : e
        }, function(t) {
            return t.data.key
        });
        T.exit().remove();
        var P = T.enter().append("g").attr("class", this.nodeName(true)).call(z, r ? false : this.mono(), this.stream());
        P.append("rect").attr("class", u("bar")).call(A, s);
        P.append("text").attr("class", u("bar")).call(N, s);
        if (r && a) {
            P.append("path").style("fill", function(t) {
                return t.color
            }).style("visibility", "hidden").attr("opacity", "0.5")
        }
        T.call(z, r ? false : this.mono());
        T = P.merge(T);
        T.select("rect" + u("bar", true)).call(F, s);
        T.select("text" + u("bar", true)).call(S, s);
        if (m) {
            var M = void 0;
            var L = 1;
            var C = L / 2;
            P.append("rect").attr("class", u("diff")).attr("stroke-dasharray", "5, 3").attr("stroke-width", L);
            P.append("text").attr("class", u("diff"));
            T.each(function(e, i, r) {
                if (i > 0) {
                    e.neighbor = M;
                    var n = {
                        value: e.value - M.value,
                        upward: e.upward
                    };
                    if (s) {
                        n.x = e.x;
                        n.w = e.w;
                        if (n.value > 0) {
                            n.y = e.y;
                            n.h = M.y - e.y
                        } else {
                            n.y = M.y;
                            n.h = e.y - M.y
                        }
                    } else {
                        n.y = e.y;
                        n.h = e.h;
                        if (n.value > 0) {
                            n.x = M.w;
                            n.w = e.w - M.w
                        } else {
                            n.x = e.w;
                            n.w = M.w - e.w
                        }
                    }
                    n.x += C;
                    n.y += C;
                    n.h -= L;
                    n.w -= L;
                    n.w = Math.max(L * 2, n.w);
                    n.h = Math.max(L * 2, n.h);
                    n.text = c(n.value, true);
                    t.select(this).select("text" + u("bar", true)).each(function(e) {
                        var i = t.select(this).transition(f);
                        if (n.value < 0) {
                            if (s) {
                                i.attr("y", (e.upward ? e.y : e.y + e.h) - n.h)
                            } else {
                                i.attr("x", (e.upward ? e.x + e.w : e.x) + n.w)
                            }
                        }
                    });
                    t.select(this).select("rect" + u("bar", true)).transition(f).style("fill", function(t) {
                        return t.color = p[(n.value > 0 ? "inc" : "dec") + "Fill"]
                    });
                    t.select(this).select("rect" + u("diff", true)).datum(n).attr("x", s ? n.x + C : 0).attr("y", s ? e.upward ? e.y + e.h : e.y : n.y + C).attr("width", s ? e.w - L : 0).attr("height", s ? 0 : e.h - L).call(F).style("stroke", p[(n.value > 0 ? "inc" : "dec") + "Stroke"]);
                    t.select(this).select("text" + u("diff", true)).datum(n).call(N, s).call(S, s).style("fill", p[(n.value > 0 ? "inc" : "dec") + "Fill"]);
                    e.diff = n
                } else {
                    e.neighbor = t.select(r[i + 1]).datum();
                    t.select(this).select("rect" + u("bar", true)).transition(f).style(p.neuFill);
                    t.select(this).select("rect" + u("diff", true)).remove()
                }
                M = e
            })
        }
        if (l) {
            var R = void 0;
            var E = 1;
            T.each(function(e, i, r) {
                if (i === l["pos"]) {
                    e.neighbor = R;
                    t.select(this).append("image").attr("class", u("diff-arrow"));
                    t.select(this).append("text").attr("class", u("diff-arrow"));
                    e.y = R.y - 100;
                    e.h = 100;
                    e.text = c(l["value"], true);
                    t.select(this).select("text" + u("bar", true)).each(function(e) {
                        var i = t.select(this).transition(f);
                        i.attr("y", e.y)
                    });
                    t.select(this).select("rect" + u("bar", true)).transition(f);
                    t.select(this).select("image" + u("diff-arrow", true)).attr("x", e.x).attr("y", e.y).attr("width", s ? e.w - E : 0).attr("height", s ? 0 : e.h - E).attr("xlink:href", l["value"] < 0 ? w : b).call(F).style("stroke", "#40bbfb");
                    t.select(this).select("text" + u("diff-arrow", true)).datum(e).call(N, s).call(S, s).style("fill", "#40bbfb")
                } else {}
                R = e
            })
        }
        if (k) {
            var B = 1;
            var j = B / 2;
            P.append("svg:image").attr("class", u("markarrow"));
            P.append("text").attr("class", u("markarrow"));
            T.each(function(e, i, r) {
                var n = {
                    value: x.filter(function(t) {
                        return t.name == e.key
                    })[0][k],
                    upward: true
                };
                n.text = c(n.value, true);
                n.x = e.x + 40;
                n.w = e.w - 80;
                n.h = 60;
                n.y = 50;
                t.select(this).select("text" + u("markarrow", true)).each(function(e) {
                    var i = t.select(this).transition(f);
                    i.attr("y", e.y - 100)
                });
                t.select(this).select("rect" + u("bar", true)).transition(f);
                t.select(this).select("image" + u("markarrow", true)).datum(n).attr("x", s ? n.x + j : 0).attr("y", s ? e.upward ? e.y + e.h : e.y : n.y + j).attr("width", s ? e.w - B : 0).attr("height", s ? 0 : e.h - B).attr("xlink:href", n.value < 0 ? w : b).call(O).style("stroke", "#40bbfb");
                t.select(this).select("text" + u("markarrow", true)).datum(n).call(N, s).call(S, s).style("fill", "#40bbfb")
            })
        }
        if (r && a) {
            var I = t.local();
            D.each(function(i, r, n) {
                var a = t.select(r < n.length - 1 ? n[r + 1] : n[r - 1]).datum();
                var s = a.children;
                t.select(this).selectAll(e.nodeName()).each(function(t) {
                    var e = s.find(function(e) {
                        return e.data.key === t.data.key
                    });
                    t.neighbor = e
                })
            });
            D.filter(function(t, e, i) {
                return e < i.length - 1
            }).selectAll(e.nodeName()).select("path").style("fill", function(t) {
                return t.color
            }).each(function(t) {
                t.diff = {
                    value: t.neighbor.value - t.value
                };
                var e = t.parent;
                var i = t.neighbor;
                var r = i.parent;
                var n = [];
                if (s) {
                    n.push([t.x + t.w, t.y]);
                    n.push([r.x + i.x - e.x, r.y - e.y + i.y]);
                    n.push([n[1][0], n[1][1] + i.h]);
                    n.push([n[0][0], n[0][1] + t.h])
                } else {
                    n.push([t.x, t.y + t.h]);
                    n.push([n[0][0] + t.w, n[0][1]]);
                    n.push([r.x + i.x + i.w - e.x, n[0][1] + r.y + i.y - e.y - t.y - t.h]);
                    n.push([n[2][0] - i.w, n[2][1]])
                }
                var a = s ? [n[0], n[3]] : [n[0], n[1]];
                a = "M" + a[0] + "L" + (s ? a[0] : a[1]) + "L" + a[1] + "L" + (s ? a[1] : a[0]) + "z";
                var o = n.map(function(t, e) {
                    return (e === 0 ? "M" : "L") + t
                }).join("") + "z";
                I.set(this, {
                    source: a,
                    target: o
                })
            });
            T.on("mouseenter.stacked", function(i) {
                T.filter(function(t) {
                    return t.data.key !== i.data.key
                }).selectAll("rect" + u("bar", true)).transition().style("fill", "#b2c0d1");
                var r = D.selectAll(e.nodeName()).filter(function(t) {
                    return t.data.key === i.data.key
                });
                if (!v) {
                    t.select(this).select("text" + u("bar", true)).style("visibility", "visible");
                    r.select("text" + u("bar", true)).style("visibility", "visible")
                }
                r.select("path").style("visibility", "visible").attr("d", function() {
                    var t = I.get(this);
                    if (t) return t.source
                }).interrupt().transition(f).attr("d", function() {
                    var t = I.get(this);
                    if (t) return t.target
                })
            }).on("mouseleave.stacked", function(i) {
                T.filter(function(t) {
                    return t.data.key !== i.data.key
                }).selectAll("rect" + u("bar", true)).transition().style("fill", function(t) {
                    return t.color
                });
                var r = D.selectAll(e.nodeName()).filter(function(t) {
                    return t.data.key === i.data.key
                });
                if (!v) {
                    t.select(this).select("text" + u("bar", true)).style("visibility", "hidden");
                    r.select("text" + u("bar", true)).style("visibility", "hidden")
                }
                r.select("path").interrupt().transition(f).attr("d", function() {
                    var t = I.get(this);
                    if (t) return t.source
                }).on("end", function() {
                    t.select(this).style("visibility", "hidden")
                })
            })
        }
    }
    var Hr = {
        interval: null,
        max: 100,
        order: "natural"
    };
    var Gr = function(e) {
        a(o, e);

        function o(t) {
            i(this, o);
            var e = s(this, (o.__proto__ || Object.getPrototypeOf(o)).call(this, t));
            v(e, Hr);
            e.setInit(t, ["interval", "max", "order"]);
            return e
        }
        r(o, [{
            key: "domain",
            value: function e() {
                var i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                var r = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
                var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
                var a = this.munged();
                var s = this.level();
                var o = this.order();
                var l = i !== "natural" && n;
                var c = 0;
                var u = [];

                function f(t, e, i) {
                    if (i === s) {
                        var r = e.filter(function(e) {
                            return !t.find(function(t) {
                                return t === e
                            })
                        });
                        return t.concat(r)
                    } else {
                        return t.map(function(t) {
                            t.values = f(t.values, e, i + 1);
                            return t
                        })
                    }
                }

                function h(e, i) {
                    if (i === s) {
                        var n = e.map(r ? r : function(t) {
                            return {
                                key: t.data.key,
                                value: t.value
                            }
                        });
                        if (l) {
                            u = u.concat(n);
                            return d(n, false)
                        } else {
                            return n
                        }
                    } else {
                        if (l) {
                            return e.map(function(t) {
                                return {
                                    key: t.data.key,
                                    values: h(t.children, i + 1)
                                }
                            })
                        } else {
                            return t.merge(e.map(function(t) {
                                return h(t.children, i + 1)
                            }))
                        }
                    }
                }

                function d(t) {
                    var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
                    if (e) t = v(t);
                    if ((!i || i === "natural") && o && o !== "natural") t.sort(O(o, [], true, function(t) {
                        return t.key
                    }));
                    if (i && i !== "natural") t.sort(O(i, [], true, function(t) {
                        return t.value
                    }));
                    return t.map(function(t) {
                        return t.key
                    })
                }

                function v(t) {
                    var e = [];
                    t.forEach(function(t) {
                        if (!e.find(function(e) {
                                return e.key === t.key
                            })) e.push(t)
                    });
                    return e
                }
                var e = h(a, c);
                if (l) {
                    var _ = v(u).map(function(t) {
                        return t.key
                    });
                    c = 0;
                    f(e, _, c)
                } else {
                    e = d(e)
                }
                return e
            }
        }, {
            key: "isInterval",
            value: function t() {
                return this.interval() && this.format()
            }
        }, {
            key: "toObject",
            value: function t() {
                var e = n(o.prototype.__proto__ || Object.getPrototypeOf(o.prototype), "toObject", this).call(this);
                e.interval = this.interval();
                e.max = this.max();
                e.order = this.order();
                return e
            }
        }]);
        return o
    }(E);

    function Xr(t) {
        return new Gr(t)
    }
    _(Gr, Hr);

    function Wr(t, e) {
        var i = this.__execs__.field;
        if (t.length <= 2 && e.length <= 1) {
            if (t.length === 2) {
                i.region = Xr(t[0]);
                i.x = Xr(t[1])
            } else {
                i.x = Xr(t[0])
            }
            if (e.length === 0) {
                this.measure(j)
            }
            i.y = G(e[0]);
            return rn[e.length === 0 ? 1 : 0]
        } else if (t.length <= 1 && e.length >= 2) {
            if (t.length === 1) {
                i.region = Xr(t[0])
            }
            i.x = Xr(this.mixedDimension());
            i.y = G(I).mixed(true).measures(e);
            return rn[2]
        } else throw new A
    }

    function Yr() {
        var t = this;
        this.condition(Wr);
        var e = this.__execs__.field;
        var i = this.isMixed();
        var r = this.diffArrow();
        var n = this.data();
        var a = this.colorDomain();
        if (r) {
            var s = {};
            s[e.x.field()] = "diff-arrow";
            n.splice(r["pos"], 0, s);
            this.data(n);
            a.splice(r["pos"], 0, "diff-arrow");
            this.colorDomain(a)
        }
        if (this.aggregated()) {
            this.__execs__.munged = [this.data()]
        } else {
            if (i) {
                this.__execs__.munged = this.aggregateMixed(this.facet() && !this.stacked())
            } else {
                this.__execs__.munged = this.aggregate(this.facet() && !this.stacked())
            }
            if (!this.isNested()) this.__execs__.munged = [this.__execs__.munged[0].parent]
        }
        if (this.stacked()) {
            if (!e.region) {
                D(this.__execs__.munged, e.y, this.normalized())
            } else {
                var o = void 0;
                this.__execs__.munged.forEach(function(i, r) {
                    if (e.x.order() === "natural") {
                        if (r === 0) o = i.children.map(function(t) {
                            return t.data.key
                        });
                        else i.children.sort(O("ascending", o, true, function(t) {
                            return t.data.key
                        }))
                    }
                    D(i.children, e.y, t.normalized())
                })
            }
        }
    }

    function Zr() {
        if (this.stream()) {
            this.streamPanning(this.__execs__.scale.x)
        }
    }

    function Kr() {
        var t = this.scale();
        var e = this.isNested();
        var i = this.__execs__.field;
        var r = this.axisX();
        var n = this.axisY();
        var a = e ? i.region : i.x;
        var s = this.facet();
        if (this.isFacet()) {
            var o = this.innerSize();
            if (s.orient === "horizontal" && r) {
                r.orient = "top";
                r.showDomain = false;
                this.thickness(r, t.region, true, true);
                if (n) n.thickness = 0
            } else if (s.orient === "vertical" && n) {
                n.orient = "right";
                n.showDomain = false;
                this.thickness(n, t.region, false, true);
                if (r) r.thickness = 0
            }
            if (s.orient === "vertical") {
                t.region.rangeRound([0, o.height])
            } else {
                t.region.rangeRound([0, o.width])
            }
            return this
        }
        if (this.isVertical()) {
            a.axis(r);
            this.thickness(n, t.y, false, false);
            this.thickness(r, e ? t.region : t.x, true, true)
        } else {
            a.axis(n);
            this.thickness(n, e ? t.region : t.x, false, true);
            this.thickness(r, t.y, true, false)
        }
        var l = this.innerSize();
        if (this.isVertical()) {
            if (e) {
                t.region.range([0, l.width]);
                t.x.range([0, t.region.bandwidth()])
            } else {
                t.x.range([0, l.width])
            }
            t.y.range([l.height, 0])
        } else {
            if (e) {
                t.region.range([0, l.height]);
                t.x.range([0, t.region.bandwidth()])
            } else {
                t.x.range([0, l.height])
            }
            t.y.range([0, l.width])
        }
        return this
    }

    function Jr() {
        var t = this.aggregated();
        var e = this.isNested.call(this);
        var i = this.__execs__.scale;
        var r = this.stacked();
        var n = this.facet();
        var a = this.isVertical();
        var s = this.isFacet();
        var o = function s(o) {
            if (t) return;
            var l = e ? [i.region(o.data.key), 0] : [0, 0];
            if (n && !r && n.orient === "vertical") {
                l.reverse()
            } else if (!a && n.orient !== "horizontal") {
                l.reverse()
            }
            var c = l[0];
            var u = l[1];
            o.x = c;
            o.y = u
        };
        this.renderRegion(o, function(t) {
            return t
        }, s)
    }

    function qr() {
        if (!this.tooltip() || this.isFacet()) return;
        var t = this.parent();
        var e = this.isMixed();
        var i = this.__execs__.field;
        var r = this.stacked() && this.isNested() && !this.isFacet();
        var n = this.isVertical();
        var a = this.showDiff() && !this.isNested();
        var s = function t(e, i) {
            return {
                name: "key",
                value: i
            }
        };
        var o = function r(n, a) {
            var s = void 0;
            if (e) {
                s = n.key
            } else if (t && t.isMixed()) {
                s = n.key
            } else {
                s = i.y.field()
            }
            return {
                name: s,
                value: a
            }
        };
        var l = function t(e) {
            var i = e.neighbor;
            var r = [{
                name: (a ? e : e.parent).data.key,
                value: e.text
            }, {
                name: (a ? i : i.parent).data.key,
                value: i.text
            }];
            if (a) r.reverse();
            var n = e.diff ? e.diff.value : i.diff.value;
            r.push({
                name: "(+/-)",
                value: n
            });
            return r
        };
        var c = function t(e) {
            var i = 0,
                a = 0;
            if (r) {
                i = Math.max(-e.x + e.neighbor.x + e.neighbor.w, e.w);
                if (n) {
                    if (e.neighbor.parent.x > e.parent.x) i += Math.abs(e.neighbor.parent.x - e.parent.x) - e.w
                } else {
                    var s = e.neighbor.parent.y - e.parent.y;
                    if (s < 0) {
                        i = e.w
                    } else {
                        a += e.h + (s - e.h) / 2
                    }
                }
            } else {
                i += e.w
            }
            return {
                x: i,
                y: a
            }
        };
        var u = {
            key: s,
            offset: c
        };
        if (r || a) {
            u.value = l;
            u.showDiff = true
        } else {
            u.value = o
        }
        this.renderTooltip(u)
    }

    function Ur(t, e) {
        t.attr("transform", "translate(" + [e.width, 0] + ")")
    }

    function Qr() {
        var e = this.unit();
        var i = this.__execs__.canvas;
        var r = t.transition().duration(this.transition().duration).delay(this.transition().delay);
        var n = this.innerSize();
        var a = this.isVertical();
        if (i.select(".unit-text").empty()) i.append("text").attr("class", "unit-text");
        var s = i.select(".unit-text");
        s.text(e).style("font-family", "Noto Sans KR").style("font-size", "22px").style("font-weight", "600").style("fill", "#C6CBCE").attr("text-anchor", "end").call(Ur, n)
    }

    function $r(t, e) {
        t.attr("transform", "translate(" + [-85, 0] + ")")
    }

    function tn() {
        var e = this.title();
        var i = this.__execs__.canvas;
        var r = t.transition().duration(this.transition().duration).delay(this.transition().delay);
        var n = this.innerSize();
        var a = this.isVertical();
        if (i.select(".title_text").empty()) i.append("text").attr("class", "title_text");
        var s = i.select(".title_text");
        s.text(e).style("font-family", "Noto Sans KR").style("font-size", "40px").style("font-weight", "bold").style("fill", "#FFFFFF").attr("text-anchor", "start").call($r, n)
    }
    var en = ["vertical", "horizontal"];
    var rn = ["normal", "count", "mixed"];
    var nn = {
        annotation: false,
        mono: true,
        orient: en[0],
        padding: .05,
        showDiff: false,
        regionPadding: .1
    };
    var an = function(t) {
        a(e, t);

        function e() {
            i(this, e);
            var t = s(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this));
            t.setAttrs(nn);
            t.process("munge", Yr, {
                isPre: true
            }).process("domain", Br, {
                isPre: true
            }).process("range", Kr, {
                isPre: true
            }).process("unit", Qr).process("title", tn).process("axis", Er).process("region", Jr).process("facet", jr, {
                allow: function t() {
                    return this.isFacet()
                }
            }).process("mark", Vr, {
                allow: function t() {
                    return !this.isFacet()
                }
            }).process("legend", Ir).process("tooltip", qr).process("padding", Zr).process("annotation", Rr);
            return t
        }
        r(e, [{
            key: "measureName",
            value: function t() {
                var e = this.measures();
                var i = void 0;
                if (this.condition() === rn[2]) i = I.field;
                else if (this.aggregated() && e[0].field === I.field) i = e[0].field;
                else i = e[0].field + "-" + e[0].op;
                return i
            }
        }, {
            key: "muteToLegend",
            value: function t(e) {
                this.muteLegend(this.isFacet() ? e.parent.data.key : e.data.key)
            }
        }, {
            key: "muteFromLegend",
            value: function t(e) {
                if (this.isFacet()) this.muteRegions(e.key);
                else this.muteNodes(e.key)
            }
        }, {
            key: "demuteToLegend",
            value: function t(e) {
                this.demuteLegend(this.isFacet() ? e.parent.data.key : e.data.key)
            }
        }, {
            key: "demuteFromLegend",
            value: function t(e) {
                if (this.isFacet()) this.demuteRegions(e.key);
                this.demuteNodes(e.key)
            }
        }, {
            key: "isCount",
            value: function t() {
                return this.condition() === rn[1]
            }
        }, {
            key: "isFacet",
            value: function t() {
                return this.facet() && this.isNested() && !this.stacked()
            }
        }, {
            key: "isMixed",
            value: function t() {
                return this.condition() === rn[2]
            }
        }, {
            key: "isNested",
            value: function t() {
                var e = this.dimensions();
                var i = this.condition();
                return e.length === 2 || i == rn[2] && e.length === 1
            }
        }, {
            key: "isVertical",
            value: function t() {
                return this.orient() === en[0]
            }
        }, {
            key: "isNestedAndSortByValue",
            value: function t() {
                return this.isNested() && this.sortByValue() !== "natural"
            }
        }]);
        return e
    }(x(pr).with(wr, gr, zr, Mr));
    an.prototype.annotation = p("annotation", {
        showLabel: true,
        color: "#477cd2"
    });
    an.prototype.showDiff = p("showDiff", {
        neuFill: "#c0ccda",
        incStroke: "#477cd2",
        incFill: "#40bbfb",
        decStroke: "#f06292",
        decFill: "#f06292"
    });
    an.prototype.mono = d("mono");
    an.prototype.orient = d("orient");

    function sn(t, e) {
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
        var n = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
        var a = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
        var s = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
        var o = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;
        var l = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : false;
        var c = t.level(i).munged(e).aggregated(n).domain(0, a);
        if (c[0] > 0) c[0] = 0;
        else if (c[1] < 0) c[1] = 0;
        if (s && !r) {
            if (c[0] === 0) c[1] *= 1.25;
            else if (c[1] === 0) c[0] *= 1.25
        }
        if (o) {
            if (c[0] === 0) c[1] *= 1.1;
            else if (c[1] === 0) c[0] *= 1.1
        }
        if (l) {
            if (c[0] === 0) c[1] *= 1.25;
            else if (c[1] === 0) c[0] *= 1.25
        }
        return c
    }
    an.prototype.unit = d("unit");
    an.prototype.title = d("title");
    an.prototype.diffArrow = d("diffArrow");
    an.prototype.arrowOnMark = d("arrowOnMark");
    var on = w(an);

    function ln(t) {
        if (!arguments.length) return this.__attrs__.brushGen;
        this.__attrs__.brushGen = t;
        var e = this.__execs__.brushDispatch;
        t.on("start.brushable", function() {
            e.apply("brushStart", this, arguments)
        }).on("brush.brushable", function() {
            e.apply("brushed", this, arguments)
        }).on("end.brushable", function() {
            e.apply("brushEnd", this, arguments)
        });
        return this
    }

    function cn(t, e) {
        var i = this.brushGen();
        t.call(i.move, e);
        return this
    }
    var un = {
        brush: false,
        brushGen: null
    };
    var fn = function e(r) {
        var n = function(e) {
            a(r, e);

            function r() {
                i(this, r);
                var e = s(this, (r.__proto__ || Object.getPrototypeOf(r)).call(this));
                e.setAttrs(un);
                e.__execs__.brush = null;
                e.__execs__.brushDispatch = t.dispatch("brushStart", "brushed", "brushEnd");
                e.rebindOnMethod(e.__execs__.brushDispatch);
                return e
            }
            return r
        }(r);
        n.prototype.brush = d("brush");
        n.prototype.brushGen = ln;
        n.prototype.brushMove = cn;
        return n
    };
    var hn = {
        fitLine: false
    };
    var dn = function t(e) {
        var r = function(t) {
            a(e, t);

            function e() {
                i(this, e);
                var t = s(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this));
                t.setAttrs(hn);
                return t
            }
            return e
        }(e);
        r.prototype.fitLine = d("fitLine");
        return r
    };

    function vn(t) {
        if (!arguments.length || t === false) return this.__attrs__.seriesName;
        else if (typeof t === "boolean" && t) {
            return this.__attrs__.seriesName.split(".").join(" ").trim()
        } else if (typeof t === "string") {
            this.__attrs__.seriesName = t
        }
        return this
    }
    var _n = ["linear", "stepped", "curved"];
    var pn = {
        curve: _n[0],
        point: false,
        pointRatio: 3,
        seriesName: u("mark series", true)
    };
    var mn = function t(e) {
        var r = function(t) {
            a(e, t);

            function e() {
                i(this, e);
                var t = s(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this));
                t.setAttrs(pn);
                return t
            }
            return e
        }(e);
        r.prototype.seriesName = vn;
        r.prototype.curve = d("curve");
        r.prototype.point = d("point");
        r.prototype.pointRatio = d("pointRatio");
        return r
    };

    function gn() {
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        if (e) {
            return t.max(this.__execs__.munged, function(t) {
                return t.children.length
            })
        } else {
            return this.__execs__.munged.length
        }
    }

    function yn(t) {
        var e = ["normal", "brush"];
        if (!arguments.length) return this.__attrs__.zoom;
        if (typeof t === "boolean") {
            if (t) this.__attrs__.zoom = "normal";
            else this.__attrs__.zoom = false
        } else if (typeof t === "string") {
            if (e.indexOf(e.filter(function(e) {
                    return e.localeCompare(t) === 0
                })[0]) >= 0) {
                this.__attrs__.zoom = t
            }
        }
        return this
    }

    function xn() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;
        var r = this.pointNum(t);
        var n = this.__execs__.scale;
        var a = n.x.range();
        var s = Math.abs(a[1] - a[0]);
        if (e) {
            var o = n.y.range();
            var l = Math.abs(o[1] - o[0]);
            if (s > l) s = l
        }
        var c = r * r / s;
        return [1, Math.ceil(c * i)]
    }

    function kn(e) {
        var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var r = this.zoomGen();
        var n = this;
        var a = this.__execs__.field;
        var s = this.__execs__.axis;
        var o = s && s.x ? s.x[a.x.field()] : null;
        var l = this.__execs__.scale;
        var c = l.x;
        var u = i && s && s.y ? s.y[a.y.field()] : null;
        var f = i ? l.y : null;
        var h = function t(e) {
            var r = e.rescaleX(c);
            l.x = r;
            if (o) {
                o.scale(r);
                o.render(null, true)
            }
            if (i) {
                var n = e.rescaleX(f);
                l.y = n;
                if (u) {
                    u.scale(n);
                    u.render(null, true)
                }
            }
        };
        r.on("zoom.zoomable.zoomed", function() {
            var i = t.event.transform;
            if (!i) return;
            h(i);
            if (n.__execs__.tooltip) n.__execs__.tooltip.hide();
            e()
        });
        return this
    }

    function wn(t) {
        if (!arguments.length) return this.__attrs__.zoomGen;
        this.__attrs__.zoomGen = t;
        var e = this;
        var i = e.__execs__.zoomDispatch;
        t.on("zoom.zoomable", function() {
            i.apply("zoom", this, arguments)
        });
        return this
    }

    function bn(t, e) {
        t.call(this.zoomGen().transform, e);
        return this
    }
    var zn = {
        zoom: false,
        zoomGen: null
    };
    var An = function e(r) {
        var n = function(e) {
            a(r, e);

            function r() {
                i(this, r);
                var e = s(this, (r.__proto__ || Object.getPrototypeOf(r)).call(this));
                e.setAttrs(zn);
                e.__execs__.zoom = null;
                e.__execs__.zoomDispatch = t.dispatch("zoom");
                e.rebindOnMethod(e.__execs__.zoomDispatch);
                return e
            }
            return r
        }(r);
        n.prototype.pointNum = gn;
        n.prototype.zoom = yn;
        n.prototype.zoomed = kn;
        n.prototype.zoomExtent = xn;
        n.prototype.zoomGen = wn;
        n.prototype.zoomTransform = bn;
        n.prototype.isBrushZoom = Nn;
        _(n, zn);
        return n
    };

    function Nn() {
        return this.__attrs__.zoom && this.__attrs__.zoom === "brush"
    }
    var Fn = {
        shape: null
    };
    var Sn = function t(e) {
        var r = function(t) {
            a(e, t);

            function e() {
                i(this, e);
                var t = s(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this));
                t.setAttrs(Fn);
                return t
            }
            return e
        }(e);
        r.prototype.shape = d("shape");
        return r
    };

    function On() {
        if (!this.brush()) return;
        var e = this.__execs__.canvas;
        var i = this.innerSize();
        var r = t.brushX().extent([
            [0, 0],
            [i.width, i.height]
        ]);
        var n = e.selectAll(".brush.x").data([i]);
        n.exit().remove();
        n.enter().append("g").attr("class", "brush x").merge(n).attr("transform", "translate(" + [0, 0] + ")").call(r);
        this.brushGen(r)
    }

    function Tn() {
        var t = this.__execs__.field;
        if (!t.region) {
            return
        }
        this.renderLegend()
    }

    function Dn() {
        var e = this;
        var i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : .75;
        this.noAxisOffset(true);
        this.renderCanvas();
        var r = this;
        var n = this.innerSize();
        var a = Math.round(n.height * i);
        var s = n.height - a;
        var o = ["axis", "axisTitles", "color", "curve", "multiTooltip", "normalized", "padding", "point", "pointRatio", "regionPadding", "shape", "size", "stacked", "grid", "font", "label", "tooltip"].map(function(t) {
            return {
                key: t,
                value: e[t]()
            }
        });
        var l = [];
        var c = function t(e, i) {
            e.x = 0;
            e.y = i === 0 ? 0 : a
        };
        var u = this.renderRegion(c, [{
            h: a
        }, {
            h: s
        }], true);
        u.each(function(t, e) {
            var i = ka().container(this).data(r.data()).dimensions(r.dimensions()).measures(r.measures()).width(n.width).height(t.h).legend(false).zeroMargin(true).parent(r);
            o.forEach(function(t) {
                return i[t.key](t.value)
            });
            if (e == 0) {
                var a = i.axis().find(function(t) {
                    return t.target === "x"
                });
                if (a) a.showTitle = false;
                i.brush(false).zoom("normal")
            } else {
                i.multiTooltip(false).tooltip(false).brush(true).point(false)
            }
            i.render();
            l.push(i)
        });
        if (this.isNested()) {
            var f = this.__execs__.field.region.munged(this.__execs__.munged).level(0).domain();
            this.scale().color = t.scaleOrdinal().domain(f).range(this.color());
            Tn.call(this)
        }
        var h = l[1].__execs__.scale.x;
        var d = l[1].__execs__.canvas.select(".brush.x");
        var v = l[0].__execs__.scale.x;
        var _ = this.__execs__.canvas;
        l[0].on("zoom.line", function() {
            if (t.event.sourceEvent && (t.event.sourceEvent.type === "zoom" || t.event.sourceEvent.type === "end" || t.event.sourceEvent.type === "brush")) return;
            var e = t.event.transform.rescaleX(h).domain();
            l[1].brushMove(d, e.map(h))
        });
        l[1].on("brushed.line brushEnd.line", function() {
            if (t.event.sourceEvent && t.event.sourceEvent.type === "brush") return;
            var e = t.event.selection || h.range();
            var i = e.map(h.invert);
            e = i.map(v);
            l[0].zoomTransform(_, t.zoomIdentity.scale((v.range()[1] - v.range()[0]) / (e[1] - e[0])).translate(-e[0], 0))
        })
    }

    function Pn() {
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var i = this;
        var r = this.__execs__.canvas;
        var n = this.__execs__.field;
        var a = this.isNested.call(this);
        var s = this.__execs__.scale;
        var o = this.isStacked();
        var l = this.color();
        var f = this.label();
        var h = this.isIndividualScale();
        var d = this.size();
        var v = this.point();
        var _ = this.pointRatio();
        var p = e ? t.transition().duration(0).delay(0) : t.transition().duration(this.transition().duration).delay(this.transition().delay);
        var m = this.shape() === pa[1];
        var g = this.measureName();
        var y = this.curve() === _n[0] ? t.curveLinear : this.curve() === _n[1] ? t.curveStep : t.curveCatmullRom;
        var x = this.scaleBandMode();
        var k = this.multiTooltip();
        var w = this.stream();
        var b = this.diffWithArrow();
        var z = this.downArrowPath();
        var A = this.upArrowPath();
        var N = this.font();
        var F = function t(e) {
            return n.x.interval() ? new Date(e.data.key) : e.data.key
        };
        var S = function t(e) {
            return s.x(F(e)) + (x ? s.x.bandwidth() / 2 : 0)
        };
        var O = function t(e) {
            return function(t) {
                return o ? e(t.data.value[g + "-end"]) : e(t.data.value[g])
            }
        };
        var T = t.line().x(S).y(t.max(s.y.range())).curve(y);
        var D = function e(i) {
            return t.line().x(S).y(O(i)).curve(y)
        };
        var P = t.area().x(S).y(t.max(s.y.range())).curve(y);
        var M = function e(i) {
            return t.area().x(S).y0(function(e) {
                return o ? s.y(e.data.value[g + "-start"]) : t.max(s.y.range())
            }).y1(O(i)).curve(y)
        };
        var L = function e(r) {
            var a = function e(i) {
                var r = n.x.isInterval() ? t.timeFormat(n.x.format()) : null;
                return r ? r(i) : i
            };
            r.each(function(t, e, r) {
                t.value = o ? t.data.value[g + "-end"] : t.data.value[g];
                t.x = S(t);
                if (isNaN(t.x) && s.x._defaultDomain) {
                    t.x = i.tempPosForOrdinalScale(F(t), s.x)
                }
                if (w) {
                    var n = F(t);
                    if (s.x.invert) {
                        var l = i.distDomain(s.x);
                        if (n > s.x._lastDomain[s.x._lastDomain.length - 1]) {
                            t.x0 = t.x + l
                        }
                    } else {
                        t.x0 = i.tempPosForOrdinalScale(F(t), s.x)
                    }
                }
                t.y = O(h ? t.parent.scale : s.y)(t);
                t.anchor = e === 0 ? "start" : e === r.length - 1 ? "end" : "middle";
                t.text = c(t.value);
                t.color = t.parent.color;
                t.key = a(t.data.key)
            })
        };
        var C = function t(e) {
            e.each(function(t, e, i) {
                var r = true;
                if (e < i.length - 1 && i[e + 1]) {
                    var n = i[e + 1];
                    r = n.y <= t.y
                }
                t.upward = r
            })
        };
        var R = function e(i) {
            var r = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            if (r) {
                i.each(function(e) {
                    var i = e.children;
                    t.select(this).attr("d", P(i)).attr("fill-opacity", .4).style("stroke", "none")
                })
            } else {
                console.log("selection", i);
                i.each(function(e) {
                    var i = e.children;
                    t.select(this).attr("d", T(i)).style("fill", "none");
                    var r = i.map(function(t) {
                        return t.value
                    });
                    e.diff = r[r.length - 1] - r[r.length - 2];
                    e.y = O(s.y)(e.children[e.children.length - 1]);
                    e.x = S(e.children[e.children.length - 1]);
                    console.log("diff", e.diff)
                })
            }
        };
        var E = function e(r) {
            var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var o = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var c = function t(e) {
                return a ? s.color(e.data.key) : l[0]
            };
            var u = o && i.distDomain(s.x);
            r.each(function(e) {
                var i = e.children;
                var r = t.select(this);
                if (o) {
                    r.attr("d", (n ? M : D)(h ? e.scale : s.y)(i)).attr("transform", "translate(" + u + ",0)").transition(p).attr("transform", "translate(0,0)")
                } else {
                    r.transition(p).attr("d", (n ? M : D)(h ? e.scale : s.y)(i))
                }
            });
            if (n) {
                r.attr("fill", c).attr("stroke", "none")
            } else {
                r.attr("stroke", c).attr("stroke-width", d.range[0] + "px")
            }
        };
        var B = function e(i) {
            i.attr("r", (d.range[0] - d.range[0] / 4) * _).attr("stroke-width", d.range[0] / 4 * _).attr("opacity", v ? 1 : 0).style("cursor", "pointer").attr("cx", function(t) {
                return t.x0 || t.x
            }).attr("cy", function(e) {
                return w ? e.y : t.max(s.y.range())
            })
        };
        var j = function t(e) {
            e.transition(p).attr("r", (d.range[0] - d.range[0] / 4) * _).attr("stroke-width", d.range[0] / 4 * _).attr("opacity", v ? 1 : 0).attr("cx", function(t) {
                return t.x
            }).attr("cy", function(t) {
                return t.y
            })
        };
        var I = function e(r) {
            r.each(function(e) {
                var r = t.select(this);
                r.attr("x", function(t) {
                    return t.x0 || t.x
                }).attr("y", function(e) {
                    return w ? e.y : t.max(s.y.range())
                }).attr("stroke", "none").style("fiil", "#ffffff").style("visibility", f ? "visible" : "hidden").text(e.text);
                i.styleFont(r)
            })
        };
        var V = function e(r) {
            r.each(function(e) {
                var r = t.select(this); {
                    if (e.anchor == "end") {
                        e.anchor = "start";
                        e.x += 15;
                        e.text += "  " + e.parent.data.key
                    } else if (e.anchor == "start") {
                        e.anchor = "end";
                        e.x -= 15
                    }
                }
                r.attr("text-anchor", e.anchor).style("pointer-events", k ? "none" : "all").transition(p).attr("y", e.y + N["font-size"] * .75 / 2).attr("x", e.x).style("fill", "#ffffff").style("visibility", f ? "visible" : "hidden").text(e.text);
                i.styleFont(r)
            })
        };
        var H = function t(e) {
            var r = e.select(i.seriesName());
            if (r.empty()) {
                r = e.append("g").attr("class", i.seriesName(true))
            }
            var n = function t(e, i) {
                var r = e.selectAll("path" + u(i ? "area" : "line", true)).data(function(t) {
                    return [t]
                }, function(t, e) {
                    return t.data ? t.data.key : e
                });
                r.exit().remove();
                r.enter().append("path").attr("class", u(i ? "area" : "line")).call(R, i).merge(r).call(E, i, w).style("pointer-events", "none")
            };
            if (m) {
                r.call(n, true)
            } else {
                r.selectAll("path" + u("area", true)).remove()
            }
            r.call(n, false)
        };
        var G = function t(e) {
            e.attr("fill", function(t) {
                return t.color
            }).attr("stroke", function(t) {
                return t.color
            });
            var r = e.selectAll(i.nodeName()).data(function(t) {
                return t.children
            }, function(t) {
                return t.data.key
            });
            r.exit().remove();
            var n = r.enter().append("g").attr("class", i.nodeName(true)).call(L);
            n.append("circle").call(B);
            n.append("text").call(I);
            r.call(L);
            r = n.merge(r).call(C);
            r.select("circle").call(j);
            r.select("text").call(V)
        };
        var X = function e(r) {
            var n = r.select(i.seriesName(true) + "arrow");
            if (n.empty()) {
                n = r.append("g").attr("class", i.seriesName(true) + "arrow")
            }
            n.append("svg:image").attr("class", u("markarrow"));
            n.append("text").attr("class", u("markarrow"));
            var a = r.select(i.seriesName());
            var s = {};
            a.each(function(t, e, i) {
                s = {
                    value: t.diff,
                    x: t.x + 125,
                    y: t.y - 10,
                    h: 20,
                    w: 20,
                    text: c(t.diff, true)
                }
            });
            var o = t.select(this);
            n.select("image" + u("markarrow", true)).datum(s).attr("x", s.x).attr("y", s.y).attr("height", s.h).attr("width", s.w).attr("xlink:href", s.value < 0 ? z : A);
            n.select("text" + u("markarrow", true)).datum(s).attr("x", s.x + 25).attr("y", s.y + 15).attr("height", s.h).attr("width", s.w).text(s.text)
        };
        var W = r.selectAll(this.regionName());
        W.each(function() {
            t.select(this).each(function(t) {
                t.children.sort(function(t, e) {
                    return S(t) - S(e)
                })
            }).call(H).call(G)
        });
        if (b) {
            W.each(function() {
                t.select(this).each(function(t) {
                    t.children.sort(function(t, e) {
                        return S(t) - S(e)
                    })
                }).call(X)
            })
        }
    }

    function Mn() {
        var e = this;
        var i = function t(e, i) {
            var r = this.__execs__.field;
            if (e.length <= 2 && i.length < 2) {
                if (e[1]) r.region = Xr(e[1]);
                r.x = Xr(e[0]);
                if (i.length === 0) this.measure(j);
                r.y = G(i[0]);
                if (i.length === 0) return ma[1];
                else if (i.length === 1) return ma[0]
            } else if (e.length === 1 && i.length >= 2) {
                r.region = Xr(this.mixedDimension());
                r.x = Xr(e[0]);
                r.y = G(I).mixed(true).measures(i);
                return ma[2]
            } else throw new A
        };
        this.condition(i);
        var r = this.__execs__.field;
        var n = this.isMixed();
        if (this.aggregated()) {
            this.__execs__.munged = [this.data()]
        } else if (n) {
            this.__execs__.munged = this.aggregateMixed(true)
        } else {
            this.__execs__.munged = this.aggregate(true);
            if (!this.isNested()) {
                this.__execs__.munged = [this.__execs__.munged[0].parent]
            }
        }
        var a = this.diffWithArrow();
        if (this.isStacked()) {
            var s = this.__execs__.munged;
            var o = s[0].children.map(function(t) {
                return t.data.key
            });
            s.forEach(function(t, e) {
                if (e > 0) {
                    t.children.sort(O("ascending", o, true, function(t) {
                        return t.data.key
                    }))
                }
            });
            var l = s.map(function(t) {
                return t.children
            });
            l = t.zip.apply(null, l);
            l.forEach(function(t) {
                D(t, r.y, e.normalized())
            })
        }
    }

    function Ln() {
        if (this.stream()) {
            this.streamPanning(this.__execs__.scale.x)
        }
    }

    function Cn(e, i) {
        var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var n = i.field();
        var a = e.children.map(function(t) {
            return t.data.value[n]
        });
        a = t.extent(a);
        if (r <= 0) return a;
        var s = Math.abs(a[0] - a[1]);
        s *= r * .5;
        return [a[0] - s, a[1] + s]
    }

    function Rn() {
        var e = this;
        var i = this.keep();
        var r = this.scale();
        var n = this.__execs__.munged;
        var a = this.isNested();
        var s = this.isStacked();
        var o = this.aggregated();
        var l = this.__execs__.field;
        var c = 1;
        var u = this.isMixed();
        var f = this.isIndividualScale();
        var h = this.viewInterval();
        var d = void 0,
            v = void 0;
        var _ = void 0;
        r.y = t.scaleLinear();
        if (a) {
            _ = l.region.level(0).munged(n).domain();
            r.color = this.updateColorScale(_, i)
        }
        if (this.isFacet()) {
            r.region = t.scaleBand().domain(_).padding(this.regionPadding());
            return
        }
        v = l.x.munged(n).level(c).domain();
        d = xa(l.y, n, c, o, s);
        var p = true;
        for (var m = 0; m < v.length; m++) {
            var g = v[m];
            if (isNaN(g)) {
                p = false;
                break
            } else if (typeof g === "string") {
                v[m] = +g
            }
        }
        if (this.scaleBandMode()) {
            if (!i) r.x = t.scaleBand().padding(this.padding())
        } else if (l.x.interval() || p) {
            if (l.x.order() === "natural") {
                if (v[0] instanceof Date) v = t.extent(v);
                else v = t.extent(v.map(function(t) {
                    return +t
                }))
            } else {
                v = [v[0], v[v.length - 1]]
            }
            if (!i) r.x = P(v, null, l.x)
        } else {
            if (!i) r.x = t.scalePoint().padding(this.padding())
        }
        if (!i && h) {
            v = this.limitViewInterval(r.x, v)
        } else if (i && this.stream()) {
            v = this.limitViewInterval(r.x, v, true)
        }
        r.x.domain(v);
        this.setCustomDomain("y", d);
        if (u && f) {
            n.forEach(function(i) {
                var r = Cn(i, l.y, e.padding());
                i.scale = t.scaleLinear().domain(r).nice();
                i.scale._defaultDomain = r;
                if (e.isMixed()) {
                    var n = e.measures().find(function(t) {
                        return t.field === i.data.key
                    });
                    if (n && n.customDomain) {
                        i.scale._defaultDomain = r;
                        i.scale.domain(n.customDomain)
                    }
                }
            })
        }
        return this
    }

    function En() {
        var t = this.scale();
        var e = this.__execs__.munged;
        var i = this.isIndividualScale();
        var r = this.facet();
        var n = this.isMixed();
        var a = this.axisX();
        var s = this.axisY();
        if (this.isFacet()) {
            if (r.orient === "horizontal" && a) {
                a.orient = "top";
                a.showDomain = false;
                this.thickness(a, t.region, true, true);
                if (s) s.thickness = 0
            } else if (r.orient === "vertical" && s) {
                s.orient = "right";
                s.showDomain = false;
                this.thickness(s, t.region, false, true);
                if (a) a.thickness = 0
            }
            var o = this.innerSize();
            if (r.orient === "vertical") {
                t.region.rangeRound([0, o.height])
            } else {
                t.region.rangeRound([0, o.width])
            }
            return
        }
        if (n && i && s) {
            s.orient = "left";
            this.thickness(s, e[0].scale, false, false);
            var l = Object.assign({}, s);
            l.orient = "right";
            this.axis(l);
            this.thickness(l, e[e.length - 1].scale, false, false)
        } else if (s) {
            var c = this.axis().find(function(t) {
                return t.target === "y" && t.orient !== s.orient
            });
            if (c) this.axis(c, false);
            this.thickness(s, t.y, false, false)
        }
        this.thickness(a, t.x, true, t.x.invert ? false : true);
        var u = this.innerSize();
        t.x.range([0, u.width]);
        if (t.x.invert && !this.scaleBandMode()) {
            var f = t.x.domain();
            var h = this.padding();
            h = u.height * h / 2;
            var d = u.width - h;
            if (f[0] === f[1] || f[1] - f[0] === 0) {
                var v = (h + d) / 2;
                t.x.range([v, v])
            } else {
                t.x.range([h, d])
            }
        } {
            var _ = 0;
            var p = u.width - _;
            t.x.range([_ + 100, p - 200])
        }
        t.y.range([u.height, 0]);
        if (i) {
            e.forEach(function(t) {
                t.scale.range([u.height, 0])
            })
        }
        return this
    }

    function Bn() {
        var t = this;
        var e = this.__execs__.munged;
        var i = this.__execs__.scale;
        var r = this.grid();
        var n = this.isIndividualScale();
        var a = this.innerSize();
        var s = this.__execs__.field;
        var o = this.font();
        var l = function e(n) {
            s.x.axis(n);
            var l = t.axisDefault(i.x, n);
            l.font(o);
            if (i.x.invert) l.grid(r).gridSize(a.height);
            if (n.orient === "bottom") l.y(i.y.range()[0]);
            return l
        };
        var c = function e(n) {
            var l = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : i.y;
            var c = arguments[2];
            if (!c) {
                s.y.axis(n)
            } else {
                n.field = c
            }
            var u = t.axisDefault(l, n);
            u.font(o);
            u.grid(r).gridSize(a.width);
            if (n.orient === "right") u.x(i.x.range()[1]);
            return u
        };
        var u = this.axisX();
        var f = this.axisY();
        if (this.isFacet()) {
            this.axisFacet()
        } else {
            if (u) {
                l(u)
            }
            if (f) {
                if (n) {
                    var h = this.axis().filter(function(t) {
                        return t.target === "y"
                    });
                    if (e.length <= 2) {
                        h.forEach(function(t, i) {
                            return c(t, e[i].scale, e[i].data.key)
                        })
                    }
                } else {
                    c(f)
                }
            }
        }
        this.renderAxis()
    }
    var jn = "#aaa";

    function In() {
        var e = this.__execs__.canvas;
        var i = e.select(".mean-line-g");
        if (!(typeof this.meanLine() === "number") && (!this.meanLine() || this.isFacet())) {
            i.remove();
            return
        }
        var r = this.meanLine();
        var n = [];
        var a = this.__execs__.scale;
        var s = t.transition().duration(this.transition().duration).delay(this.transition().delay);
        if (typeof r === "number") {
            var o = a.y.domain();
            if (r >= o[0] && r <= o[1]) {
                n.push({
                    value: r,
                    y: a.y(r)
                })
            }
        } else {
            this.regions().filter(function(t) {
                if (typeof r === "string") {
                    return t.data.key === r
                } else {
                    return true
                }
            }).each(function(e) {
                var i = {
                    value: t.mean(e.children, function(t) {
                        return t.value
                    })
                };
                i.y = a.y(i.value);
                n.push(i)
            })
        }
        if (i.empty) {
            i = e.append("g").attr("class", "mean-line-g")
        }
        var l = i.selectAll(".mean-line").data(n);
        l.exit().remove();
        var c = l.enter().append("g").attr("class", "mean-line").attr("transform", "translate(" + [0, a.y.range()[0]] + ")").style("pointer-events", "none");
        c.append("line").attr("stroke", jn).attr("shape-rendering", "crispEdges").attr("stroke-width", "2px").attr("x2", a.x.range()[1]);
        l = c.merge(l).transition(s).attr("transform", function(t) {
            return "translate(" + [0, t.y] + ")"
        });
        l.select("line").transition(s).attr("x2", a.x.range()[1])
    }

    function Vn() {
        var t = this.aggregated();
        var e = this.__execs__.canvas;
        var i = this.isNested();
        var r = this.__execs__.scale;
        var n = this.stacked();
        var a = this.facet();
        var s = this.isFacet();
        var o = this.color();
        var l = function e(s) {
            if (t) return;
            var l = void 0;
            if (!i) {
                l = [0, 0]
            } else if (a && !n) {
                l = [r.region(s.data.key), 0];
                if (a.orient === "vertical") {
                    l.reverse()
                }
            } else {
                l = [0, 0]
            }
            s.x = l[0];
            s.y = l[1];
            s.color = i ? r.color(s.data.key) : o[0]
        };
        if (!s && this.multiTooltip()) {
            var c = e.select(".multi-tooltip-g");
            if (c.empty()) c = e.append("g").attr("class", "multi-tooltip-g")
        }
        this.renderRegion(l, function(t) {
            var e = n ? t.slice().reverse() : t;
            return e
        }, s)
    }

    function Hn() {
        var t = this;
        var e = this;
        var i = this.__execs__.scale;
        var r = this.facet();
        var n = this.__execs__.canvas;
        var a = this.innerSize();
        var s = [this.dimensions()[0]];
        var o = this.isMixed() ? [I] : this.measures();
        var l = void 0,
            c = void 0;
        var u = ["axisTitles", "curve", "meanLine", "multiTooltip", "normalized", "padding", "point", "pointRatio", "regionPadding", "shape", "size", "grid", "font", "label"].map(function(e) {
            return {
                key: e,
                value: t[e]()
            }
        });
        var f = this.axisX();
        var h = this.axisY();
        var d = [];
        var v = function t(r) {
            var n = ka().container(this).data(r).dimensions(s).measures(o).width(l).height(c).legend(false).tooltip(false).parent(e).zeroMargin(true).aggregated(true).color(i.color(r.data.key));
            u.forEach(function(t) {
                return n[t.key](t.value)
            });
            if (h) n.axis({
                target: "y",
                orient: "left"
            });
            if (f) n.axis({
                target: "x",
                orient: "bottom"
            });
            n.render();
            d.push(n)
        };
        if (r.orient === "horizontal") {
            l = i.region.bandwidth();
            c = a.height
        } else {
            l = a.width;
            c = i.region.bandwidth()
        }
        n.selectAll(".facet").each(v);
        d.forEach(function(t) {
            t.on("selectStart.facet selectMove.facet selectEnd.facet", function(e) {
                d.forEach(function(i) {
                    if (i !== t) {
                        i.showMultiTooltip(e)
                    }
                })
            })
        })
    }
    var Gn = "#c0ccda";

    function Xn() {
        var e = this.__execs__.canvas;
        var i = this.__execs__.scale;
        var r = t.transition().duration(this.transition().duration).delay(this.transition().delay);
        var n = this.fitLine();
        var a = e.selectAll(u("fit-line-g", true));
        if (!n || !i.x.invert) {
            if (!a.empty()) e.select(u("fit-line-g", true)).remove();
            return
        }
        var s = this.leastSquare(n);
        var o = i.x.domain();
        var l = s.map(function(t) {
            return o.map(function(e) {
                return t.slope * e + t.intercept
            })
        });
        if (a.empty()) {
            a = e.append("g").attr("class", u("fit-line-g")).attr("clip-path", "url(#" + e.selectAll(u("canvas-g-clip-path", true)).attr("id"))
        }
        a.datum(l);
        var c = a.selectAll(u("fit-line", true)).data(function(t) {
            return t
        });
        c.exit().remove();
        var f = c.enter().append("line").attr("class", u("fit-line")).style("fill", "none").style("stroke", Gn).style("stroke-width", 1).attr("x1", i.x(o[0])).attr("x2", i.x(o[1])).attr("y1", function(t) {
            return (t.scale ? t.scale : i.y).range()[0]
        }).attr("y2", function(t) {
            return (t.scale ? t.scale : i.y).range()[0]
        });
        c = f.merge(c);
        c.transition(r).attr("x1", i.x.range()[0], i.x(o[0])).attr("x2", i.x(o[1])).attr("y1", function(t) {
            return (t.scale ? t.scale : i.y)(t[0])
        }).attr("y2", function(t) {
            return (t.scale ? t.scale : i.y)(t[1])
        })
    }
    var Wn = {
        "font-family": "sans-serif",
        "font-size": 12,
        "font-weight": "normal",
        "font-style": "normal"
    };
    var Yn = "#fff";
    var Zn = "#b0bec5";
    var Kn = {
        anchor: {
            x: "left",
            y: "top"
        },
        color: Zn,
        dx: 0,
        dy: 0,
        height: null,
        font: Wn,
        nodeName: u("mark node", true),
        tooltip: null,
        target: null,
        keyFormat: null,
        valueFormat: null,
        width: null,
        sortByValue: {
            type: "natural"
        },
        x: 0,
        y: 0
    };
    var Jn = function e() {
        i(this, e);
        this.__attrs__ = JSON.parse(JSON.stringify(Kn));
        this.__execs__ = {
            tooltip: null,
            domain: null,
            dispatch: t.dispatch("start", "move", "end")
        };
        this.valueFormat(c);
        f(this, this.__execs__.dispatch)
    };

    function qn() {
        return new Jn
    }

    function Un(e) {
        var i = this;
        var r = this.__execs__.domain;
        var n = this.__execs__.dispatch;
        var a = t.bisector(function(t) {
            return t.x
        }).right;
        var s = null;
        var o = function o() {
            var l = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
            var c = e.node().getBoundingClientRect().left;
            var u = t.event.x - c;
            var f = a(r, u);
            if (f > 0 && f < r.length) {
                var h = Math.abs(u - r[f - 1].x);
                var d = Math.abs(r[f].x - u);
                if (h < d) f = f - 1
            }
            f = Math.max(0, Math.min(r.length - 1, f));
            var v = r[f];
            if (!s || v.x !== s.x || l) {
                ea.call(i, e, v);
                n.call(l ? "start" : "move", this, v);
                s = v
            }
        };
        e.on("mouseenter.multi-tooltip", function() {
            o(true)
        }).on("mousemove.multi-tooltip", function() {
            o(false)
        }).on("mouseleave.multi-tooltip", function() {
            $n.call(i, e);
            n.call("end", this);
            s = null
        })
    }

    function Qn() {
        var t = this.target();
        var e = t.__execs__.canvas.selectAll(this.nodeName());
        var i = [];
        e.each(function(t) {
            var e = i.find(function(e) {
                return e.x === t.x
            });
            if (e) {
                e.points.push(this)
            } else {
                i.push({
                    x: t.x,
                    points: [this],
                    value: t.key
                })
            }
        });
        this.__execs__.domain = i.sort(function(t, e) {
            return t.x - e.x
        })
    }

    function $n(e) {
        var i = t.transition().duration(180);
        e.select(u("baseline", true)).transition(i).attr("opacity", 0);
        var r = this.target();
        var n = r.nodes().filter(function() {
            return t.select(this).classed(u("show"))
        }).classed(u("show"), false).selectAll("circle");
        if (!r.point()) n.attr("opacity", 0);
        else n.style("fill", Yn);
        if (this.tooltip()) this.tooltip().hide()
    }

    function ta(t) {
        var e = this.target().innerSize();
        t.style("fill", "none");
        var i = t.select(u("overlay", true));
        if (i.empty()) {
            i = t.append("rect").attr("class", u("overlay")).style("cursor", "crosshair");
            t.append("line").attr("class", u("baseline")).attr("opacity", 0).attr("shape-rendering", "crispEdges").attr("pointer-events", "none")
        }
        t.select(u("baseline", true)).attr("y1", 0).attr("y2", this.height() ? this.height() : e.height).attr("stroke", Zn);
        i.attr("width", this.width() ? this.width() : e.width).attr("height", this.height() ? this.height() : e.height);
        Qn.call(this);
        Un.call(this, t);
        this.__execs__.tooltip = t
    }

    function ea(e, i) {
        var r = t.transition().duration(140);
        var n = this.target();
        var a = [];
        if (!n.point()) {
            n.__execs__.canvas.selectAll(this.nodeName()).selectAll("circle").transition(r).attr("opacity", 0)
        } else {
            n.__execs__.canvas.selectAll(this.nodeName()).selectAll("circle").transition(r).style("fill", Yn)
        }
        var s = t.selectAll(i.points).each(function(t) {
            var e = t.x;
            if (e === i.x) {
                a.push({
                    key: t.key,
                    x: t.x,
                    y: t.y,
                    text: t.text
                })
            }
        });
        s.classed(u("show"), true).selectAll("circle").transition(r).attr("opacity", 1).style("fill", function(t) {
            return t.color
        });
        var o = e.select(u("baseline", true));
        o.transition(r).attr("opacity", 1).attr("x1", i.x + .5).attr("x2", i.x + .5);
        var l = this.tooltip();
        var c = void 0,
            f = [];
        var h = [];
        t.selectAll(i.points).each(function(t) {
            var e = l.__execs__.mark.get(this);
            c = e.x;
            f.push(e.y);
            h.push(t)
        });
        aa(h, this.sortByValue());
        h = h.map(function(t) {
            return {
                name: t.parent.data.key || t.data.key,
                value: t.text
            }
        });
        if (this.keyFormat()) {
            var d = this.keyFormat();
            h.forEach(function(t) {
                if (t.name instanceof Date || typeof t.name === "number") t.name = d(t.name)
            })
        }
        f = t.mean(f);
        f = Math.round(f);
        if (c && f) {
            var v = i.value;
            if (this.keyFormat() && (v instanceof Date || typeof v === "number")) v = this.keyFormat()(v);
            l.x(c).y(f).key({
                name: "key",
                value: v
            }).value(h).show()
        } else {
            l.hide()
        }
    }

    function ia() {
        $n.call(this, this.__execs__.tooltip);
        t.dispatch.call("end", this)
    }

    function ra(e) {
        e = t.select(e);
        ta.call(this, e)
    }

    function na(t) {
        var e = this.__execs__.tooltip;
        var i = this.__execs__.domain;
        if (t !== undefined && t !== null) {
            var r = i.find(function(e) {
                return e.value == t.value
            });
            ea.call(this, e, {
                x: r ? r.x : t.x,
                points: r ? r.points : null,
                value: r ? r.value : null
            })
        } else {
            $n.call(this, e)
        }
    }

    function aa(e) {
        var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "natural";
        var r = ["natural", "ascending", "descending"];
        if (r.find(function(t) {
                return t === i
            })) {
            if (e.length > 0) {
                if (i === r[1]) {
                    e.sort(function(e, i) {
                        return t.ascending(e.value, i.value)
                    })
                } else if (i === r[2]) {
                    e.sort(function(e, i) {
                        return t.descending(e.value, i.value)
                    })
                }
            }
        }
    }
    Jn.prototype.hide = ia;
    Jn.prototype.render = ra;
    Jn.prototype.tick = na;
    _(Jn, Kn);

    function sa() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var e = this.parent();
        var i = this.__execs__.field;
        var r = this.isMixed();
        var n = function t(e, i) {
            return {
                name: "key",
                value: i
            }
        };
        var a = function t(n, a) {
            var s = void 0;
            if (r) {
                s = n.key
            } else if (e && e.isMixed()) {
                s = n.key
            } else {
                s = i.y.field()
            }
            return {
                name: s,
                value: a
            }
        };
        return this.renderTooltip({
            dx: this.size().range[0] + 4,
            value: a,
            key: n
        }, t)
    }

    function oa() {
        var t = this.__execs__.canvas;
        var e = this.__execs__.field;
        var i = t.select(u("multi-tooltip-g", true));
        if (i.empty()) i = t.append("g").attr("class", u("multi-tooltip-g"));
        var r = sa.call(this, true);
        var n = qn().target(this).dx(this.size().range[0]).dy(this.size().range[0]).color(this.color()[0]).tooltip(r).sortByValue(this.multiTooltip().sortByValue).keyFormat(e.x.format());
        n.render(i.node());
        this.__execs__.tooltip = n;
        var a = this.__execs__.multiTooltipDispatch;
        n.on("start", function(t) {
            a.call("selectStart", this, t);
            a.call("multiTooltip", this, t)
        }).on("move", function(t) {
            a.call("selectMove", this, t);
            a.call("multiTooltip", this, t)
        }).on("end", function() {
            a.call("selectEnd", this);
            a.call("multiTooltip", this)
        });
        return n
    }

    function la() {
        if (!this.isFacet() && this.multiTooltip()) oa.call(this);
        else if (this.tooltip() && !this.multiTooltip()) sa.call(this, false)
    }

    function ca() {
        var e = this;
        var i = this.__execs__.scale.x;
        if (!i.invert) return;
        var r = this.__execs__.canvas;
        var n = this.zoomExtent(this.isNested());
        var a = this.parent();
        var s = t.zoom().scaleExtent(n).translateExtent([
            [0, 0],
            [(a ? a : this).width(), (a ? a : this).height()]
        ]);
        r.call(s);
        this.zoomGen(s).zoomed(function() {
            Pn.call(e, true);
            e.resetTooltip();
            la.call(e)
        })
    }

    function ua() {
        if (this.stream()) {
            this.streamPanning(this.__execs__.scale.x)
        }
        if (!this.zoom()) return;
        if (this.zoom() === "normal") ca.call(this)
    }

    function fa(t, e) {
        t.attr("transform", "translate(" + [e.width, 0] + ")")
    }

    function ha() {
        var e = this.unit();
        var i = this.__execs__.canvas;
        var r = t.transition().duration(this.transition().duration).delay(this.transition().delay);
        var n = this.innerSize();
        if (i.select(".unit-text").empty()) i.append("text").attr("class", "unit-text");
        var a = i.select(".unit-text");
        a.text(e).style("font-family", "Noto Sans KR").style("font-size", "22px").style("font-weight", "600").style("fill", "#C6CBCE").attr("text-anchor", "end").call(fa, n)
    }

    function da(t, e) {
        t.attr("transform", "translate(" + [-85, 0] + ")")
    }

    function va() {
        var e = this.title();
        var i = this.__execs__.canvas;
        var r = t.transition().duration(this.transition().duration).delay(this.transition().delay);
        var n = this.innerSize();
        if (i.select(".title_text").empty()) i.append("text").attr("class", "title_text");
        var a = i.select(".title_text");
        a.text(e).style("font-family", "Noto Sans KR").style("font-size", "40px").style("font-weight", "bold").style("fill", "#FFFFFF").attr("text-anchor", "start").call(da, n)
    }
    var _a = {
        range: [2, 2],
        scale: "linear",
        reverse: false
    };
    var pa = ["line", "area"];
    var ma = ["normal", "count", "mixed"];
    var ga = {
        meanLine: false,
        multiTooltip: false,
        padding: 0,
        pointRatio: 2,
        regionPadding: .1,
        shape: pa[0],
        scaleBandMode: false,
        size: _a,
        individualScale: false,
        diffWithArrow: false
    };
    var ya = function(o) {
        a(l, o);

        function l() {
            i(this, l);
            var e = s(this, (l.__proto__ || Object.getPrototypeOf(l)).call(this));
            e.setAttrs(ga);
            e.__execs__.multiTooltipDispatch = t.dispatch("selectStart", "selectMove", "selectEnd", "multiTooltip");
            e.rebindOnMethod(e.__execs__.multiTooltipDispatch);
            e.process("munge", Mn, {
                isPre: true
            }).process("brushZoom", Dn, {
                isPre: true,
                allow: function t() {
                    return this.isBrushZoom()
                }
            }).process("domain", Rn, {
                isPre: true,
                allow: function t() {
                    return !this.isBrushZoom()
                }
            }).process("range", En, {
                isPre: true,
                allow: function t() {
                    return !this.isBrushZoom()
                }
            }).process("unit", ha).process("title", va).process("axis", Bn, {
                allow: function t() {
                    return !this.isBrushZoom()
                }
            }).process("region", Vn, {
                allow: function t() {
                    return !this.isBrushZoom()
                }
            }).process("facet", Hn, {
                allow: function t() {
                    return !this.isBrushZoom() && this.isFacet()
                }
            }).process("mark", Pn, {
                allow: function t() {
                    return !this.isBrushZoom() && !this.isFacet()
                }
            }).process("meanLine", In, {
                allow: function t() {
                    return !this.isBrushZoom()
                }
            }).process("fitLine", Xn, {
                allow: function t() {
                    return !this.isBrushZoom()
                }
            }).process("tooltip", la, {
                allow: function t() {
                    return !this.isBrushZoom()
                }
            }).process("panning", Ln, {
                allow: function t() {
                    return !this.isBrushZoom()
                }
            }).process("zoom", ua, {
                allow: function t() {
                    return !this.isBrushZoom()
                }
            }).process("brush", On, {
                allow: function t() {
                    return !this.isBrushZoom()
                }
            }).process("legend", Tn, {
                allow: function t() {
                    return !this.isBrushZoom()
                }
            });
            return e
        }
        r(l, [{
            key: "renderCanvas",
            value: function t() {
                return n(l.prototype.__proto__ || Object.getPrototypeOf(l.prototype), "renderCanvas", this).call(this, this.point() ? this.size().range[0] * 2 : 0)
            }
        }, {
            key: "multiTooltip",
            value: function t(i) {
                if (!arguments.length) return this.__attrs__.multiTooltip;
                if (typeof i === "boolean") {
                    if (i) {
                        i = {
                            sortByValue: "natural"
                        }
                    }
                }
                if ((typeof i === "undefined" ? "undefined" : e(i)) === "object") {
                    if (!i.sortByValue) i.sortByValue = "natural"
                }
                this.__attrs__.multiTooltip = i;
                return this
            }
        }, {
            key: "leastSquare",
            value: function t(e) {
                var i = this.measureName();
                var r = this.isIndividualScale();
                return this.__execs__.munged.filter(function(t) {
                    if (typeof e === "string") {
                        return t.data.key === e
                    } else {
                        return true
                    }
                }).map(function(t) {
                    var e = t.children.map(function(t) {
                        return {
                            x: t.data.key,
                            y: t.data.value[i]
                        }
                    });
                    var n = T(e);
                    if (r && t.scale) {
                        n.scale = t.scale
                    }
                    n.key = t.data.key;
                    return n
                })
            }
        }, {
            key: "measureName",
            value: function t() {
                var e = this.measures();
                var i = void 0;
                if (this.condition() === ma[2]) i = I.field;
                else if (this.aggregated() && e[0].field === I.field) i = e[0].field;
                else i = e[0].field + "-" + e[0].op;
                return i
            }
        }, {
            key: "isCount",
            value: function t() {
                return this.condition() === ma[1]
            }
        }, {
            key: "isFacet",
            value: function t() {
                return this.facet() && this.isNested() && !this.stacked()
            }
        }, {
            key: "isIndividualScale",
            value: function t() {
                return this.individualScale() && this.isNested() && !this.stacked()
            }
        }, {
            key: "isMixed",
            value: function t() {
                return this.condition() == ma[2]
            }
        }, {
            key: "isNested",
            value: function t() {
                var e = this.dimensions();
                var i = this.condition();
                return e.length === 2 || i == ma[2] && e.length === 1
            }
        }, {
            key: "isStacked",
            value: function t() {
                return this.stacked() && this.isNested()
            }
        }, {
            key: "muteFromLegend",
            value: function t(e) {
                this.muteRegions(e.key)
            }
        }, {
            key: "muteToLegend",
            value: function t(e) {
                this.muteLegend(e.parent.data.key)
            }
        }, {
            key: "demuteFromLegend",
            value: function t(e) {
                this.demuteRegions(e.key)
            }
        }, {
            key: "demuteToLegend",
            value: function t(e) {
                this.demuteLegend(e.parent.data.key)
            }
        }, {
            key: "showMultiTooltip",
            value: function t(e, i) {
                if (this.multiTooltip()) {
                    var r = this.__execs__.tooltip;
                    r.tick(e, i)
                }
            }
        }]);
        return l
    }(x(pr).with(dn, mn, fn, An, gr, Sn, zr, Mr));
    ya.prototype.meanLine = d("meanLine");
    ya.prototype.scaleBandMode = d("scaleBandMode");
    ya.prototype.individualScale = d("individualScale");

    function xa(t, e) {
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
        var n = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
        return t.munged(e).level(i).aggregated(r).domain(0, n)
    }
    ya.prototype.unit = d("unit");
    ya.prototype.title = d("title");
    ya.prototype.diffWithArrow = d("diffWithArrow");
    var ka = w(ya);

    function wa() {
        var t = this;
        var e = this.__execs__.scale;
        var i = this.grid();
        var r = this.innerSize();
        var n = this.__execs__.field;
        var a = function a(s) {
            n.x.axis(s);
            var o = t.axisDefault(e.x, s);
            if (s.orient === "bottom") o.y(e.y.range()[0]);
            o.grid(i).gridSize(r.height);
            return o
        };
        var s = function a(s) {
            n.y.axis(s);
            var o = t.axisDefault(e.y, s);
            if (s.orient === "right") o.x(e.x.range()[1]);
            o.grid(i).gridSize(r.width);
            return o
        };
        var o = this.axisX();
        var l = this.axisY();
        if (this.isFacet()) {
            this.axisFacet()
        } else {
            if (o) {
                a(o)
            }
            if (l) {
                s(l)
            }
        }
        this.renderAxis()
    }

    function ba() {
        var e = this.keep();
        var i = this.scale();
        var r = this.__execs__.munged;
        var n = this.__execs__.field;
        var a = this.aggregated();
        var s = this.viewInterval();
        var o = void 0,
            l = void 0;
        if (this.isColor()) {
            o = n.region.munged(r).domain();
            i.color = this.updateColorScale(o, e)
        }
        if (this.isFacet()) {
            i.region = t.scaleBand().domain(o).padding(this.regionPadding());
            return
        }
        var c = a ? this.data().children : this.data();
        var u = t.extent(c, function(t) {
            return (a ? t.data : t)[n.x.field()]
        });
        var f = t.extent(c, function(t) {
            return (a ? t.data : t)[n.y.field()]
        });
        if (!e) {
            i.x = P(u, undefined, n.x);
            i.y = P(f, undefined, n.y)
        }
        if (this.isSized()) {
            l = t.extent(c, function(t) {
                return t[n.radius.field()]
            });
            i.r = t.scaleLinear().domain(l)
        }
        if (!e && s) {
            u = this.limitViewInterval(i.x, u);
            i.x.domain(u)
        } else if (e && this.stream()) {
            u = this.limitViewInterval(i.x, u, true);
            i.x.domain(u)
        } else {
            this.setCustomDomain("x", u)
        }
        this.setCustomDomain("y", f);
        return this
    }

    function za() {
        var t = this;
        var e = this;
        var i = this.__execs__.scale;
        var r = this.facet();
        var n = this.__execs__.canvas;
        var a = this.innerSize();
        var s = this.measures();
        var o = void 0,
            l = void 0;
        var c = ["axisTitles", "size", "grid", "font", "label", "tooltip"].map(function(e) {
            return {
                key: e,
                value: t[e]()
            }
        });
        var u = this.axisX();
        var f = this.axisY();
        var h = function t(r) {
            var n = Va().container(this).data(r).measures(s).width(o).height(l).legend(false).zeroMargin(true).aggregated(true).parent(e).color(i.color(r.data.key));
            c.forEach(function(t) {
                return n[t.key](t.value)
            });
            if (f) n.axis({
                target: "y",
                orient: "left"
            });
            if (u) n.axis({
                target: "x",
                orient: "bottom"
            });
            n.render()
        };
        if (r.orient === "horizontal") {
            o = i.region.bandwidth();
            l = a.height
        } else {
            o = a.width;
            l = i.region.bandwidth()
        }
        n.selectAll(".facet").each(h)
    }
    var Aa = "#c0ccda";

    function Na() {
        var e = this.__execs__.canvas;
        var i = e.select(u("fit-line-g", true));
        if (!this.fitLine()) {
            if (!i.empty()) e.select(u("fit-line-g", true)).remove();
            return
        }
        var r = this.__execs__.field;
        var n = T(this.data(), r.x.field(), r.y.field()),
            a = n.slope,
            s = n.intercept;
        var o = this.scale();
        var l = t.transition().duration(this.transition().duration).delay(this.transition().delay);
        var c = o.x.domain();
        var f = c.map(function(t) {
            return a * t + s
        });
        if (i.empty()) {
            i = e.append("g").attr("class", u("fit-line-g")).attr("clip-path", "url(#" + e.selectAll(u("canvas-g-clip-path", true)).attr("id"));
            i.append("line").attr("class", u("fit-line")).style("fill", "none").style("stroke", Aa).style("stroke-width", 1).attr("x1", o.x(c[0])).attr("y1", o.y.range()[0]).attr("x2", o.x(c[1])).attr("y2", o.y.range()[0])
        }
        i.select("line").transition(l).attr("x1", o.x(c[0])).attr("y1", o.y(f[0])).attr("x2", o.x(c[1])).attr("y2", o.y(f[1]))
    }

    function Fa() {
        var t = this.legend();
        if (!t) return;
        if (!this.isColor()) {
            return
        }
        this.renderLegend()
    }

    function Sa() {
        var t = this.scale();
        var e = this.facet();
        var i = this.axisX();
        var r = this.axisY();
        if (this.isFacet()) {
            t.region.padding(this.regionPadding());
            if (e.orient === "horizontal" && i) {
                i.orient = "top";
                i.showDomain = false;
                this.thickness(i, t.region, true, true);
                if (r) r.thickness = 0
            } else if (e.orient === "vertical" && r) {
                r.orient = "right";
                r.showDomain = false;
                this.thickness(r, t.region, false, true);
                if (i) i.thickness = 0
            }
            var n = this.innerSize();
            if (e.orient === "vertical") {
                t.region.rangeRound([0, n.height])
            } else {
                t.region.rangeRound([0, n.width])
            }
            return
        }
        if (this.isSized()) {
            t.r.range(this.size().range)
        }
        this.thickness(r, t.y, false, false);
        if (!this.stream()) this.thickness(i, t.x, true, false);
        var a = this.innerSize();
        t.x.rangeRound([0, a.width]);
        t.y.rangeRound([a.height, 0])
    }

    function Oa() {
        var e = this;
        var i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var r = this;
        var n = this.__execs__.canvas;
        var a = this.__execs__.scale;
        var s = this.color();
        var o = this.size();
        var l = this.label();
        var u = t.transition().duration(this.transition().duration).delay(this.transition().delay);
        var f = this.__execs__.field;
        var h = this.aggregated();
        var d = this.isColor();
        var v = this.stream();
        var _ = function t(e) {
            return a.x(e.data[f.x.field()])
        };
        var p = function t(e) {
            return a.y(e.data[f.y.field()])
        };
        var m = function t(i) {
            return e.isSized() ? a.r(i.data[f.radius.field()]) : o.range[0]
        };
        var g = function e() {
            var i = t.select(this.parentNode).datum();
            return d ? a.color(i.data.key) : s[0]
        };
        var y = function t(e) {
            e.each(function(t) {
                t.x = _(t);
                if (v) {
                    var e = t.data[f.x.field()];
                    var i = r.distDomain(a.x);
                    if (e > a.x._lastDomain[a.x._lastDomain.length - 1]) {
                        t.x0 = t.x + i
                    }
                }
                t.y = p(t);
                t.color = g.call(this);
                t.r = m(t);
                t.text = c(t.x) + ", " + c(t.y)
            })
        };
        var x = function t(e) {
            e.attr("r", 0).attr("stroke", function(t) {
                return t.color
            }).attr("stroke-width", "1px").attr("fill-opacity", .5).style("cursor", "pointer")
        };
        var k = function t(e) {
            e.transition(u).attr("r", function(t) {
                return t.r
            }).attr("stroke", function(t) {
                return t.color
            })
        };
        var w = function e(i) {
            i.each(function(e) {
                var i = t.select(this);
                i.style("pointer-events", "none").text(e.text);
                r.styleFont(i)
            })
        };
        var b = function e(i) {
            i.each(function(e) {
                var i = t.select(this);
                i.attr("text-anchor", e.anchor).style("visibility", l ? "visible" : "hidden").transition(u).attr("y", o.range[0]).text(e.text);
                r.styleFont(i)
            })
        };
        var z = function e(n) {
            var a = n.selectAll(r.nodeName()).data(function(t) {
                return d || h ? t.children : t
            });
            a.exit().remove();
            var s = a.enter().append("g").attr("class", r.nodeName(true) + " point").call(y).attr("transform", function(t) {
                return "translate(" + [t.x0 || t.x, t.y] + ")"
            });
            s.append("circle").call(x);
            s.append("text").call(w);
            a = s.merge(a).call(y);
            a.selectAll("circle").call(k);
            a.selectAll("text").call(b);
            a.each(function(e) {
                var r = t.select(this);
                if (!i) r = r.transition(u);
                r.attr("transform", "translate(" + [e.x, e.y] + ")").style("fill", e.color)
            });
            r.__execs__.nodes = a
        };
        n.selectAll(this.regionName()).call(z)
    }

    function Ta() {
        var t = function t(e, i) {
            var r = this.__execs__.field;
            if (i.length < 2) throw new A;
            r.x = G(i[0]);
            r.y = G(i[1]);
            if (e.length === 0 && i.length === 2) return Ba[0];
            else if (e.length === 1 && i.length === 2) {
                r.region = Xr(e[0]);
                return Ba[1]
            } else if (e.length === 0 && i.length === 3) {
                r.radius = G(i[2]);
                return Ba[2]
            } else if (e.length == 1 && i.length === 3) {
                r.radius = G(i[2]);
                r.region = Xr(e[0]);
                return Ba[3]
            } else throw new A
        };
        this.condition(t);
        this.limitRows();
        if (this.aggregated()) {
            this.__execs__.munged = [this.data()]
        } else if (this.isColor()) {
            this.__execs__.munged = this.aggregate(false, false).map(function(t) {
                t.key = t.data.key;
                return t
            })
        } else {
            this.__execs__.munged = [this.data().map(function(t) {
                return {
                    data: t
                }
            })]
        }
    }

    function Da() {
        if (this.stream()) {
            this.streamPanning(this.__execs__.scale.x)
        }
    }

    function Pa() {
        var t = this.aggregated();
        var e = this.__execs__.scale;
        var i = this.isFacet();
        var r = this.facet();
        this.renderRegion(function(n) {
            if (t) return;
            var a = [i ? e.region(n.key) : 0, 0];
            if (r.orient === "vertical") a.reverse();
            n.x = a[0];
            n.y = a[1]
        }, function(t) {
            return t
        }, i)
    }

    function Ma() {
        if (!this.tooltip() || this.isFacet()) return;
        var t = this.measures();
        var e = function e(i) {
            return t.map(function(t) {
                return {
                    name: t.field,
                    value: t.format ? t.format(i.data[t.field]) : i.data[t.field]
                }
            })
        };
        this.renderTooltip({
            dx: this.size().range[0] + 4,
            value: e,
            key: null
        })
    }

    function La() {
        var e = this;
        var i = this.__execs__.canvas;
        var r = this.__execs__.field;
        var n = this.innerSize();
        var a = this.__execs__.scale;
        var s = this.__execs__.axis;
        var o = s && s.x ? s.x[r.x.field()] : null;
        var l = s && s.y ? s.y[r.y.field()] : null;
        var c = t.brush().extent([
            [0, 0],
            [n.width, n.height]
        ]);
        var u = i.selectAll(".brush.x").data([n]);
        u.exit().remove();
        u = u.enter().append("g").attr("class", "brush x").merge(u).attr("transform", "translate(" + [0, 0] + ")").call(c);
        this.brushGen(c);
        var f = this.zoomExtent(this.isColor(), true);
        var h = t.zoom().scaleExtent(f).translateExtent([
            [0, 0],
            [this.width(), this.height()]
        ]);
        i.call(h);
        this.zoomGen(h);
        var d = a.x.domain();
        var v = a.y.domain();
        var _ = void 0;
        c.on("end.scatter", function() {
            if (t.event.sourceEvent && t.event.sourceEvent.type === "end") return;
            var i = t.event.selection;
            if (!i) {
                if (!_) return _ = setTimeout(function() {
                    _ = null
                }, 300);
                a.x.domain(d);
                a.y.domain(v)
            } else {
                a.x.domain([i[0][0], i[1][0]].map(a.x.invert, a.x));
                a.y.domain([i[1][1], i[0][1]].map(a.y.invert, a.y))
            }
            if (o) {
                o.render(null)
            }
            if (l) {
                l.render(null)
            }
            Oa.call(e);
            e.brushMove(u, null)
        })
    }

    function Ca() {
        var e = this;
        var i = this.zoomExtent(this.isColor(), true);
        var r = t.zoom().scaleExtent(i).translateExtent([
            [0, 0],
            [this.width(), this.height()]
        ]);
        this.__execs__.canvas.call(r);
        this.zoomGen(r).zoomed(function() {
            Oa.call(e, true);
            e.resetTooltip();
            Ma.call(e)
        }, true)
    }

    function Ra() {
        if (!this.zoom()) return;
        if (this.zoom() === "normal") Ca.call(this);
        else if (this.zoom() === "brush") La.call(this)
    }
    var Ea = {
        range: [3, 12],
        scale: "linear",
        reverse: false
    };
    var Ba = ["normal", "color", "bubble", "mixed"];
    var ja = {
        regionPadding: .1,
        size: Ea
    };
    var Ia = function(t) {
        a(e, t);

        function e() {
            i(this, e);
            var t = s(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this));
            t.setAttrs(ja);
            t.process("munge", Ta, {
                isPre: true
            }).process("domain", ba, {
                isPre: true
            }).process("range", Sa, {
                isPre: true
            }).process("axis", wa).process("fitLine", Na).process("region", Pa).process("facet", za, {
                allow: function t() {
                    return this.isFacet()
                }
            }).process("mark", Oa, {
                allow: function t() {
                    return !this.isFacet()
                }
            }).process("legend", Fa).process("tooltip", Ma).process("panning", Da).process("zoom", Ra);
            return t
        }
        r(e, [{
            key: "renderCanvas",
            value: function t() {
                return n(e.prototype.__proto__ || Object.getPrototypeOf(e.prototype), "renderCanvas", this).call(this, this.size().range[this.isSized() ? 1 : 0] * 1.25)
            }
        }, {
            key: "isColor",
            value: function t() {
                return this.condition() === Ba[1] || this.condition() === Ba[3]
            }
        }, {
            key: "isSized",
            value: function t() {
                return this.condition() === Ba[2] || this.condition() === Ba[3]
            }
        }, {
            key: "isFacet",
            value: function t() {
                return this.facet() && this.isColor()
            }
        }, {
            key: "muteFromLegend",
            value: function t(e) {
                this.muteRegions(e.key)
            }
        }, {
            key: "demuteFromLegend",
            value: function t(e) {
                this.demuteRegions(e.key)
            }
        }, {
            key: "muteToLegend",
            value: function t(e) {
                this.muteLegend(e.parent.data.key)
            }
        }, {
            key: "demuteToLegend",
            value: function t(e) {
                this.demuteLegend(e.parent.data.key)
            }
        }]);
        return e
    }(x(pr).with(dn, fn, An, gr, Mr));
    var Va = w(Ia);

    function Ha() {
        var t = function t(e, i) {
            var r = this.__execs__.field;
            if (e.length !== 2) throw new A;
            var n = Xr(e[0]);
            var a = Xr(e[1]);
            if (this.reverse()) {
                r.x = a;
                r.y = n
            } else {
                r.x = n;
                r.y = a
            }
            if (e.length === 2) {
                if (i.length === 0) this.measure(j);
                r.color = G(i[0]);
                if (i.length === 0) return qa[1];
                else if (i.length === 1) return qa[0]
            } else throw new A
        };
        this.condition(t);
        this.__execs__.munged = this.aggregate(this.reverse(), true);
        this.limitKeys()
    }

    function Ga() {
        var e = this.scale();
        var i = this.__execs__.munged;
        var r = this.__execs__.field;
        var n = r.x.munged(i).level(0).domain(this.sortByValue());
        var a = r.y.munged(i).level(1).domain(this.sortByValue());
        var s = r.color.munged(i).level(1).domain();
        e.x = t.scaleBand().domain(n);
        e.y = t.scaleBand().domain(a);
        e.color = t.scaleLinear();
        if (y(s)) {
            e.color.domain([s[0], 0, s[s.length - 1]])
        } else {
            e.color.domain(s)
        }
        return this
    }

    function Xa() {
        var t = this.scale();
        var e = this.__execs__.field;
        var i = this.axisX();
        var r = this.axisY();
        e.x.axis(i);
        e.y.axis(r);
        this.thickness(r, t.y, false, true);
        this.thickness(i, t.x, true, true);
        var n = this.innerSize();
        t.x.rangeRound([0, n.width]).padding(this.padding());
        t.y.rangeRound([0, n.height]).padding(this.padding());
        t.color.range(this.color());
        return this
    }

    function Wa() {
        var e = this;
        var i = this.__execs__.canvas;
        var r = this.__execs__.scale;
        var n = this.label();
        var a = t.transition().duration(this.transition().duration).delay(this.transition().delay);
        var s = function t(e) {
            return r.y(e.data.key)
        };
        var o = function t(e) {
            return r.color(e.value)
        };
        var l = function t(e) {
            return c(e.value)
        };
        var u = function t(e) {
            var i = r.x.bandwidth();
            var n = r.y.bandwidth();
            e.each(function(t) {
                t.x = 0;
                t.y = s(t);
                t.value = t.value;
                t.color = o(t);
                t.text = l(t);
                t.w = i;
                t.h = n
            })
        };
        var f = function t(e) {
            e.attr("width", function(t) {
                return t.w
            }).attr("height", function(t) {
                return t.h
            }).style("stroke", "none").style("fill", function(t) {
                return t.color
            }).style("cursor", "pointer")
        };
        var h = function t(e) {
            e.transition(a).attr("width", function(t) {
                return t.w
            }).attr("height", function(t) {
                return t.h
            }).style("fill", function(t) {
                return t.color
            })
        };
        var d = function i(r) {
            r.each(function(i) {
                var r = t.select(this);
                r.attr("x", 0).attr("y", 0).attr("dx", "0.29em").attr("dy", "1em").style("pointer-events", "none").style("fill", "#111").text(i.text);
                e.styleFont(r)
            })
        };
        var v = function i(r) {
            r.each(function(i) {
                var r = t.select(this);
                r.attr("text-anchor", i.anchor).style("visibility", n ? "visible" : "hidden").transition(a).text(i.text);
                e.styleFont(r)
            })
        };
        var _ = function t(i) {
            var r = i.selectAll(e.nodeName()).data(function(t) {
                return t.children
            }, function(t) {
                return t.data.key
            });
            r.exit().remove();
            var n = r.enter().append("g").attr("class", e.nodeName(true) + " point").call(u);
            n.append("rect").call(f);
            n.append("text").call(d);
            r = n.merge(r).call(u);
            r.selectAll("rect").call(h);
            r.selectAll("text").call(v);
            r.attr("transform", function(t) {
                return "translate(" + [t.x, t.y] + ")"
            }).style("fill", function(t) {
                return t.color
            });
            e.__execs__.nodes = r
        };
        var p = i.selectAll(this.regionName());
        p.call(_)
    }

    function Ya() {
        var t = this;
        var e = this.__execs__.scale;
        var i = this.__execs__.field;
        var r = function r(n) {
            i.x.axis(n);
            var a = t.axisDefault(e.x, n);
            if (n.orient === "bottom") a.y(e.y.range()[1]);
            return a
        };
        var n = function r(n) {
            i.y.axis(n);
            var a = t.axisDefault(e.y, n);
            if (n.orient === "right") a.x(e.x.range()[1]);
            return a
        };
        var a = this.axisX();
        var s = this.axisY();
        if (a) {
            r(a)
        }
        if (s) {
            n(s)
        }
        this.renderAxis()
    }

    function Za() {
        this.renderSpectrum()
    }

    function Ka() {
        var t = this.__execs__.scale;
        var e = function e(i) {
            i.x = t.x(i.data.key);
            i.y = 0
        };
        this.renderRegion(e)
    }

    function Ja() {
        if (!this.tooltip()) return;
        var t = this.__execs__.field;
        var e = function e(i, r) {
            return {
                name: t.color.field(),
                value: r
            }
        };
        var i = function t(e) {
            return {
                x: e.w,
                y: 0
            }
        };
        this.renderTooltip({
            offset: i,
            value: e,
            color: "#111"
        })
    }
    var qa = ["normal", "count"];
    var Ua = {
        color: _i,
        padding: .05,
        reverse: false
    };
    var Qa = function(t) {
        a(e, t);

        function e() {
            i(this, e);
            var t = s(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this));
            t.setAttrs(Ua);
            t.process("munge", Ha, {
                isPre: true
            }).process("domain", Ga, {
                isPre: true
            }).process("range", Xa, {
                isPre: true
            }).process("region", Ka).process("axis", Ya).process("mark", Wa).process("spectrum", Za).process("tooltip", Ja);
            return t
        }
        r(e, [{
            key: "isCount",
            value: function t() {
                return this.condition() === qa[1]
            }
        }]);
        return e
    }(x(fr).with(gr, wr));
    Qa.prototype.reverse = d("reverse");
    var $a = w(Qa);

    function ts() {
        var e = this;
        var i = function t(e, i) {
            var r = this.__execs__.field;
            if (e.length === 0) throw new A;
            if (this.shape() === "word" && e.length > 1) throw new A;
            r.root = Xr(e[0]);
            r.leaf = Xr(e[e.length - 1]);
            if (i.length === 1) {
                r.color = G(i[0]);
                return ls[0]
            } else if (i.length === 0) {
                this.measure(j);
                r.color = G(i[0]);
                return ls[1]
            } else throw new A
        };
        this.condition(i);
        this.__execs__.munged = this.aggregate(false, true, true, false);
        var r = t.hierarchy({
            key: "root",
            values: this.__execs__.munged
        }, function(t) {
            return t.values
        }).sum(function(t) {
            return t.value ? t.value[e.measureName()] : 0
        });
        if (this.sortByValue() === "ascending") {
            r.sort(function(t, e) {
                return t.value - e.value
            })
        } else if (this.sortByValue() === "descending") {
            r.sort(function(t, e) {
                return e.value - t.value
            })
        }
        var n = this.size() ? this.size().range : this.innerSize(true);
        if (this.shape() === "pack") {
            var a = t.pack().size(n);
            r = a(r)
        } else {
            var s = t.treemap().size(n).paddingTop(this.font()["font-size"] + 4);
            r = s(r)
        }
        this.__execs__.munged = r
    }

    function es() {
        var e = this.scale();
        var i = this.__execs__.munged;
        var r = t.extent(i.leaves(), function(t) {
            return t.value
        });
        e.color = t.scaleLinear();
        if (y(r)) {
            e.color.domain([r[0], 0, r[r.length - 1]])
        } else {
            e.color.domain(r)
        }
        return this
    }

    function is() {
        var t = this.scale();
        t.color.range(this.color());
        return this
    }
    var rs = "#eee";

    function ns() {
        var e = "treemap-node-clip-path-";
        var i = this;
        var r = this.__execs__.mark;
        var n = this.__execs__.scale;
        var a = this.label();
        var s = t.transition().duration(this.transition().duration).delay(this.transition().delay);
        var o = this.size();
        var l = this.shape();
        var f = this.innerSize();
        var h = l === "pack" ? "circle" : "rect";
        var d = function t(e) {
            if (h === "rect") {
                e.attr("width", function(t) {
                    return t.w
                }).attr("height", function(t) {
                    return t.h
                })
            } else {
                e.attr("r", function(t) {
                    return t.r
                })
            }
        };
        var v = function t(e) {
            if (l === "treemap") {
                e.attr("dx", "0.29em").attr("dy", "1em")
            } else if (l === "word") {
                var i = e.datum();
                var r = i.w < i.h;
                e.attr("dy", r ? "-.35em" : ".8em").attr("textLength", r ? i.h : i.w).attr("lengthAdjust", "spacingAndGlyphs").attr("transform", r ? "rotate(90)" : "").style("font-size", (r ? i.w : i.h) - 1 + "px").style("fill", i.color).style("pointer-events", "all").style("cursor", "pointer")
            } else {
                var n = e.datum();
                e.attr("visibility", n.children ? "hidden" : "visible").attr("text-anchor", "middle").attr("dy", ".35em")
            }
        };
        var _ = function t(e) {
            return e.children ? rs : n.color(e.value)
        };
        var p = function t(e) {
            return c(e.value)
        };
        var m = function t(e) {
            var i = 0;
            var r = 0;
            if (o || l === "pack") {
                i = (f.width - o.range[0]) / 2;
                r = (f.height - o.range[1]) / 2
            }
            e.each(function(t) {
                t.color = _(t);
                t.text = p(t);
                if (l !== "pack") {
                    t.x = t.x0 + i;
                    t.y = t.y0 + r;
                    t.w = t.x1 - t.x0;
                    t.h = t.y1 - t.y0
                } else {
                    t.x += i / 2;
                    t.y += r / 2
                }
            })
        };
        var y = function i(r) {
            r.each(function(i) {
                t.select(this).attr("id", g(e)).append(h).call(d, i)
            })
        };
        var x = function e(i) {
            i.each(function(e) {
                t.select(this).select(h).transition(s).call(d, e)
            })
        };
        var k = function t(e) {
            e.style("visibility", l === "word" ? "hidden" : "visible").style("stroke", "none").style("fill", function(t) {
                return t.color
            }).style("cursor", "pointer").call(d)
        };
        var w = function t(e) {
            e.style("visibility", l === "word" ? "hidden" : "visible").transition(s).style("fill", function(t) {
                return t.color
            }).style("stroke", function(t) {
                return t.children ? "#ddd" : "none"
            }).call(d)
        };
        var b = function e(n) {
            n.each(function() {
                var e = r.get(this);
                var n = t.select(this);
                n.attr("x", 0).attr("y", 0).style("pointer-events", "none").style("fill", "#000").text(function(t) {
                    return t.data.key
                });
                i.styleFont(n);
                n.call(v, e);
                n.style("font-weight", "bold")
            })
        };
        var z = function e(n) {
            n.each(function() {
                var e = t.select(this);
                e.text(function(t) {
                    return t.data.key
                });
                i.styleFont(e);
                e.style("font-weight", "bold");
                e.call(v, r.get(this))
            })
        };
        var A = function e(r) {
            r.each(function(e) {
                var r = t.select(this);
                var n = r.attr("x", 0).attr("y", 0).style("pointer-events", "none").style("fill", "#111").text(e.text);
                if (h === "rect") {
                    n.attr("dx", "0.29em").attr("dy", "2em")
                } else {
                    n.attr("visibility", e.children ? "hidden" : "visible").attr("text-anchor", "middle").attr("dy", "1.35em")
                }
                i.styleFont(r)
            })
        };
        var N = function e(r) {
            r.each(function(e) {
                var r = t.select(this);
                r.style("visibility", a && l !== "word" ? "visible" : "hidden").transition(s).text(e.text);
                i.styleFont(r)
            })
        };
        var F = function e(r) {
            var n = r.selectAll(i.nodeName()).data(function(t) {
                return t.descendants().slice(1)
            }, function(t) {
                return t.data.key
            });
            n.exit().remove();
            var a = n.enter().append("g").attr("class", function(t) {
                return i.nodeName(true) + " " + u(t.children ? "stem" : "leaf")
            }).call(m);
            a.append("defs").append("clipPath").call(y);
            a.append(h).attr("class", "shape").call(k);
            a.append("text").attr("class", "name").call(b);
            a.filter(function(t) {
                return !t.children
            }).append("text").attr("class", "label").call(A);
            a.attr("clip-path", function() {
                return "url(#" + t.select(this).select("clipPath").attr("id") + ")"
            });
            n = a.merge(n).call(m);
            n.select("defs").select("clipPath").call(x);
            n.selectAll(".shape").call(w);
            n.selectAll(".name").call(z);
            n.selectAll(".label").call(N);
            n.attr("transform", function(t) {
                return "translate(" + [t.x, t.y] + ")"
            });
            i.__execs__.nodes = n
        };
        this.renderRegion(function(t) {
            t.x = 0;
            t.y = 0
        }, function(t) {
            return [t]
        }).call(F)
    }

    function as() {
        this.renderSpectrum()
    }

    function ss() {
        if (!this.tooltip()) return;
        var t = this.__execs__.field;
        var e = this.isCount();
        var i = this.shape();
        var r = function t(e) {
            return {
                name: "key",
                value: e.data.key
            }
        };
        var n = function i(r, n) {
            var a = void 0;
            if (e) {
                a = B
            } else {
                a = t.color.field()
            }
            return {
                name: a,
                value: n
            }
        };
        var a = function t(e) {
            return {
                x: i === "pack" ? e.r : e.w,
                y: 0
            }
        };
        this.renderTooltip({
            offset: a,
            value: n,
            key: r,
            color: "#111"
        }, false, true)
    }
    var os = ["treemap", "pack", "word"];
    var ls = ["normal", "count"];
    var cs = {
        autoResizeSkip: ["domain"],
        color: _i,
        reverse: false,
        shape: os[0],
        size: null,
        sortByValue: "natural"
    };
    var us = function(t) {
        a(e, t);

        function e() {
            i(this, e);
            var t = s(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this));
            t.setAttrs(cs);
            t.process("munge", ts, {
                isPre: true
            }).process("domain", es, {
                isPre: true
            }).process("range", is, {
                isPre: true
            }).process("mark", ns).process("spectrum", as).process("tooltip", ss);
            return t
        }
        r(e, [{
            key: "axis",
            value: function t() {
                if (!arguments.length) return [];
                return this
            }
        }, {
            key: "isCount",
            value: function t() {
                return this.condition() === ls[1]
            }
        }]);
        return e
    }(x(gi).with(Sn, wr));
    us.prototype.reverse = d("reverse");
    var fs = w(us);

    function hs(t, e) {
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        return t.map(function(t) {
            return e.map(function(e) {
                return {
                    data: {
                        x: e.field,
                        y: (i ? t.data : t)[e.field]
                    }
                }
            })
        })
    }

    function ds() {
        var t = this;
        var e = function t(e, i) {
            var r = this;
            var n = this.__execs__.field;
            if (i.length < 2) throw new A;
            n.x = Xr(this.mixedDimension());
            i.forEach(function(t) {
                n[Rs(t)] = G(t);
                if (r.shape() === Ds[1]) n[Cs(t)] = G(t)
            });
            if (e.length === 0) return Ps[0];
            else if (e.length === 1) {
                n.region = Xr(e[0]);
                return Ps[1]
            } else throw new A
        };
        this.condition(e);
        var i = void 0;
        var r = this.measures();
        this.limitRows();
        if (this.shape() === Ds[0]) {
            if (this.isColor()) {
                i = this.aggregate(false, false);
                i.forEach(function(t) {
                    t.key = t.data.key;
                    t.children = hs(t.children, r, true)
                })
            } else {
                i = [{
                    parent: null,
                    children: hs(this.data(), r)
                }]
            }
        } else {
            i = [];
            r.forEach(function(e) {
                r.forEach(function(r) {
                    i.push({
                        xField: e,
                        yField: r,
                        children: t.data()
                    })
                })
            })
        }
        this.__execs__.munged = i
    }

    function vs(t, e) {
        var i = [];
        t.forEach(function(t) {
            t = t[e.field()];
            if (e.interval()) {
                t = b[e.interval()](t)
            }
            if (t instanceof Date && i.indexOf(i.filter(function(e) {
                    return e - t === 0
                })[0]) < 0) i.push(t);
            else if (!i.includes(t)) i.push(t)
        });
        i.sort(O(e.order()));
        return i
    }

    function _s(e) {
        var i = this;
        this.axis("x", false);
        var r = this.scale();
        var n = this.measures();
        var a = this.__execs__.munged;
        var s = this.__execs__.field;
        if (this.isColor()) {
            var o = s.region.munged(a).domain();
            r.color = this.updateColorScale(o, e)
        }
        r.x = t.scalePoint().domain(n.map(function(t) {
            return t.field
        }));
        n.forEach(function(e) {
            var n = t.extent(i.data(), function(t) {
                return t[e.field]
            });
            var a = Rs(e);
            r[a] = P(n, null, s[a]);
            i.setCustomDomain(a, n)
        });
        return this
    }

    function ps(e) {
        var i = this;
        var r = this.scale();
        var n = this.measures();
        var a = this.__execs__.field;
        if (this.isColor()) {
            var s = vs(this.data(), a.region);
            r.color = this.updateColorScale(s, e)
        }
        r.region = t.scaleBand().domain(n.map(function(t) {
            return t.field
        }));
        n.forEach(function(e) {
            var n = t.extent(i.data(), function(t) {
                return t[e.field]
            });
            var a = Rs(e);
            r[a] = P(n);
            i.setCustomDomain(a, n);
            var s = Cs(e);
            r[s] = P(n);
            i.setCustomDomain(s, n)
        })
    }

    function ms(t) {
        if (this.isParcoords()) _s.call(this, t);
        else ps.call(this, t)
    }

    function gs() {
        var t = this.scale();
        var e = this.innerSize();
        var i = this.measures();
        t.x.rangeRound([0, e.width]);
        i.forEach(function(i) {
            var r = Rs(i);
            t[r].rangeRound([e.height, 0])
        })
    }

    function ys() {
        var t = this.scale();
        var e = this.innerSize();
        var i = this.measures();
        var r = Math.min(e.width, e.height);
        t.region.rangeRound([0, r]).padding(this.regionPadding());
        i.forEach(function(e) {
            var i = Rs(e);
            t[i].rangeRound([t.region.bandwidth(), 0]);
            var r = Cs(e);
            t[r].rangeRound([0, t.region.bandwidth()])
        })
    }

    function xs(t) {
        if (this.isParcoords()) gs.call(this, t);
        else ys.call(this, t)
    }

    function ks() {
        var e = this;
        var i = this.__execs__.canvas;
        var r = this.__execs__.scale;
        var n = this.size();
        var a = this.innerSize();
        var s = t.transition().duration(this.transition().duration).delay(this.transition().delay);
        var o = t.line().x(function(t) {
            return r.x(t.data.x)
        }).y(a.height);
        var l = t.line().x(function(t) {
            return r.x(t.data.x)
        }).y(function(t) {
            return r[Rs(t.data.x)](t.data.y)
        });
        var c = function t(e) {
            e.attr("d", o).attr("fill", "none").attr("stroke-width", n.range[0])
        };
        var f = function t(e) {
            e.transition(s).attr("d", l).attr("stroke-width", n.range[0])
        };
        var h = function t(i) {
            var r = i.selectAll(e.seriesName()).data(function(t) {
                return t.children
            }, function(t, e) {
                return t.key ? t.key : e
            });
            r = r.enter().append("g").attr("class", e.seriesName(true)).merge(r);
            var n = r.selectAll("path" + u("line", true)).data(function(t) {
                return [t]
            });
            n.enter().append("path").attr("class", u("line")).call(c).merge(n).call(f)
        };
        var d = i.selectAll(this.regionName());
        d.call(h)
    }

    function ws() {
        var t = this;
        var e = this.measures();
        var i = this.__execs__.scale;
        var r = function e(r, n) {
            var a = t.axisDefault(r, n);
            if (n.orient === "right") a.x(i.x.range()[1]);
            a.x(i.x(n.field));
            return a
        };
        var n = this.axisY();
        if (n) {
            e.forEach(function(t) {
                var e = Rs(t);
                var a = i[e];
                var s = {
                    target: n.target,
                    field: t.field,
                    orient: n.orient,
                    showDomain: true,
                    titleOrient: "bottom",
                    showTitle: true
                };
                r(a, s)
            })
        }
    }

    function bs() {
        if (this.shape() === Ds[0]) {
            ws.call(this)
        }
        this.renderAxis()
    }

    function zs() {
        if (!this.isColor()) {
            return
        }
        this.renderLegend()
    }

    function As() {
        var t = this.isColor();
        var e = this.color();
        var i = this.shape();
        var r = this.__execs__.scale;
        var n = function n(a) {
            if (i === Ds[0]) {
                a.x = 0;
                a.y = 0;
                a.color = t ? r.color(a.data.key) : e[0]
            } else {
                a.x = r.region(a.xField.field);
                a.y = r.region.range()[1] - r.region(a.yField.field) - r.region.bandwidth()
            }
        };
        this.renderRegion(n, function(t) {
            return t
        }, i === Ds[1], i === Ds[1] ? ".matrix" : "").style("stroke", function(t) {
            return t.color
        })
    }

    function Ns() {
        var t = this;
        var e = this;
        var i = this.__execs__.scale;
        var r = this.__execs__.canvas;
        var n = this.measures();
        var a = this.dimensions();
        var s = i.region.bandwidth();
        var o = ["axisTitles", "color", "size", "grid", "font", "label"].map(function(e) {
            return {
                key: e,
                value: t[e]()
            }
        });
        var l = function t(i, r) {
            var l = Va().container(this).data(i.children).dimensions(a).measures([i.xField, i.yField]).width(s).height(s).legend(false).tooltip(false).parent(e).zeroOffset(true).noAxisOffset(true);
            var c = r % n.length === 0;
            var u = r < n.length;
            o.forEach(function(t) {
                return l[t.key](t.value)
            });
            l.axis({
                target: "y",
                orient: "left",
                showTitle: u,
                showTicks: u
            });
            l.axis({
                target: "x",
                orient: "bottom",
                showTitle: c,
                showTicks: c
            });
            l.render()
        };
        r.selectAll(".facet").each(l)
    }

    function Fs() {
        var i = this.__execs__.canvas;
        var r = this.__execs__.scale;
        var n = this.innerSize();
        var a = this.measures();
        var s = {};
        var o = this.font()["font-size"];
        var l = t.brushY().extent([
            [-o, 0],
            [o, n.height]
        ]);
        var c = i.selectAll(this.seriesName());
        var u = function t() {
            c.attr("opacity", "1").filter(function(t) {
                var i = function e(i) {
                    var r = s[i];
                    var n = t.filter(function(t) {
                        return t.data.x === i
                    })[0];
                    var a = n.data.y < r[1] || n.data.y > r[0];
                    if (a) return {
                        v: true
                    }
                };
                for (var r in s) {
                    var n = i(r);
                    if ((typeof n === "undefined" ? "undefined" : e(n)) === "object") return n.v
                }
                return false
            }).attr("opacity", .1)
        };
        var f = i.selectAll(".brush.y").data(a, function(t) {
            return t.field
        });
        f.exit().remove();
        f.enter().append("g").attr("class", "brush y").merge(f).attr("transform", function(t) {
            return "translate(" + [r.x(t.field), 0] + ")"
        }).call(l);
        l.on("brush.parCoords", function(e) {
            s[e.field] = t.event.selection.map(r[Rs(e.field)].invert);
            u()
        }).on("end.parCoords", function(e) {
            if (t.event.selection === null) {
                delete s[e.field];
                u()
            }
        });
        this.brushGen(l)
    }

    function Ss() {
        var e = this.__execs__.canvas;
        var i = this.__execs__.scale;
        var r = i.region.bandwidth();
        var n = t.brush().extent([
            [0, 0],
            [r, r]
        ]);
        var a = e.selectAll(this.nodeName());
        var s = void 0;
        var o = e.selectAll(".brush.matrix").data(function(t) {
            return t
        });
        o.exit().remove();
        o.enter().append("g").attr("class", "brush matrix").merge(o).attr("transform", function(t) {
            return "translate(" + [i.region(t.xField.field), i.region.range()[1] - i.region(t.yField.field) - i.region.bandwidth()] + ")"
        }).call(n);
        n.on("start.matrix", function() {
            if (s !== this) {
                t.select(s).call(n.move, null);
                s = this
            }
        }).on("brush.matrix", function(e) {
            if (t.event.selection === null) return;
            var r = e.xField.field;
            var n = e.yField.field;
            var s = i[Cs(r)];
            var o = i[Rs(n)];
            var l = t.event.selection.map(function(t) {
                return [s.invert(t[0]), o.invert(t[1])]
            });
            a.attr("opacity", 1).filter(function(t) {
                t = t.data;
                return t[r] < l[0][0] || t[r] > l[1][0] || t[n] > l[0][1] || t[n] < l[1][1]
            }).attr("opacity", .1)
        }).on("end.matrix", function() {
            if (t.event.selection === null) {
                a.attr("opacity", 1)
            }
        });
        this.brushGen(n)
    }

    function Os() {
        if (this.shape() === Ds[0]) {
            Fs.call(this)
        } else {
            Ss.call(this)
        }
    }
    var Ts = {
        range: [1, 1],
        scale: "linear",
        reverse: false
    };
    var Ds = ["par-coords", "scatter-matrix"];
    var Ps = ["normal", "color"];
    var Ms = {
        regionPadding: .1,
        size: Ts,
        shape: Ds[0]
    };
    var Ls = function(t) {
        a(e, t);

        function e() {
            i(this, e);
            var t = s(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this));
            t.setAttrs(Ms);
            t.brush(true);
            t.process("munge", ds, {
                isPre: true
            }).process("domain", ms, {
                isPre: true
            }).process("range", xs, {
                isPre: true
            }).process("axis", bs).process("region", As).process("mark", ks, {
                allow: function t() {
                    return this.isParcoords()
                }
            }).process("facet", Ns, {
                allow: function t() {
                    return !this.isParcoords()
                }
            }).process("legend", zs).process("brush", Os);
            return t
        }
        r(e, [{
            key: "isColor",
            value: function t() {
                return this.condition() === Ps[1]
            }
        }, {
            key: "isParcoords",
            value: function t() {
                return this.shape() === Ds[0]
            }
        }, {
            key: "muteRegions",
            value: function t(e) {
                var i = this;
                var r = function t(e) {
                    i.mute(e, i.muteIntensity())
                };
                var n = function t(e) {
                    var r = e.selectAll(i.nodeName()).classed("mute", true);
                    i.mute(r, i.muteIntensity())
                };
                if (!arguments.length) {
                    if (this.isParcoords()) {
                        return this.filterRegions().call(r)
                    } else {
                        return this.regions().selectAll(this.regionName()).call(n)
                    }
                }
                if (this.isParcoords()) {
                    return this.filterRegions(tt(e), true).call(r)
                } else {
                    return this.regions().selectAll(this.regionName()).filter(tt(e)).call(n)
                }
            }
        }, {
            key: "demuteRegions",
            value: function t(e) {
                var i = this;
                var r = function t(e) {
                    i.demute(e)
                };
                var n = function t(e) {
                    var r = e.selectAll(i.nodeName());
                    i.demute(r)
                };
                if (!arguments.length) {
                    if (this.shape() === Ds[0]) {
                        return this.filterRegions().call(r)
                    } else {
                        return this.regions().selectAll(this.regionName()).call(n)
                    }
                }
                if (this.isParcoords()) {
                    return this.filterRegions(tt(e), true).call(r)
                } else {
                    return this.regions().selectAll(this.regionName()).filter(tt(e)).call(n)
                }
            }
        }, {
            key: "muteFromLegend",
            value: function t(e) {
                this.muteRegions(e.key)
            }
        }, {
            key: "demuteFromLegend",
            value: function t(e) {
                this.demuteRegions(e.key)
            }
        }]);
        return e
    }(x(fr).with(mn, fn, gr, Sn));

    function Cs(t) {
        return "x-" + (t.field ? t.field : t)
    }

    function Rs(t) {
        return "y-" + (t.field ? t.field : t)
    }
    var Es = w(Ls);

    function Bs() {
        var e = function t(e, i) {
            var r = this.__execs__.field;
            if (e.length === 1) {
                if (i.length === 0) this.measure(j);
                r.r = G(i[0]);
                r.region = Xr(e[0]);
                if (i.length === 0) return Ks[0];
                else if (i.length === 1) return Ks[1]
            } else throw new A
        };
        this.condition(e);
        this.__execs__.munged = this.aggregate(false, true, false, false);
        this.limitKeys();
        var i = this.__execs__.field;
        var r = t.pie().value(function(t) {
            return t.value[i.r.valueName()]
        }).padAngle(this.padding());
        if (this.sortByValue()) {
            r.sortValues(this.sortByValue() === "ascending" ? function(t, e) {
                return t - e
            } : function(t, e) {
                return e - t
            })
        }
        var n = r(this.__execs__.munged);
        n.forEach(function(t) {
            return t.key = t.data.key
        });
        if (i.region.interval()) {
            n.forEach(function(t) {
                t.data.key = new Date(t.data.key)
            })
        }
        this.__execs__.munged = n
    }

    function js(t) {
        var e = this.scale();
        var i = this.__execs__.munged;
        var r = this.__execs__.field;
        var n = r.region.munged(i).domain();
        e.color = this.updateColorScale(n, t)
    }

    function Is() {
        var e = this;
        var i = this.__execs__.scale;
        var r = this.label();
        var n = t.transition().duration(this.transition().duration).delay(this.transition().delay);
        var a = this.innerSize();
        var s = this.size();
        var o = this.font();
        var l = this.textWithLabel();
        var u = t.arc().innerRadius(s.range[0]).outerRadius(s.range[1]).startAngle(function(t) {
            return t.startAngle
        }).endAngle(function(t) {
            return t.endAngle
        }).padAngle(function(t) {
            return t.padAngle
        });
        var f = function e(i) {
            var r = t.interpolate({
                endAngle: 0
            }, i);
            return function(t) {
                return u(r(t))
            }
        };
        var h = function e(r) {
            var n = t.mean(s.range);
            r.each(function(t) {
                t.mid = (t.endAngle + t.startAngle) / 2;
                t.dx = Math.sin(t.mid) * n;
                t.dy = -Math.cos(t.mid) * n;
                t.x = a.width / 2 + t.dx;
                t.y = a.height / 2 + t.dy;
                t.color = i.color(t.key);
                t.labeltext = l ? t.data.key : null;
                t.percentage = (t.endAngle - t.startAngle) * 100 / (Math.PI * 2);
                t.text = c(t.percentage) + "%"
            })
        };
        var d = function t(e) {
            e.style("fill", function(t) {
                return t.color
            }).style("cursor", "pointer")
        };
        var v = function t(e) {
            e.style("fill", function(t) {
                return t.color
            }).transition(n).attrTween("d", f)
        };
        var _ = function i(r) {
            r.each(function(i) {
                t.select(this).attr("x", i.dx).attr("dy", ".35em").attr("y", i.dy + o["font-size"] / 2).attr("text-anchor", "middle").style("pointer-events", "none").text(i.text);
                e.styleFont(t.select(this))
            })
        };
        var p = function i(a) {
            a.each(function(i) {
                t.select(this).style("visibility", r ? "visible" : "hidden").text(i.text).transition(n).attr("x", i.dx).attr("y", i.dy);
                e.styleFont(t.select(this))
            })
        };
        var m = function i(r) {
            r.each(function(i) {
                t.select(this).attr("x", i.dx).attr("dy", ".35em").attr("y", i.dy - o["font-size"] / 2).attr("text-anchor", "middle").style("pointer-events", "none").text(i.labeltext);
                e.styleFont(t.select(this))
            })
        };
        var g = function i(a) {
            a.each(function(i) {
                t.select(this).style("visibility", r ? "visible" : "hidden").text(i.labeltext).transition(n).attr("x", i.dx).attr("y", i.dy);
                e.styleFont(t.select(this))
            })
        };
        var y = function t(i) {
            var r = i.selectAll(e.nodeName()).data(function(t) {
                return t
            }, function(t) {
                return t.data.key
            });
            r.exit().remove();
            var n = r.enter().append("g").attr("class", e.nodeName(true) + " pie").call(h);
            n.append("path").call(d);
            if (l) {
                n.append("text").attr("class", e.nodeName(true) + " labeltext").call(m)
            }
            n.append("text").attr("class", e.nodeName(true) + " label").call(_);
            r.call(h);
            r = n.merge(r).attr("transform", "translate(" + [a.width / 2, a.height / 2] + ")");
            r.select("path").call(v);
            if (l) {
                r.select("labeltext").call(g)
            }
            r.select("label").call(p);
            e.__execs__.nodes = r
        };
        this.renderRegion(function(t) {
            t.x = 0;
            t.y = 0
        }, function(t) {
            return [t]
        }).call(y)
    }

    function Vs() {
        if (!this.legend()) return;
        this.renderLegend()
    }

    function Hs() {
        if (!this.tooltip()) return;
        var t = this.isCount();
        var e = this.__execs__.field;
        var i = function t(i) {
            var r = e.region.isInterval() ? e.region.format() : null;
            return r ? r(i) : i
        };
        var r = function t(e) {
            return {
                name: "key",
                value: i(e.data.key)
            }
        };
        var n = function i(r, n) {
            var a = void 0;
            if (t) {
                a = B
            } else {
                a = e.region.field()
            }
            return {
                name: a,
                value: n
            }
        };
        this.renderTooltip({
            value: n,
            key: r
        })
    }

    function Gs(t, e) {
        t.attr("transform", "translate(" + [e.width, 0] + ")")
    }

    function Xs() {
        var e = this.unit();
        var i = this.__execs__.canvas;
        var r = t.transition().duration(this.transition().duration).delay(this.transition().delay);
        var n = this.innerSize();
        if (i.select(".unit-text").empty()) i.append("text").attr("class", "unit-text");
        var a = i.select(".unit-text");
        a.text(e).style("font-family", "Noto Sans KR").style("font-size", "22px").style("font-weight", "600").style("fill", "#C6CBCE").attr("text-anchor", "end").call(Gs, n)
    }

    function Ws(t, e) {
        t.attr("transform", "translate(" + [-85, 0] + ")")
    }

    function Ys() {
        var e = this.title();
        var i = this.__execs__.canvas;
        var r = t.transition().duration(this.transition().duration).delay(this.transition().delay);
        var n = this.innerSize();
        if (i.select(".title_text").empty()) i.append("text").attr("class", "title_text");
        var a = i.select(".title_text");
        a.text(e).style("font-family", "Noto Sans KR").style("font-size", "40px").style("font-weight", "bold").style("fill", "#FFFFFF").attr("text-anchor", "start").call(Ws, n)
    }
    var Zs = {
        range: [0, 150],
        scale: "linear",
        reverse: false
    };
    var Ks = ["normal", "count"];
    var Js = {
        limitKeys: 20,
        padding: 0,
        size: Zs,
        textWithLabel: null
    };
    var qs = function(t) {
        a(e, t);

        function e() {
            i(this, e);
            var t = s(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this));
            t.setAttrs(Js);
            t.process("munge", Bs, {
                isPre: true
            }).process("domain", js, {
                isPre: true
            }).process("mark", Is).process("legend", Vs).process("tooltip", Hs).process("unit", Xs).process("title", Ys);
            return t
        }
        r(e, [{
            key: "axis",
            value: function t() {
                if (!arguments.length) return [];
                return this
            }
        }, {
            key: "muteFromLegend",
            value: function t(e) {
                this.muteNodes(e.key)
            }
        }, {
            key: "demuteFromLegend",
            value: function t(e) {
                this.demuteNodes(e.key)
            }
        }, {
            key: "muteToLegend",
            value: function t(e) {
                this.muteLegend(e.data.key)
            }
        }, {
            key: "demuteToLegend",
            value: function t(e) {
                this.demuteLegend(e.data.key)
            }
        }, {
            key: "isCount",
            value: function t() {
                return this.condition() === Ks[1]
            }
        }]);
        return e
    }(x(gi).with(gr, wr));
    qs.prototype.unit = d("unit");
    qs.prototype.title = d("title");
    qs.prototype.textWithLabel = d("textWithLabel");
    var Us = w(qs);

    function Qs() {
        var t = function t(e, i) {
            var r = this.__execs__.field;
            if (this.addr()) {
                if (i.length < 1) throw new A;
                r.addr = i[0];
                r.lat = no;
                r.lng = ao;
                if (i.length === 2) {
                    r.radius = i[1];
                    return oo[0]
                } else if (i.length === 1) {
                    return oo[1]
                }
            } else {
                if (i.length < 2) throw new A;
                if (i.length === 3) {
                    r.lat = i[0];
                    r.lng = i[1];
                    r.radius = i[2];
                    return oo[0]
                } else if (i.length === 2) {
                    r.lat = i[0];
                    r.lng = i[1];
                    return oo[1]
                }
            }
            if (e.length === 1) {
                r.name = e[0]
            }
            throw new A
        };
        this.condition(t);
        this.limitRows();
        var e = this.__execs__.field;
        if (this.isSized()) this.data().sort(function(t, i) {
            return i[e.radius.field] - t[e.radius.field]
        });
        this.__execs__.munged = this.data()
    }

    function $s() {
        var e = t.select(this.container());
        var i = e.select(".frame.layer");
        if (i.empty()) {
            i = e.append("div").attr("class", "frame layer")
        }
        i.style("width", this.width() + "px").style("height", this.height() + "px");
        var r = {
            center: new daum.maps.LatLng(33.450701, 126.570667),
            level: 3
        };
        var n = new daum.maps.Map(i.node(), r);
        n.setMapTypeId(daum.maps.MapTypeId[this.mapBaseType()]);
        if (this.overlayMapType()) n.addOverlayMapTypeId(daum.maps.MapTypeId[this.overlayMapType()]);
        var a = new daum.maps.ZoomControl;
        n.addControl(a, daum.maps.ControlPosition.RIGHT);
        n.setZoomable(false);
        this.__execs__.map = n
    }

    function to() {
        var e = this.scale();
        var i = this.__execs__.field;
        if (this.isSized()) {
            var r = t.extent(this.data(), function(t) {
                return t[i.radius.field]
            });
            e.r = t.scaleLinear().domain(r.map(function(t) {
                return Math.sqrt(t)
            }))
        }
    }

    function eo(t, e, i) {
        e.addr2coord(t, function(t, e) {
            if (t === daum.maps.services.Status.OK) {
                return i(null, e.addr[0])
            } else {
                return i(t)
            }
        })
    }

    function io(t, e, i) {
        var r = Math.pow(2, e);
        t.range([i.range[0] * r, i.range[1] * r])
    }

    function ro() {
        var t = this.__execs__.map;
        var e = this.__execs__.field;
        var i = this.__execs__.scale;
        var r = this.__execs__.dispatch;
        var n = this.addr();
        var a = this.label();
        var s = this.data();
        var o = this.isSized();
        var l = this.size();
        var u = this.color();
        var f = new daum.maps.services.Geocoder;
        var h = [];
        var d = function r() {
            var n = s.map(function(t) {
                return new daum.maps.LatLng(t[e.lat.field], t[e.lng.field])
            });
            var a = new daum.maps.LatLngBounds;
            n.forEach(function(t) {
                a.extend(t)
            });
            t.setBounds(a);
            var c = t.getLevel();
            if (o) io(i.r, c, l)
        };
        var v = function r() {
            var f = t.getLevel();
            var d = 111111;
            s.forEach(function(r) {
                var s = new daum.maps.LatLng(r[e.lat.field], r[e.lng.field]);
                var v = o ? i.r(Math.sqrt(r[e.radius.field])) : l.range[0] * Math.pow(2, f);
                var _ = {
                    clickable: true,
                    zIndex: 10,
                    center: s,
                    radius: v,
                    strokeColor: u[0],
                    strokeWeight: 1.5,
                    strokeOpacity: 1,
                    strokeStyle: "solid",
                    fillColor: u[0],
                    fillOpacity: .5
                };
                var p = new daum.maps.Circle(_);
                p.setMap(t);
                h.push(p);
                var m = e.name ? r[e.name.field] : n ? r[e.addr.field] : "Y: " + c(r[e.lat.field]) + "</br> X: " + c(r[e.lng.field]);
                var g = '<div class="jelly-chart-tooltip" style="padding:4px;font-size:12px;font-family:sans-serif;">' + '<div class="jelly-chart-key" style="font-weight:bold;">' + m + "</div>" + (o ? '<div class="jelly-chart-value">' + e.radius.field + ": " + c(r[e.radius.field]) + "</div>" : "") + "</div>";
                var y = new daum.maps.InfoWindow({
                    position: new daum.maps.LatLng(r[e.lat.field] + v / d, r[e.lng.field]),
                    content: g
                });
                daum.maps.event.addListener(p, "mouseover", function() {
                    y.open(t)
                });
                daum.maps.event.addListener(p, "mouseout", function() {
                    y.close()
                });
                if (o && a) {
                    var x = c(r[e.radius.field]);
                    var k = new daum.maps.CustomOverlay({
                        position: s,
                        clickable: true,
                        zIndex: -1,
                        content: '<div class="label" style="pointer-events:none;padding:4px;font-size:12px;font-family:sans-serif;">' + x + "</div>"
                    });
                    k.setMap(t)
                }
            })
        };
        if (n) {
            var _ = 0;
            s.forEach(function(t) {
                var i = t[e.addr.field];
                var n = function e(i, n) {
                    if (!i) {
                        t[no.field] = n.lat;
                        t[ao.field] = n.lng
                    }
                    _ += 1;
                    r.call("loading", this, _);
                    if (_ === s.length) {
                        d();
                        v();
                        r.call("end")
                    }
                };
                try {
                    eo(i, f, n)
                } catch (t) {
                    n(t)
                }
            })
        } else {
            d();
            v()
        }
        if (!o) {
            daum.maps.event.addListener(t, "zoom_changed", function() {
                var e = l.range[0] * Math.pow(2, t.getLevel());
                h.forEach(function(t) {
                    t.setRadius(e)
                })
            })
        }
    }
    var no = {
        field: "__--jelly-lat--__"
    };
    var ao = {
        field: "__--jelly-lng--__"
    };
    var so = {
        range: [.5, 4],
        scale: "linear",
        reverse: false
    };
    var oo = ["normal", "point"];
    var lo = {
        addr: false,
        mapBaseType: "ROADMAP",
        needCanvas: false,
        overlayMapType: null,
        size: so
    };
    var co = function(e) {
        a(n, e);

        function n() {
            i(this, n);
            var e = s(this, (n.__proto__ || Object.getPrototypeOf(n)).call(this));
            e.setAttrs(lo);
            e.__execs__.dispatch = t.dispatch("loading", "end");
            f(e, e.__execs__.dispatch);
            e.process("munge", Qs, {
                isPre: true
            }).process("domain", to, {
                isPre: true
            }).process("map", $s).process("mark", ro);
            return e
        }
        r(n, [{
            key: "isSized",
            value: function t() {
                return this.condition() === oo[0]
            }
        }]);
        return n
    }(gi);
    co.prototype.addr = d("addr");
    co.prototype.mapBaseType = d("mapBaseType");
    co.prototype.overlayMapType = d("overlayMapType");
    var uo = w(co);

    function fo() {
        var t = this;
        var e = this.__execs__.scale;
        var i = this.__execs__.field,
            r = i.yBar,
            n = i.yLine;
        var a = this.axisX();
        var s = this.axis().find(function(t) {
            return t.target === "y" && t.orient === "left"
        });
        var o = this.axis().find(function(t) {
            return t.target === "y" && t.orient === "right"
        });
        var l = this.__execs__.field;
        var c = this.font();
        var u = function i(r) {
            r.field = l.x.field();
            var n = t.axisDefault(e.x, r);
            n.font(c);
            if (r.orient === "bottom") n.y(e.yBar.range()[0]);
            return n
        };
        var f = function i(r, n) {
            var a = t.axisDefault(r, n);
            a.font(c);
            if (n.orient === "right") a.x(e.x.range()[1]);
            return a
        };
        if (a) {
            u(a)
        }
        if (s) {
            s.field = r.field();
            o.field = n.field();
            f(e.yBar, s);
            f(e.yLine, o)
        }
        this.renderAxis()
    }

    function ho() {
        var t = function t(e, i) {
            var r = this.__execs__.field;
            if (e.length === 1 && i.length === 2) {
                r.x = Xr(e[0]);
                r.yBar = G(i[0]);
                r.yLine = G(i[1]);
                r.region = Xr(this.mixedDimension());
                return Ao[0]
            } else if (e.length === 1 && i.length === 3) {
                r.x = Xr(e[0]);
                r.yBar = G(i[0]);
                r.yLine = G(I).mixed(true).measures(i.slice(1));
                r.region = Xr(this.mixedDimension());
                return Ao[2]
            } else throw new A
        };
        this.condition(t);
        this.__execs__.munged = this.aggregate()
    }

    function vo(e) {
        var i = this.__execs__.munged;
        var r = this.__execs__.field,
            n = r.x,
            a = r.yBar,
            s = r.yLine;
        var o = this.axisY();
        if (o && o.orient === "left") {
            var l = Object.assign({}, o);
            l.orient = "right";
            this.axis(l)
        }
        var c = n.level(0).munged(i).domain(this.sortByValue());
        var u = this.scale();
        u.x = t.scaleBand().padding(this.padding()).domain(c);
        u.yBar = t.scaleLinear();
        u.yLine = t.scaleLinear();
        this.setCustomDomain("yBar", sn(a, i));
        this.setCustomDomain("yLine", xa(s, i));
        u.color = this.updateColorScale(this.measures().map(function(t) {
            return t.field
        }), e)
    }

    function _o() {
        var t = this.scale(),
            e = t.x,
            i = t.yBar,
            r = t.yLine;
        var n = this.axisX();
        var a = this.axis().find(function(t) {
            return t.target === "y" && t.orient === "left"
        });
        var s = this.axis().find(function(t) {
            return t.target === "y" && t.orient === "right"
        });
        if (a) {
            this.thickness(a, i, false, false);
            this.thickness(s, r, false, false)
        }
        if (n) {
            this.thickness(n, e, true, true)
        }
        var o = this.innerSize(),
            l = o.width,
            c = o.height;
        i.range([c, 0]);
        r.range([c, 0]);
        e.range([0, l]);
        return this
    }

    function po() {
        var t = this.__execs__.scale;
        this.renderRegion(function(t) {
            return t.x = t.y = 0
        }, t.color.domain().map(function(t) {
            return {
                key: t
            }
        }))
    }

    function mo() {
        var t = this.legend();
        if (!t) return;
        this.renderLegend()
    }

    function go() {
        var e = this;
        var i = this;
        var r = this.data();
        var n = this.__execs__.field;
        var a = this.color();
        var s = this.innerSize();
        var o = s.width,
            l = s.height;
        var c = this.padding();
        var u = this.dimensions();
        var f = [n.yBar.toObject()];
        var h = ["axisTitles", "padding", "font", "label", "grid"].map(function(t) {
            return {
                key: t,
                value: e[t]()
            }
        });
        var d = this.isMixed() ? [I] : [n.yLine.toObject()];
        var v = ["axisTitles", "curve", "point", "pointRatio", "regionPadding", "size", "grid", "font", "label"].map(function(t) {
            return {
                key: t,
                value: i[t]()
            }
        });
        var _ = function t() {
            var e = ka().container(this).data(r).dimensions(u).measures(d).width(o).height(l).legend(false).tooltip(false).padding(c).parent(i).zeroOffset(true).color(a[1]).scaleBandMode(true);
            v.forEach(function(t) {
                return e[t.key](t.value)
            });
            e.render()
        };
        var p = function t() {
            var e = on().container(this).data(r).dimensions(u).measures(f).width(o).height(l).padding(c).legend(false).tooltip(false).zeroOffset(true).parent(i).color(a[0]);
            h.forEach(function(t) {
                e[t.key](t.value)
            });
            e.render()
        };
        this.regions().each(function(e, i) {
            if (i === 0) t.select(this).each(p);
            else t.select(this).each(_)
        })
    }

    function yo() {
        if (!this.tooltip()) return;
        var t = this.__execs__.field;
        var e = function t(e) {
            return {
                name: "key",
                value: e.data.key
            }
        };
        var i = function e(i, r) {
            var n = i.anchor ? t.yLine.field() : t.yBar.field();
            return {
                name: n,
                value: r
            }
        };
        this.renderTooltip({
            value: i,
            key: e
        })
    }

    function xo(t, e) {
        t.attr("transform", "translate(" + [e.width, 0] + ")")
    }

    function ko() {
        var t = this.unit();
        var e = this.__execs__.canvas;
        var i = this.innerSize();
        if (e.select(".unit-text").empty()) e.append("text").attr("class", "unit-text");
        var r = e.select(".unit-text");
        r.text(t).style("font-family", "Noto Sans KR").style("font-size", "22px").style("font-weight", "600").style("fill", "#C6CBCE").attr("text-anchor", "end").call(xo, i)
    }

    function wo(t, e) {
        t.attr("transform", "translate(" + [-85, 0] + ")")
    }

    function bo() {
        var t = this.title();
        var e = this.__execs__.canvas;
        var i = this.innerSize();
        if (e.select(".title_text").empty()) e.append("text").attr("class", "title_text");
        var r = e.select(".title_text");
        r.text(t).style("font-family", "Noto Sans KR").style("font-size", "40px").style("font-weight", "bold").style("fill", "#FFFFFF").attr("text-anchor", "start").call(wo, i)
    }
    var zo = {
        range: [2, 2],
        scale: "linear",
        reverse: false
    };
    var Ao = ["normal", "count", "mixed"];
    var No = {
        padding: .05,
        point: false,
        pointRatio: 3,
        regionPadding: .1,
        size: zo
    };
    var Fo = function(t) {
        a(e, t);

        function e() {
            i(this, e);
            var t = s(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this));
            t.setAttrs(No);
            t.process("munge", ho, {
                isPre: true
            }).process("domain", vo, {
                isPre: true
            }).process("range", _o, {
                isPre: true
            }).process("unit", ko).process("title", bo).process("region", po).process("facet", go).process("axis", fo).process("legend", mo).process("tooltip", yo);
            return t
        }
        r(e, [{
            key: "measureName",
            value: function t() {
                var e = this.measures();
                var i = void 0;
                if (this.condition() === Ao[2]) i = I.field;
                else if (this.aggregated() && e[0].field === I.field) i = e[0].field;
                else i = e[0].field + "-" + e[0].op;
                return i
            }
        }, {
            key: "isCount",
            value: function t() {
                return this.condition() === Ao[1]
            }
        }, {
            key: "isMixed",
            value: function t() {
                return this.condition() == Ao[2]
            }
        }]);
        return e
    }(x(fr).with(gr, mn, wr));
    Fo.prototype.unit = d("unit");
    Fo.prototype.title = d("title");
    var So = w(Fo);
    var Oo = {
        bar: on,
        line: ka,
        scatter: Va,
        xyHeatmap: $a,
        treemap: fs,
        parCoords: Es,
        pie: Us,
        markerMap: uo,
        combo: So
    };
    Oo.type = function(t) {
        if (Oo.hasOwnProperty(t)) return Oo[t];
        throw new Error("Undefined type: " + t + " is not available")
    };
    return Oo
});
