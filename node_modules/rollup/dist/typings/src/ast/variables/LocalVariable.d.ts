import Variable from './Variable';
import VariableReassignmentTracker, { ObjectPath } from './VariableReassignmentTracker';
import ExecutionPathOptions from '../ExecutionPathOptions';
import { PredicateFunction, UnknownAssignment } from '../values';
import CallOptions from '../CallOptions';
import Identifier from '../nodes/Identifier';
import { ForEachReturnExpressionCallback } from '../Node';
import Expression from '../nodes/Expression';
import ExportDefaultDeclaration from '../nodes/ExportDefaultDeclaration';
import Declaration from '../nodes/Declaration';
export default class LocalVariable extends Variable {
    declarations: Set<Identifier | ExportDefaultDeclaration>;
    boundExpressions: VariableReassignmentTracker;
    constructor(name: string, declarator: Identifier | ExportDefaultDeclaration | null, init: Expression | Declaration | UnknownAssignment);
    addDeclaration(identifier: Identifier): void;
    reassignPath(path: ObjectPath, options: ExecutionPathOptions): void;
    forEachReturnExpressionWhenCalledAtPath(path: ObjectPath, callOptions: CallOptions, callback: ForEachReturnExpressionCallback, options: ExecutionPathOptions): void;
    getName(es: boolean): string;
    hasEffectsWhenAccessedAtPath(path: ObjectPath, options: ExecutionPathOptions): boolean;
    hasEffectsWhenAssignedAtPath(path: ObjectPath, options: ExecutionPathOptions): boolean;
    hasEffectsWhenCalledAtPath(path: ObjectPath, callOptions: CallOptions, options: ExecutionPathOptions): boolean;
    includeVariable(): boolean;
    someReturnExpressionWhenCalledAtPath(path: ObjectPath, callOptions: CallOptions, predicateFunction: (options: ExecutionPathOptions) => PredicateFunction, options: ExecutionPathOptions): boolean;
    toString(): string;
}
