import { UnknownAssignment } from '../values';
import Expression from '../nodes/Expression';
import ExecutionPathOptions from '../ExecutionPathOptions';
import Declaration from '../nodes/Declaration';
export interface UnknownKey {
    type: 'UNKNOWN_KEY';
}
export declare type ObjectPathElement = string | UnknownKey;
export declare type ObjectPath = ObjectPathElement[];
export declare const UNKNOWN_KEY: UnknownKey;
export declare type PathCallback = (path: ObjectPath, expression: Expression | Declaration | UnknownAssignment) => void;
export declare type PathPredicate = (path: ObjectPath, expression: Expression | Declaration | UnknownAssignment) => boolean;
export default class VariableReassignmentTracker {
    private _initialExpression;
    private _reassignedPathTracker;
    constructor(initialExpression: Expression | Declaration | UnknownAssignment);
    reassignPath(path: ObjectPath, options: ExecutionPathOptions): void;
    forEachAtPath(path: ObjectPath, callback: PathCallback): void;
    someAtPath(path: ObjectPath, predicateFunction: PathPredicate): boolean;
}
