import { PredicateFunction } from '../values';
import CallOptions from '../CallOptions';
import ExecutionPathOptions from '../ExecutionPathOptions';
import Identifier from '../nodes/Identifier';
import { ForEachReturnExpressionCallback } from '../Node';
import { ObjectPath } from './VariableReassignmentTracker';
export default class Variable {
    exportName?: string;
    included: boolean;
    isExternal?: boolean;
    isNamespace?: boolean;
    isReassigned: boolean;
    name: string;
    reexported?: boolean;
    constructor(name: string);
    /**
     * Binds identifiers that reference this variable to this variable.
     * Necessary to be able to change variable names.
     * @param {Identifier} identifier
     */
    addReference(_identifier: Identifier): void;
    /**
     * @param {String[]} path
     * @param {ExecutionPathOptions} options
     */
    reassignPath(_path: ObjectPath, _options: ExecutionPathOptions): void;
    /**
     * @param {String[]} path
     * @param {CallOptions} callOptions
     * @param {Function} callback
     * @param {ExecutionPathOptions} options
     */
    forEachReturnExpressionWhenCalledAtPath(_path: ObjectPath, _callOptions: CallOptions, _callback: ForEachReturnExpressionCallback, _options: ExecutionPathOptions): void;
    /**
     * @returns {String}
     */
    getName(_es?: boolean): string;
    /**
     * @param {String[]} path
     * @param {ExecutionPathOptions} options
     * @return {boolean}
     */
    hasEffectsWhenAccessedAtPath(path: ObjectPath, _options: ExecutionPathOptions): boolean;
    /**
     * @param {String[]} path
     * @param {ExecutionPathOptions} options
     * @return {boolean}
     */
    hasEffectsWhenAssignedAtPath(_path: ObjectPath, _options: ExecutionPathOptions): boolean;
    /**
     * @param {String[]} path
     * @param {CallOptions} callOptions
     * @param {ExecutionPathOptions} options
     * @return {boolean}
     */
    hasEffectsWhenCalledAtPath(_path: ObjectPath, _callOptions: CallOptions, _options: ExecutionPathOptions): boolean;
    /**
     * Marks this variable as being part of the bundle, which is usually the case when one of
     * its identifiers becomes part of the bundle. Returns true if it has not been included
     * previously.
     * Once a variable is included, it should take care all its declarations are included.
     * @returns {boolean}
     */
    includeVariable(): boolean;
    /**
     * @param {String[]} path
     * @param {CallOptions} callOptions
     * @param {Function} predicateFunction
     * @param {ExecutionPathOptions} options
     * @returns {boolean}
     */
    someReturnExpressionWhenCalledAtPath(_path: ObjectPath, _callOptions: CallOptions, predicateFunction: (options: ExecutionPathOptions) => PredicateFunction, options: ExecutionPathOptions): boolean;
}
