import Immutable from 'immutable';
import Node from './Node';
import CallExpression from './nodes/CallExpression';
import Property from './nodes/Property';
import CallOptions from './CallOptions';
import ThisVariable from './variables/ThisVariable';
import ParameterVariable from './variables/ParameterVariable';
import Variable from './variables/Variable';
import { UnknownAssignment } from './values';
import { ObjectPath } from './variables/VariableReassignmentTracker';
export declare type RESULT_KEY = {};
export declare const RESULT_KEY: RESULT_KEY;
/** Wrapper to ensure immutability */
export default class ExecutionPathOptions {
    _optionValues: Immutable.Map<string, Node | Variable>;
    /**
     * @returns {ExecutionPathOptions}
     */
    static create(): ExecutionPathOptions;
    constructor(optionValues: Immutable.Map<string, any>);
    /**
     * @param {string} option - The name of an option
     * @returns {*} Its value
     */
    get(option: string): Node | Variable;
    /**
     * Returns a new ExecutionPathOptions instance with the given option removed.
     * Does not mutate the current instance. Also works in sub-classes.
     * @param {string} option - The name of an option
     * @returns {*} Its value
     */
    remove(option: string): ExecutionPathOptions;
    /**
     * Returns a new ExecutionPathOptions instance with the given option set to a new value.
     * Does not mutate the current instance. Also works in sub-classes.
     * @param {string} option - The name of an option
     * @param {*} value - The new value of the option
     * @returns {ExecutionPathOptions} A new options instance
     */
    set(option: string, value: any): ExecutionPathOptions;
    setIn(optionPath: (string | Node | Variable | RESULT_KEY)[], value: any): ExecutionPathOptions;
    /**
     * @param {String[]} path
     * @param {Node} node
     * @return {ExecutionPathOptions}
     */
    addAccessedNodeAtPath(path: ObjectPath, node: Node | UnknownAssignment): ExecutionPathOptions;
    /**
     * @param {String[]} path
     * @param {CallExpression|Property} callExpression
     * @return {ExecutionPathOptions}
     */
    addAccessedReturnExpressionAtPath(path: ObjectPath, callExpression: CallExpression | Property): ExecutionPathOptions;
    /**
     * @param {String[]} path
     * @param {Node} node
     * @return {ExecutionPathOptions}
     */
    addAssignedNodeAtPath(path: ObjectPath, node: Node | Variable | UnknownAssignment): ExecutionPathOptions;
    /**
     * @param {String[]} path
     * @param {CallExpression|Property} callExpression
     * @return {ExecutionPathOptions}
     */
    addAssignedReturnExpressionAtPath(path: ObjectPath, callExpression: CallExpression | Property): ExecutionPathOptions;
    /**
     * @param {String[]} path
     * @param {Node} node
     * @param {CallOptions} callOptions
     * @return {ExecutionPathOptions}
     */
    addCalledNodeAtPathWithOptions(path: ObjectPath, node: Node | UnknownAssignment, callOptions: CallOptions): ExecutionPathOptions;
    /**
     * @param {String[]} path
     * @param {CallExpression|Property} callExpression
     * @return {ExecutionPathOptions}
     */
    addCalledReturnExpressionAtPath(path: ObjectPath, callExpression: CallExpression | Property): ExecutionPathOptions;
    /**
     * @return {ParameterVariable[]}
     */
    getArgumentsVariables(): ParameterVariable[];
    /**
     * @return {ExecutionPathOptions}
     */
    getHasEffectsWhenCalledOptions(): ExecutionPathOptions;
    /**
     * @param {ThisVariable|ParameterVariable} variable
     * @returns {Node}
     */
    getReplacedVariableInit(variable: ThisVariable | ParameterVariable): Node;
    /**
     * @param {String[]} path
     * @param {Node} node
     * @return {boolean}
     */
    hasNodeBeenAccessedAtPath(path: ObjectPath, node: Node | Variable | UnknownAssignment): boolean;
    /**
     * @param {String[]} path
     * @param {Node} node
     * @return {boolean}
     */
    hasNodeBeenAssignedAtPath(path: ObjectPath, node: Node | Variable | UnknownAssignment): boolean;
    /**
     * @param {String[]} path
     * @param {Node} node
     * @param {CallOptions} callOptions
     * @return {boolean}
     */
    hasNodeBeenCalledAtPathWithOptions(path: ObjectPath, node: Node | UnknownAssignment, callOptions: CallOptions): boolean;
    /**
     * @param {String[]} path
     * @param {CallExpression|Property} callExpression
     * @return {boolean}
     */
    hasReturnExpressionBeenAccessedAtPath(path: ObjectPath, callExpression: CallExpression | Property): boolean;
    /**
     * @param {String[]} path
     * @param {CallExpression|Property} callExpression
     * @return {boolean}
     */
    hasReturnExpressionBeenAssignedAtPath(path: ObjectPath, callExpression: CallExpression | Property): boolean;
    /**
     * @param {String[]} path
     * @param {CallExpression|Property} callExpression
     * @return {boolean}
     */
    hasReturnExpressionBeenCalledAtPath(path: ObjectPath, callExpression: CallExpression | Property): boolean;
    /**
     * @return {boolean}
     */
    ignoreBreakStatements(): Node | Variable;
    /**
     * @param {string} labelName
     * @return {boolean}
     */
    ignoreLabel(labelName: string): any;
    /**
     * @return {boolean}
     */
    ignoreReturnAwaitYield(): Node | Variable;
    /**
     * @param {ThisVariable|ParameterVariable} variable
     * @param {Node} init
     * @return {ExecutionPathOptions}
     */
    replaceVariableInit(variable: ThisVariable | ParameterVariable, init: Node | UnknownAssignment): ExecutionPathOptions;
    /**
     * @param {ParameterVariable[]} variables
     * @return {ExecutionPathOptions}
     */
    setArgumentsVariables(variables: (ParameterVariable | Node)[]): ExecutionPathOptions;
    /**
     * @param {boolean} [value=true]
     * @return {ExecutionPathOptions}
     */
    setIgnoreBreakStatements(value?: boolean): ExecutionPathOptions;
    /**
     * @param {string} labelName
     * @return {ExecutionPathOptions}
     */
    setIgnoreLabel(labelName: string): ExecutionPathOptions;
    /**
     * @return {ExecutionPathOptions}
     */
    setIgnoreNoLabels(): ExecutionPathOptions;
    /**
     * @param {boolean} [value=true]
     * @return {ExecutionPathOptions}
     */
    setIgnoreReturnAwaitYield(value?: boolean): ExecutionPathOptions;
}
