import LocalVariable from '../variables/LocalVariable';
import ExportDefaultVariable from '../variables/ExportDefaultVariable';
import { UnknownAssignment } from '../values';
import Identifier from '../nodes/Identifier';
import Expression from '../nodes/Expression';
import ExportDefaultDeclaration from '../nodes/ExportDefaultDeclaration';
import Declaration from '../nodes/Declaration';
import GlobalVariable from '../variables/GlobalVariable';
import ExternalVariable from '../variables/ExternalVariable';
import ThisVariable from '../variables/ThisVariable';
import ArgumentsVariable from '../variables/ArgumentsVariable';
import Variable from '../variables/Variable';
export default class Scope {
    parent: Scope | void;
    variables: {
        this: ThisVariable | LocalVariable;
        default: ExportDefaultVariable;
        arguments: ArgumentsVariable;
        [name: string]: LocalVariable | GlobalVariable | ExternalVariable | ArgumentsVariable;
    };
    isModuleScope: boolean;
    children: Scope[];
    constructor(options?: {
        parent?: Scope;
        isModuleScope?: boolean;
    });
    /**
     * @param identifier
     * @param {Object} [options] - valid options are
     *        {(Node|null)} init
     *        {boolean} isHoisted
     * @return {Variable}
     */
    addDeclaration(identifier: Identifier, options?: {
        init?: Expression | Declaration | UnknownAssignment | null;
        isHoisted?: boolean;
    }): LocalVariable | GlobalVariable | ExternalVariable | ArgumentsVariable;
    addExportDefaultDeclaration(name: string, exportDefaultDeclaration: ExportDefaultDeclaration): ExportDefaultVariable;
    addReturnExpression(expression: Expression | UnknownAssignment): void;
    contains(name: string): boolean;
    deshadow(names: Set<string>): void;
    findLexicalBoundary(): Scope;
    findVariable(name: string): Variable;
}
