import Node, { ForEachReturnExpressionCallback } from '../Node';
import { UnknownKey, ObjectPath } from '../variables/VariableReassignmentTracker';
import Property from './Property';
import CallOptions from '../CallOptions';
import ExecutionPathOptions from '../ExecutionPathOptions';
import { PredicateFunction } from '../values';
export default class ObjectExpression extends Node {
    type: 'ObjectExpression';
    properties: Property[];
    reassignPath(path: ObjectPath, options: ExecutionPathOptions): void;
    forEachReturnExpressionWhenCalledAtPath(path: ObjectPath, callOptions: CallOptions, callback: ForEachReturnExpressionCallback, options: ExecutionPathOptions): void;
    _getPossiblePropertiesWithName(name: string | UnknownKey, kinds: ObjectPath): {
        properties: Property[];
        hasCertainHit: boolean;
    };
    hasEffectsWhenAccessedAtPath(path: ObjectPath, options: ExecutionPathOptions): boolean;
    hasEffectsWhenAssignedAtPath(path: ObjectPath, options: ExecutionPathOptions): boolean;
    hasEffectsWhenCalledAtPath(path: ObjectPath, callOptions: CallOptions, options: ExecutionPathOptions): boolean;
    someReturnExpressionWhenCalledAtPath(path: ObjectPath, callOptions: CallOptions, predicateFunction: (optioons: ExecutionPathOptions) => PredicateFunction, options: ExecutionPathOptions): boolean;
}
