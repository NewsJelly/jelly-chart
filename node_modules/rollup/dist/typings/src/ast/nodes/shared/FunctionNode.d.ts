import Node, { ForEachReturnExpressionCallback } from '../../Node';
import FunctionScope from '../../scopes/FunctionScope';
import BlockScope from '../../scopes/FunctionScope';
import VirtualObjectExpression from './VirtualObjectExpression';
import BlockStatement from '../BlockStatement';
import Identifier from '../Identifier';
import Pattern from '../Pattern';
import CallOptions from '../../CallOptions';
import ExecutionPathOptions from '../../ExecutionPathOptions';
import { PredicateFunction } from '../../values';
import { ObjectPath } from '../../variables/VariableReassignmentTracker';
export default class FunctionNode extends Node {
    id: Identifier;
    body: BlockStatement;
    scope: BlockScope;
    params: Pattern[];
    prototypeObject: VirtualObjectExpression;
    bindNode(): void;
    forEachReturnExpressionWhenCalledAtPath(path: ObjectPath, callOptions: CallOptions, callback: ForEachReturnExpressionCallback, options: ExecutionPathOptions): void;
    hasEffects(options: ExecutionPathOptions): boolean;
    hasEffectsWhenAccessedAtPath(path: ObjectPath, _options: ExecutionPathOptions): boolean;
    hasEffectsWhenAssignedAtPath(path: ObjectPath, _options: ExecutionPathOptions): boolean;
    hasEffectsWhenCalledAtPath(path: ObjectPath, callOptions: CallOptions, options: ExecutionPathOptions): boolean;
    includeInBundle(): boolean;
    initialiseNode(): void;
    initialiseScope(parentScope: FunctionScope): void;
    someReturnExpressionWhenCalledAtPath(path: ObjectPath, callOptions: CallOptions, predicateFunction: (options: ExecutionPathOptions) => PredicateFunction, options: ExecutionPathOptions): boolean;
}
