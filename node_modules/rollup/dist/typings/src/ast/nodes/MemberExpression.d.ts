import Node, { ForEachReturnExpressionCallback } from '../Node';
import { ObjectPath, UnknownKey } from '../variables/VariableReassignmentTracker';
import Expression from './Expression';
import Variable from '../variables/Variable';
import ExecutionPathOptions from '../ExecutionPathOptions';
import CallOptions from '../CallOptions';
import { PredicateFunction } from '../values';
import MagicString from 'magic-string';
export default class MemberExpression extends Node {
    type: 'MemberExpression';
    object: Expression;
    property: Expression;
    computed: boolean;
    private _bound;
    variable: Variable;
    replacement: string;
    private _checkPropertyReadSideEffects;
    bind(): void;
    reassignPath(path: ObjectPath, options: ExecutionPathOptions): void;
    forEachReturnExpressionWhenCalledAtPath(path: ObjectPath, callOptions: CallOptions, callback: ForEachReturnExpressionCallback, options: ExecutionPathOptions): void;
    hasEffects(options: ExecutionPathOptions): boolean;
    hasEffectsWhenAccessedAtPath(path: ObjectPath, options: ExecutionPathOptions): boolean;
    hasEffectsWhenAssignedAtPath(path: ObjectPath, options: ExecutionPathOptions): boolean;
    hasEffectsWhenCalledAtPath(path: ObjectPath, callOptions: CallOptions, options: ExecutionPathOptions): boolean;
    includeInBundle(): boolean;
    initialiseNode(): void;
    render(code: MagicString, es: boolean): void;
    someReturnExpressionWhenCalledAtPath(path: ObjectPath, callOptions: CallOptions, predicateFunction: (options: ExecutionPathOptions) => PredicateFunction, options: ExecutionPathOptions): boolean;
    _getPathSegment(): string | UnknownKey;
}
