import Node, { ForEachReturnExpressionCallback } from '../Node';
import { PredicateFunction } from '../values';
import ExecutionPathOptions from '../ExecutionPathOptions';
import Expression from './Expression';
import CallOptions from '../CallOptions';
import Scope from '../scopes/Scope';
import MagicString from 'magic-string';
import { ObjectPath } from '../variables/VariableReassignmentTracker';
export default class ConditionalExpression extends Node {
    type: 'ConditionalExpression';
    test: Expression;
    alternate: Expression;
    consequent: Expression;
    testValue: any;
    reassignPath(path: ObjectPath, options: ExecutionPathOptions): void;
    forEachReturnExpressionWhenCalledAtPath(path: ObjectPath, callOptions: CallOptions, callback: ForEachReturnExpressionCallback, options: ExecutionPathOptions): void;
    getValue(): any;
    hasEffects(options: ExecutionPathOptions): boolean;
    hasEffectsWhenAccessedAtPath(path: ObjectPath, options: ExecutionPathOptions): boolean;
    hasEffectsWhenAssignedAtPath(path: ObjectPath, options: ExecutionPathOptions): boolean;
    hasEffectsWhenCalledAtPath(path: ObjectPath, callOptions: CallOptions, options: ExecutionPathOptions): boolean;
    initialiseChildren(parentScope: Scope): void;
    render(code: MagicString, es: boolean): void;
    someReturnExpressionWhenCalledAtPath(path: ObjectPath, callOptions: CallOptions, predicateFunction: (options: ExecutionPathOptions) => PredicateFunction, options: ExecutionPathOptions): boolean;
    _forEachRelevantBranch(callback: (node: Node) => void): void;
    _someRelevantBranch(predicateFunction: (node: Node) => boolean): boolean;
}
