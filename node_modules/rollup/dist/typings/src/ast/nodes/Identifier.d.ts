/// <reference path="../../../../../src/ast/nodes/Identifier.d.ts" />
import Node, { ForEachReturnExpressionCallback } from '../Node';
import { UnknownAssignment, PredicateFunction } from '../values';
import Scope from '../scopes/Scope';
import Expression from './Expression';
import ExecutionPathOptions from '../ExecutionPathOptions';
import Declaration from './Declaration';
import Variable from '../variables/Variable';
import CallOptions from '../CallOptions';
import MagicString from 'magic-string';
import { ObjectPath } from '../variables/VariableReassignmentTracker';
export default class Identifier extends Node {
    type: 'Identifier';
    name: string;
    variable: Variable;
    reassignPath(path: ObjectPath, options: ExecutionPathOptions): void;
    bindNode(): void;
    _bindVariableIfMissing(): void;
    forEachReturnExpressionWhenCalledAtPath(path: ObjectPath, callOptions: CallOptions, callback: ForEachReturnExpressionCallback, options: ExecutionPathOptions): void;
    hasEffectsWhenAccessedAtPath(path: ObjectPath, options: ExecutionPathOptions): boolean;
    hasEffectsWhenAssignedAtPath(path: ObjectPath, options: ExecutionPathOptions): boolean;
    hasEffectsWhenCalledAtPath(path: ObjectPath, callOptions: CallOptions, options: ExecutionPathOptions): boolean;
    includeInBundle(): boolean;
    initialiseAndDeclare(parentScope: Scope, kind: string, init: Declaration | Expression | UnknownAssignment | null): void;
    render(code: MagicString, es: boolean): void;
    someReturnExpressionWhenCalledAtPath(path: ObjectPath, callOptions: CallOptions, predicateFunction: (options: ExecutionPathOptions) => PredicateFunction, options: ExecutionPathOptions): boolean;
}
