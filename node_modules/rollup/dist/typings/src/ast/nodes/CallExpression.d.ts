import Node, { ForEachReturnExpressionCallback } from '../Node';
import CallOptions from '../CallOptions';
import Expression from './Expression';
import ExecutionPathOptions from '../ExecutionPathOptions';
import SpreadElement from './SpreadElement';
import { PredicateFunction } from '../values';
import { ObjectPath } from '../variables/VariableReassignmentTracker';
export default class CallExpression extends Node {
    type: 'CallExpression';
    callee: Expression;
    arguments: (Expression | SpreadElement)[];
    private _callOptions;
    reassignPath(path: ObjectPath, options: ExecutionPathOptions): void;
    bindNode(): void;
    forEachReturnExpressionWhenCalledAtPath(path: ObjectPath, callOptions: CallOptions, callback: ForEachReturnExpressionCallback, options: ExecutionPathOptions): void;
    hasEffects(options: ExecutionPathOptions): boolean;
    hasEffectsWhenAccessedAtPath(path: ObjectPath, options: ExecutionPathOptions): boolean;
    hasEffectsWhenAssignedAtPath(path: ObjectPath, options: ExecutionPathOptions): boolean;
    hasEffectsWhenCalledAtPath(path: ObjectPath, callOptions: CallOptions, options: ExecutionPathOptions): boolean;
    initialiseNode(): void;
    someReturnExpressionWhenCalledAtPath(path: ObjectPath, callOptions: CallOptions, predicateFunction: (options: ExecutionPathOptions) => PredicateFunction, options: ExecutionPathOptions): boolean;
}
