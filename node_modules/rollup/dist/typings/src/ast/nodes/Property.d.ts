import Node, { ForEachReturnExpressionCallback } from '../Node';
import CallOptions from '../CallOptions';
import { UnknownAssignment, PredicateFunction } from '../values';
import Literal from './Literal';
import Identifier from './Identifier';
import Expression from './Expression';
import ExecutionPathOptions from '../ExecutionPathOptions';
import Scope from '../scopes/Scope';
import Pattern from './Pattern';
import Declaration from './Declaration';
import MagicString from 'magic-string';
import { ObjectPath } from '../variables/VariableReassignmentTracker';
export interface StandardProperty extends Property {
    value: Expression;
}
export default class Property extends Node {
    type: 'Property';
    key: Literal<string> | Identifier | Expression;
    value: Expression | Pattern;
    kind: 'init' | 'get' | 'set';
    method: boolean;
    shorthand: boolean;
    computed: boolean;
    private _accessorCallOptions;
    reassignPath(path: ObjectPath, options: ExecutionPathOptions): void;
    forEachReturnExpressionWhenCalledAtPath(path: ObjectPath, callOptions: CallOptions, callback: ForEachReturnExpressionCallback, options: ExecutionPathOptions): void;
    hasEffects(options: ExecutionPathOptions): boolean;
    hasEffectsWhenAccessedAtPath(path: ObjectPath, options: ExecutionPathOptions): boolean;
    hasEffectsWhenAssignedAtPath(path: ObjectPath, options: ExecutionPathOptions): boolean;
    hasEffectsWhenCalledAtPath(path: ObjectPath, callOptions: CallOptions, options: ExecutionPathOptions): boolean;
    initialiseAndDeclare(parentScope: Scope, kind: string, _init: Declaration | Expression | UnknownAssignment | null): void;
    initialiseNode(_parentScope: Scope): void;
    render(code: MagicString, es: boolean): void;
    someReturnExpressionWhenCalledAtPath(path: ObjectPath, callOptions: CallOptions, predicateFunction: (options: ExecutionPathOptions) => PredicateFunction, options: ExecutionPathOptions): boolean;
}
